jQuery.sap.registerPreloadedModules({
	"name": "timebox.Component-preload",
	"version": "2.0",
	"modules": {
		"timebox/Component-preload.js": "jQuery.sap.registerPreloadedModules({\n\t\"name\": \"timebox.Component-preload\",\n\t\"version\": \"2.0\",\n\t\"modules\": {\n\t\t\"timebox/Component-preload.js\": \"jQuery.sap.registerPreloadedModules({\\n\\t\\\"name\\\": \\\"timebox.Component-preload\\\",\\n\\t\\\"version\\\": \\\"2.0\\\",\\n\\t\\\"modules\\\": {\\n\\t\\t\\\"timebox/Component-preload.js\\\": \\\"jQuery.sap.registerPreloadedModules({\\\\n\\\\t\\\\\\\"name\\\\\\\": \\\\\\\"timebox.Component-preload\\\\\\\",\\\\n\\\\t\\\\\\\"version\\\\\\\": \\\\\\\"2.0\\\\\\\",\\\\n\\\\t\\\\\\\"modules\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"timebox/Component-preload.js\\\\\\\": \\\\\\\"jQuery.sap.registerPreloadedModules({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"timebox.Component-preload\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"2.0\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\\\\\\\\"modules\\\\\\\\\\\\\\\": {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/Component.js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"sap.ui.define([\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'sap/ui/core/UIComponent',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'sap/ui/Device',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'./model/models'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n], function (UIComponent, Device, models) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'use strict';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\treturn UIComponent.extend('com.metcs633.Component', {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tmetadata: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tmanifest: 'json'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t/**\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t * @public\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t * @override\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t */\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tinit: function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// call the base component's init function\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUIComponent.prototype.init.apply(this, arguments);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// set the device model\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tthis.setModel(models.createDeviceModel(), 'device');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// create the views based on the url/hash\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tthis.getRouter().initialize();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/controller/App.controller.js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"sap.ui.define([\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'sap/ui/core/mvc/Controller',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'com/metcs633/model/formatter'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n], function (Controller, formatter) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'use strict';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\treturn Controller.extend('com.metcs633.controller.App', {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tformatter: formatter,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tonInit: function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/controller/Home.controller.js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"//Authors: Andrew Hajj\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\nsap.ui.define([\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  'sap/ui/core/mvc/Controller',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  '../model/formatter',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  '../services/GoogleCalendarService',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  '../services/GoogleChartService',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  '../services/O365CalendarService'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n], function (Controller, formatter, GoogleCalendarService, GoogleChartService, O365CalendarService) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  'use strict';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  var signedInGoogle = false;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  var signedInO365 = false;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  var isGoogle = true;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  var toastOptions = {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    duration: 2000,                  // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    width: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"15em\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    my: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",             // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    at: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",             // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    of: window,                      // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    offset: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0 0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    collision: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fit fit\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",            // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    onClose: null,                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    autoClose: true,                 // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    animationTimingFunction: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ease\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    animationDuration: 2000,         // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    closeOnBrowserNavigation: true   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  };\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  return Controller.extend('com.metcs633.controller.App', {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    formatter: formatter,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    GoogleCalendarService: GoogleCalendarService,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    setCalendarTypeFromButton: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      isGoogle = (event.getParameters().item.getText() === \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Google\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\") ? true : false;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // if it goes in here that means we need to reset all the things\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (this._wizard.getProgress() > 1) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        var dtpStart = this.getView().byId('DTP1');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        var dtpEnd = this.getView().byId('DTP2');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        calendarDropDown.setSelectedItem(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        dtpStart.setValue(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        dtpEnd.setValue(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.getView().byId('calendarSelectionPanel').setVisible(false);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this._wizard.discardProgress(this._wizard.getSteps()[0]);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    set365StatusText: function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (!signedInO365) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        //this.getView().byId('signButton').setText('Sign In to O365');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        //this.getView().byId('configLabelO365').setText('Signed Out of O365!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        sap.m.MessageToast.show('Signed Out of O365!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      } else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        //this.getView().byId('signButton').setText('Sign Out of O365');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        //this.getView().byId('configLabelO365').setText('Connected to O365!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        sap.m.MessageToast.show('Connected to O365!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    // Connect to Google api by default to grab the calendar\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    onInit: function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var configLabel = this.getView().byId('configLabel');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      sap.m.MessageToast.show('Connecting to Google...', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      //configLabel.setText('Connecting to Google...');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      GoogleCalendarService.connectToGoogle(this);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      //Connect to O365\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var configLabelO365 = this.getView().byId('configLabelO365');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.set365StatusText();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this._wizard = this.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"CreateProductWizard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    afterLogin: function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.getView().byId('signButton').setEnabled(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      //this.getView().byId('configLabel').setText('Connected to Google!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      sap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    onSignIn: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (isGoogle) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.onSignInOutGooglePress();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.onSignInOutO365Press();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    onSignInOutGooglePress: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (signedInGoogle) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        GoogleCalendarService.signOut(this);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      } else {   // first turn on the busy indicator\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.getView().byId('calendarComboBox').setBusy(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        GoogleCalendarService.signIn(this);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      signedInGoogle = !signedInGoogle;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    onSignInOutO365Press: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (signedInO365) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        O365CalendarService.signOut(this);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.getView().byId('signButton').setText('Sign In to O365');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.set365StatusText();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      } else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        O365CalendarService.signIn(this);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.set365StatusText();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    chooseStepCompleted: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // We don't keep the cookies for Google, but we do for outlook\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // if this if coming from step 1 then check if the user is signed in\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // if so, go right to getting the calendars\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (!isGoogle && signedInO365) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.set365StatusText();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.getView().byId('signButton').setText('Sign Out of O365');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        O365CalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      else if (!isGoogle) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.getView().byId('signButton').setText('Sign In to O365');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      else if (!signedInGoogle) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        // clear the calendar selection\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        // set the button to login\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.getView().byId('signButton').setText('Sign In to Google');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.getView().byId('signButton').setText('Sign Out of Google');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        GoogleCalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this.getView().byId('calendarSelectionPanel').setVisible(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    setCalendarDropDownEvents: function (events) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var statusLabel = this.getView().byId('configLabel');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // add the list of parsed calendars to the dropdown for user to select\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var listModel = new sap.ui.model.json.JSONModel();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      listModel.setData(events);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      calendarDropDown.setModel(listModel);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.getView().byId('calendarSelectionPanel').setVisible(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      calendarDropDown.setBusy(false);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // statusLabel.setText('Loaded calendars!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      sap.m.MessageToast.show('Loaded calendars!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    onGetCalendarsPress: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    signInAndChoosseValidation: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // only enable the Go button if\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // A calendar is selected, a start date and an end date are selected\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        return true;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      return false;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    validateCalendarStartEndDate: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // only enable the Go button if\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // A calendar is selected, a start date and an end date are selected\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this._wizard.validateStep(this.byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"signInAndChooseCalendarStep\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        //this.getView().byId('goButton').setEnabled(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      } else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this._wizard.invalidateStep(this.byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"signInAndChooseCalendarStep\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        this._wizard.goToStep(this.byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"signInAndChooseCalendarStep\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    goButton: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // freeze the view so the user knows something is happening\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // sap.ui.core.\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\").setBusy(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // figure out the min and max time in order to query google calendar\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // this button doesn't get enabled until there is data in all 3 prompts (calendar, start & end date)\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // First, we need the selected calendar\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var selectedCalendar = calendarDropDown.getSelectedItem();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // then we need the start date time\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var startTime = dtpStart.getDateValue();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // then we need the end date date\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var endTime = dtpEnd.getDateValue();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var me = this;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      if (isGoogle) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        GoogleCalendarService.getListOfEventsFromCalendarInDateRange(selectedCalendar, startTime, endTime, function (response) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n          var events = response.result.items;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n          //console.log(events);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n          me.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\").setBusy(false);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        });\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        O365CalendarService.getEvents(startTime, endTime, selectedCalendar, function (response) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n          var events = response.value;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n          me.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\").setBusy(false);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n          // GoogleCalendarService.parseListOfEvents(events, me);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        });\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // if (!this.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\").getVisible())\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.getView().byId('changeChartType').setVisible(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\").setVisible(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"showChart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\").fireComplete();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this._wizard.goToStep(this.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"showChart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    setChartAfterParsingEvents: function (categorizedData, parsedEvents) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // set the data back into the conteroller so it's retrievable after\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.chartData = categorizedData;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.parsedEvents = parsedEvents;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.isColumnChart = (this.hasOwnProperty('isColumnChart')) ? !(this.isColumnChart) : true;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var me = this;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      GoogleChartService.drawChart(categorizedData, me, function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        // fill in the table\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        var listModel = new sap.ui.model.json.JSONModel();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        listModel.setData(parsedEvents);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        me.getView().byId('eventsTable').setModel(listModel);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        me.getView().byId('eventsTable').setVisible(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        // me.getView().byId('configLabel').setText('Analyzed time!  Scroll down to see a visual representation');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        me.isColumnChart = !(me.isColumnChart);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      });\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    changeChart: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      var me = this;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      GoogleChartService.drawChart(this.chartData, this, function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n        me.isColumnChart = !(me.isColumnChart);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      });\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    calendarSelectionChange: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.validateCalendarStartEndDate();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      // acknowledge the selection change and update the status accordingly\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      //this.getView().byId('configLabel').setText(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Calendar '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" + event.getParameters('selectedItem').selectedItem.getText() + \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"' loaded.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      sap.m.MessageToast.show(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Calendar '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" + event.getParameters('selectedItem').selectedItem.getText() + \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"' loaded.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    handleStartDateChange: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.validateCalendarStartEndDate();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    },\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    handleEndDateChange: function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n      this.validateCalendarStartEndDate();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n  });\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/model/formatter.js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"sap.ui.define([], function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'use strict';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\treturn {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/model/models.js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"sap.ui.define([\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'sap/ui/model/json/JSONModel',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'sap/ui/Device'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n], function (JSONModel, Device) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'use strict';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\treturn {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcreateDeviceModel: function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar oModel = new JSONModel(Device);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\toModel.setDefaultBindingMode('OneWay');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn oModel;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/services/GoogleCalendarService.js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"// Author: Andrew Hajj\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n// Purpose: functions to get calendar info from google\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\nsap.ui.define('com/metcs633/services/GoogleCalendarService', [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'../services/GoogleChartService'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n], function (GoogleChartService) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'use strict';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tvar Utils = {};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tvar toastOptions = {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tduration: 2000,                  // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\twidth: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"15em\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tmy: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",             // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tat: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",             // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tof: window,                      // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\toffset: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0 0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcollision: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fit fit\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",            // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tonClose: null,                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tautoClose: true,                 // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tanimationTimingFunction: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ease\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tanimationDuration: 2000,         // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcloseOnBrowserNavigation: true   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Client ID from the Developer Console\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tvar CLIENT_ID = '782211928709-49gkv11kmh5mji6m79rs9df57ba3u6pv.apps.googleusercontent.com';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Array of API discovery doc URLs for APIs used by the quickstart\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tvar DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Authorization scopes required by the API; multiple scopes can be\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// included, separated by spaces.\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tvar SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Can put into a db at a later date.\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tvar eventCategories = {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Recreation': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'painting', 'art workshop', 'sketching workshop', 'drawing workshop', 'reading', 'newspaper', 'book club', 'camping', 'cinema', 'movies', 'concert', 'gig', 'concerts', 'recital', 'gigs', 'piano', 'singing', 'music', 'choir', 'flute', 'violin', 'orchestra', 'oboe', 'clarinet', 'saxophone', 'cornett', 'trumpet', 'contrabass', 'cello', 'trombone', 'tuba', 'music', 'ensemble', 'string quartett', 'guitar', 'classical', 'choir', 'massage', 'backrub', 'massages', 'manicure', 'pedicure', 'manicures', 'pedicures', 'spa'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Sports': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'badminton', 'yoga', 'basketball', 'baseball', 'billiard', 'bowling', 'bicycle', 'cycling', 'bike', 'bicycles', 'bikes', 'biking', 'dance', 'dancing', 'dances', 'golf', 'hiking', 'hike', 'hikes', 'kayaking', 'ping pong', 'table tennis', 'ping-pong', 'pingpong', 'jog', 'jogging', 'running', 'jogs', 'runs', 'sail', 'sailing', 'boat cruise', 'sailboat', 'skiing', 'ski', 'skis', 'snowboarding', 'snowshoeing', 'snow shoe', 'snow boarding', 'soccer', 'swim', 'swimming', 'swims', 'tennis', 'going for a walk', 'walking', 'sport'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Gym': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'gym', 'workout', 'workouts'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Food': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'bbq', 'barbecue', 'barbeque', 'breakfast', 'breakfasts', 'brunch', 'brunches', 'coffee', 'coffees', 'dinner', 'dinners', 'restaurant', 'restaurants', 'family meal', 'cocktail', 'drinks', 'cocktails', 'lunch', 'lunches', 'luncheon', 'cookout'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Appointments': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'mechaninc', 'oil change', 'car service', 'service', 'dentist', 'dentistry', 'dental', 'graduation', 'haircut', 'hair', 'wedding', 'repair', 'handyman', 'electrician', 'plumber', 'DIY'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Work': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'deadline', 'meeting', 'office', 'work'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Social': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'call', 'talk', 'meet', 'catch up', 'together'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Doctors': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'doctor', 'dr.', 'vision', 'therapy', 'heal', 'med'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'School': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'class', 'test', 'quiz', 'homework', 'project', 'exam'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Travel': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'roadtrip', 'drive', 'commute', 'flight', 'fly', 'airplane', 'airport', 'hotel', 'motel', 'resort', 'stay', 'vacation', 'plane', 'boat', 'sail', 'stay'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'Chores': [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'cleaning', 'clean', 'tidy', 'vacuum'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t]\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Function to authenticate the user and choose the Google Account\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tUtils.signIn = function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgapi.auth2.getAuthInstance().signIn();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tevent.getView().byId('signButton').setText('Sign Out of Google');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t//event.getView().byId('configLabel').setText('Connected to Google!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// get the list of calendars and pass in the combobox so it can filled\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// first turn on the busy indicator\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tthis.getCalendars(event.setCalendarDropDownEvents.bind(event));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Function to signout of Google\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tUtils.signOut = function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgapi.auth2.getAuthInstance().signOut();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tevent.getView().byId('calendarComboBox').setEnabled(false);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tevent.getView().byId('signButton').setText('Sign Into Google');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t//event.getView().byId('configLabel').setText('Connected to Google!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Function to connect to Google Calendars\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// This gets called on startup\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tUtils.connectToGoogle = function (callback) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgapi.load('client:auth2', this.initiateClient(callback));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Initiate the client.\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// This gives the client access to Google Calendar\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// The scope is only set to read \\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tUtils.initiateClient = function (controller) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar me = this;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgapi.client.init({\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tclientId: CLIENT_ID,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tdiscoveryDocs: DISCOVERY_DOCS,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tscope: SCOPES\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).then(function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// Listen for sign-in state changes.\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgapi.auth2.getAuthInstance().isSignedIn.listen(me.setItemsAfterLogin(controller));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}, function (error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log(JSON.stringify(error, null, 2));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tUtils.setItemsAfterLogin = function (controller) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t//controller.getView().byId('configLabel').setText('Connected to Google!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcontroller.getView().byId('signButton').setEnabled(true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcontroller.getView().byId('signButton').setBusy(false);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// Get the list of Calendars\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tUtils.getCalendars = function (callback) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// initialize the list of parsed calendar data\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar parsedList = [];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar listOfCalendars = gapi.client.calendar.calendarList.list().then(function (response) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log(response);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// now get the list of calendars from the response\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar list = response.result.items;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// now parse it in the format that we want...\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfor (var i = 0; i < list.length; i++) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar curCalObj = list[i];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar curCalParsed = {};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// summary in the map is the Calendar name\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcurCalParsed.name = curCalObj.hasOwnProperty('summary') ? curCalObj.summary : 'Undefined';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// get the id\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcurCalParsed.id = curCalObj.hasOwnProperty('id') ? curCalObj.id : '';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// add it to the list of possible calendars\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedList.push(curCalParsed);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// add the list of parsed calendars to the dropdown for user to select\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar listModel = new sap.ui.model.json.JSONModel();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcallback(parsedList);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log(listOfCalendars);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t// eslint-disable-next-line no-unused-expressions\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tUtils.getListOfEventsFromCalendarInDateRange = function (calendar, startDate, endDate, callback) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// the calendar key is what Gooogle Calendar API needs\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar calendarKey = calendar.getKey();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar startDateString = startDate.toISOString();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar endDateString = endDate.toISOString();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar me = this;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// get the list of events in the calendar\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgapi.client.calendar.events.list({\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'calendarId': calendarKey,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'timeMin': startDateString,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'timeMax': endDateString,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'showDeleted': false,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'singleEvents': true,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'orderBy': 'startTime'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).then(callback);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.parseISOStringToDate = function (string) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar b = string.split(/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\D+/);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// handle the parsing for dates\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (b.length === 3) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn new Date(Date.UTC(b[0], --b[1], b[2]));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// handle the parsing for datetimes\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn new Date(Date.UTC(b[0], --b[1], b[2], b[3], b[4], b[5], b[6]));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.getCategoryForEvent = function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// loop through each of the event keys in the categories\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar keys = Object.getOwnPropertyNames(eventCategories);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfor (var k = 0; k < keys.length; k++) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar key = keys[k];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// now check all keywords in the event name to see if there is a match\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (eventCategories[key].some(function (keyword, index) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tevent.keyword = (event.name.toLowerCase()).includes(keyword.toLowerCase()) ? keyword.toLowerCase() : '';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn (event.name.toLowerCase()).includes(keyword.toLowerCase());\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t)) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('Found ' + event.name + ' paired with ' + key + ' because of keyword: ' + event.keyword);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn key;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Couldn't find a match for \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" + event.name + ' so they are in Other');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// return 'Other' as the category if it hits this point\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn 'Other';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.collectHoursInCategories = function (events) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar squashedEvents = {};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfor (var e = 0; e < events.length; e++) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar event = events[e];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (isNaN(event.time)) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcontinue;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (squashedEvents.hasOwnProperty(event.category)) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tsquashedEvents[event.category] = (squashedEvents[event.category] + event.time);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t} else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tsquashedEvents[event.category] = event.time;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// now loop through the map and build a data map in the appropiate format\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar listOfCategories = [];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar categories = Object.getOwnPropertyNames(squashedEvents);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfor (var c = 0; c < categories.length; c++) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar category = categories[c];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar curRow = [];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcurRow.push(category);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcurRow.push(squashedEvents[category]);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tlistOfCategories.push(curRow);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn listOfCategories;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.parseListOfEvents = function (events, callback) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar parsedEvents = [];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfor (var i = 0; i < events.length; i++) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar parsedEvent = {};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// get the events start date & time.  Use date if date time is not there\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar event = events[i];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar startTime = (event.start.dateTime) ? event.start.dateTime : event.start.date;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar endTime = (event.end.dateTime) ? event.end.dateTime : event.end.date;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar description = (event.description) ? event.description : (event.hasOwnProperty(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bodyPreview\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\") ? event.bodyPreview : '');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvent.name = (event.hasOwnProperty(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")) ? event.summary : event.subject;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvent.description = description;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvent.startTimeString = startTime;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvent.endTimeString = endTime;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvent.startTime = this.parseISOStringToDate(startTime);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvent.endTime = this.parseISOStringToDate(endTime);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// figure out what category this event falls into\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvent.category = this.getCategoryForEvent(parsedEvent);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// now get the time difference in hours between the start time and the end time\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvent.time = Math.ceil(Math.abs(parsedEvent.endTime - parsedEvent.startTime) / (1000 * 60 * 60));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// if time is NaN that is problem\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (isNaN(parsedEvent.time)) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log(isNan(event));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// add the parsed event to the list\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tparsedEvents.push(parsedEvent);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// add all the hours in a category\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar catData = this.collectHoursInCategories(parsedEvents);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcallback(catData, parsedEvents);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\treturn Utils;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n}, true /* bExport */);\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/services/GoogleChartService.js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"// Author: Andrew Hajj\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n// Purpose: functions to get calendar info from google\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\nsap.ui.define('com/metcs633/services/GoogleChartService', [\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n], function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t'use strict';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tvar Utils = {};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tUtils.drawChart = function (catData, controller, callback) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// Create the data table.\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar data = new google.visualization.DataTable();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tdata.addColumn('string', 'Event');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tdata.addColumn('number', 'Hours');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tdata.addRows(catData);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// Set chart options\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar width = 800;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar height = 800;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (sap.ui.Device.system.phone) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\twidth = 200;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\theight = 200;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar options = {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'title': 'Hours per Category',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'width': width,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'height': height\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar HBoxDomRef = controller.getView().byId('barChartPanel').getDomRef();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// Instantiate and draw our chart, passing in our HBox.\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar chart = {};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (controller.isColumnChart) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tchart = new google.visualization.ColumnChart(HBoxDomRef);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t} else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tchart = new google.visualization.PieChart(HBoxDomRef);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgoogle.visualization.events.addListener(chart, 'ready', function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgoogle.visualization.events.addListener(chart, 'select', function () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// grab a few details before redirecting\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar events = controller.parsedEvents;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar pickedEvents = events.filter(e =>\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\te.category === data.getValue(chart.getSelection()[0].row, 0)\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// now we get the filtered events and show it in the table\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar listModel = new sap.ui.model.json.JSONModel();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tlistModel.setData(pickedEvents);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcontroller.getView().byId('eventsTable').setModel(listModel);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcontroller._wizard.goToStep(controller.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"showTable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tchart.draw(data, options);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcallback();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcontroller._wizard.goToStep(controller.getView().byId(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"showChart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\treturn Utils;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n}, true /* bExport */);\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/services/O365CalendarService.js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/* eslint-disable no-undef */\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n// Author: Andrew Hajj\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n// Purpose: functions to get calendar info from google\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\nsap.ui.define([],\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tfunction () {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t'use strict';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar Utils = {};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar oMsalClient = null;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar toastOptions = {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tduration: 2000,                  // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\twidth: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"15em\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tmy: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",             // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tat: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",             // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tof: window,                      // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\toffset: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0 0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcollision: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"fit fit\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",            // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tonClose: null,                   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tautoClose: true,                 // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tanimationTimingFunction: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ease\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tanimationDuration: 2000,         // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcloseOnBrowserNavigation: true   // default\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar APP_ID = 'f43b3bbb-f2aa-4134-9518-e0a190584c6f';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar APP_SCOPES = ['Calendars.Read'];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar config = {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tmsalConfig: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tauth: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tclientId: APP_ID,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t//redirectUri: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http://localhost:8000/webapp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", //defaults to application start page\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpostLogoutRedirectUri: 'http://localhost:8000/webapp'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcache: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcacheLocation: 'localStorage',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tstoreAuthStateInCookie: true\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgraphBaseEndpoint: 'https://graph.microsoft.com/v1.0/',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tscopeConfig: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tscopes: APP_SCOPES\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// #region Helpers\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfunction handleAuthError(error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log(error);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfunction getMSGraphClient() {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (!oMsalClient) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (Msal) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn new Msal.UserAgentApplication(config.msalConfig);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn oMsalClient;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfunction getStartDate(startDate, endDate) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar start = new Date();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar end = new Date();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (startDate && endDate) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tstart = new Date(new Date(startDate).setHours(0, 0, 0));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tend = new Date(new Date(endDate).setHours(0, 0, 0));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t} else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tend = new Date(new Date().setHours(0, 0, 0));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tstart = new Date(new Date(2015, 3, 2).setHours(0, 0, 0));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn { start, end };\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfunction getTimeDifference(start, end) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn (Date.parse(end) - Date.parse(start));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tfunction set365StatusText(event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (!signedInO365) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t//event.getView().byId('signButtonO365').setText('Sign In to O365');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t//event.getView().byId('configLabelO365').setText('Signed Out of O365!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tsap.m.MessageToast.show('Signed Out of O365!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t} else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t//event.getView().byId('signButtonO365').setText('Sign Out of O365');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t//event.getView().byId('configLabelO365').setText('Connected to O365!');\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tsap.m.MessageToast.show('Connected to O365!', toastOptions);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// #endregion\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.initiateClient = function (event, signout) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar oMsalClient = getMSGraphClient();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar me = this;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (signout) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\toMsalClient.logout();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tset365StatusText(event);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn true;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// check if the user is already signed in\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (!oMsalClient.getAccount()) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\toMsalClient.loginPopup(config.scopeConfig).then(function (res) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tset365StatusText(event);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tme.getCalendars(event.setCalendarDropDownEvents.bind(event));\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn res;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).catch(function (error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\thandleAuthError(error);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tset365StatusText(event);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn true;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.signIn = function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tthis.initiateClient(event);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.signOut = function (event) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tthis.initiateClient(event, true);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// #region Calendars\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.getCalendars = function (callback) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// eslint-disable-next-line no-undef\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t$.ajax({\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\theaders: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\turl: `${config.graphBaseEndpoint}me/calendars`,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttype: 'GET'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).then(function (res) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('getCalendars', res);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcallback(res.value);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn res;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).fail(function (error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\thandleAuthError(error);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.getCalendarById = function (id) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// eslint-disable-next-line no-undef\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t$.ajax({\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\theaders: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\turl: `${config.graphBaseEndpoint}me/calendars/${id}`,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttype: 'GET'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).then(function (res) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('getCalendars', res);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn res;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).fail(function (error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\thandleAuthError(error);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// #endregion\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// #region Categories\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.getCategories = function (startDate, endDate, calendarId = '') {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar start = new Date();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar end = new Date();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// start and end date format 2020-01-31\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar dates = getStartDate(startDate, endDate);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tstart = dates.start;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tend = dates.end;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('start date:', start);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('end date:', end);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar apiUrl = '';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (calendarId && calendarId.length > 0) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t} else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t$.ajax({\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\theaders: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\turl: `${config.graphBaseEndpoint}${apiUrl}`,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttype: 'GET'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).then((categories) => {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('getCategories', categories);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar retCategories = [];\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (categories && categories.value) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcategories.value.forEach(element => {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tretCategories = retCategories.concat(element.categories);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcategories = JSON.stringify([...new Set(retCategories)]);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('getCategories result:', categories);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn categories;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).fail(function (error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\thandleAuthError(error);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.getCategoriesTime = function (startDate, endDate, calendarId = '') {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar start = new Date();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar end = new Date();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// start and end date format 2020-01-31\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar dates = getStartDate(startDate, endDate);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tstart = dates.start;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tend = dates.end;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('start date:', start);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('end date:', end);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar apiUrl = '';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (calendarId && calendarId.length > 0) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t} else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t$.ajax({\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\theaders: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\turl: `${config.graphBaseEndpoint}${apiUrl}`,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttype: 'GET'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).then((res) => {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('getCategoriesTime', res);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar catTimeTotals = {};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (res && res.value) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tres.value.forEach(element => {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar catTimeTotalsCats = element.categories;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// eslint-disable-next-line max-nested-callbacks\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcatTimeTotalsCats.forEach(cat => {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (catTimeTotals[cat]) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar milliSeconds = parseFloat(catTimeTotals[cat], 10);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tmilliSeconds += getTimeDifference(element.start.dateTime, element.end.dateTime);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcatTimeTotals[cat] = milliSeconds;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t} else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcatTimeTotals[cat] = getTimeDifference(element.start.dateTime, element.end.dateTime);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tres = JSON.stringify(catTimeTotals);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('getCategoriesTime:', res);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn res;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).fail(function (error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\thandleAuthError(error);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// #endregion\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// #region Events\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tUtils.getEvents = function (startDate, endDate, calendarId = '', callback, filterToCategory = '') {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar start = new Date();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar end = new Date();\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// start and end date format 2020-01-31\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar dates = getStartDate(startDate, endDate);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tstart = dates.start;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tend = dates.end;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('start date:', start);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('end date:', end);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvar apiUrl = '';\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (calendarId && calendarId.length > 0) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t} else {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// first get a count of events\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// then select all of those events\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t$.ajax({\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\theaders: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\turl: `${config.graphBaseEndpoint}${apiUrl}&$count=true`,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttype: 'GET'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).then(function (res) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t$.ajax({\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\theaders: {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t},\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\turl: `${config.graphBaseEndpoint}${apiUrl}&$top=${res[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"@odata.count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]}`,\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttype: 'GET'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).then(function (res) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tif (filterToCategory && filterToCategory.length > 0) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tres.value = filterToCategory(res, filterToCategory);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tconsole.log('getEvents', res);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcallback(res);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn res;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).fail(function (error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\thandleAuthError(error);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}).fail(function (error) {\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\thandleAuthError(error);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t});\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t};\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t// #endregion\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\treturn Utils;\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t}, true /* bExport */);\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/view/App.view.xml\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"<mvc:View\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tdisplayBlock=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\txmlns=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sap.m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\txmlns:mvc=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sap.ui.core.mvc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Shell><App id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/></Shell></mvc:View>\\\\\\\\\\\\\\\",\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\\\\\\\\"timebox/view/Home.view.xml\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"<mvc:View\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tcontrollerName=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"com.metcs633.controller.Home\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\tdisplayBlock=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\txmlns=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sap.m\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\txmlns:mvc=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sap.ui.core.mvc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\txmlns:l=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sap.ui.layout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\txmlns:core=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sap.ui.core\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Page\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><headerContent><Image src=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Images/logo_transparent.png\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" activeSrc=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/webapp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"></Image></headerContent><content><Wizard id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"CreateProductWizard\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" class=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiResponsivePadding--header sapUiResponsivePadding--content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><WizardStep id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"googleOrOutlookStep\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttitle=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Choose Source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcomplete=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"chooseStepCompleted\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvalidated=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Text class=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiSmallMarginBottom\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Welcome to the Timebox Tool! The first step is to choose Google or o365.  Click one below to continue.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/><HBox\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\talignItems=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tjustifyContent=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\twidth=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><SegmentedButton\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\twidth=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"320px\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tselectionChange=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"setCalendarTypeFromButton\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><items><SegmentedButtonItem icon=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sap-icon://appointment\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Google\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/><SegmentedButtonItem icon=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sap-icon://appointment-2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"o365\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/></items></SegmentedButton></HBox></WizardStep><WizardStep id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"signInAndChooseCalendarStep\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvalidated=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttitle=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Sign and Choose Calendar\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcomplete=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tactivate=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"signInAndChoosseValidation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><VBox><Text class=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiSmallMarginBottom\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Next, login, choose a calendar and select a date range\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/><Button \\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"signButton\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Sign in\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tenabled=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tbusyIndicatorDelay=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tbusy=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpress=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"onSignIn\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tclass=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiSmallMarginEnd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"></Button></VBox><Panel\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"calendarSelectionPanel\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvisible=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><VBox class = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiSmallMarginTopBottom\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Label text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Choose a Calendar: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" labelFor=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"calendarComboBox\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/><ComboBox\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tplaceholder=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Choose a Calendar\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"calendarComboBox\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tbusyIndicatorDelay=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\titems=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpath: '/'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tclass=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiTinyMarginEnd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\trequired=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tselectionChange=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"calendarSelectionChange\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><core:Item key=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{id}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{name}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /></ComboBox><HBox><VBox class = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiSmallMarginEnd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Label text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Choose a start date: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" labelFor=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"DTP1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/><DatePicker\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"DTP1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tplaceholder=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Enter Date ...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tchange=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"handleStartDateChange\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\trequired=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tclass=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiSmallMarginBottom\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/></VBox><VBox><Label text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Choose an end date: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" labelFor=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"DTP2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/><DatePicker\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"DTP2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tplaceholder=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Enter Date ...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\trequired=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tchange=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"handleEndDateChange\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tclass=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"sapUiSmallMarginBottom\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/></VBox></HBox><Button\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Get Events\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvisible=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpress=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"></Button></VBox></Panel></WizardStep><WizardStep id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"showChart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tactivate=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pricingActivate\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tcomplete=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"pricingComplete\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvalidated=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttitle=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Chart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Panel><Button\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"changeChartType\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Change Chart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpress=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"changeChart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvisible=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"></Button><FlexBox\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\talignItems=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tjustifyContent=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><items><Panel\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"barChartPanel\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"></Panel></items></FlexBox></Panel></WizardStep><WizardStep id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"showTable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvalidated=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tshowNextButton=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttitle=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Events\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Table\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tid=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"eventsTable\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tinset=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tvisible=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\titems=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpath: '/',\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tsorter: [{\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpath: 'category'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}, \\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t{\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpath: 'name'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}, \\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t{\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tpath: 'keyword'\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}]\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><columns><Column\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\twidth=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"12em\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Event\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /></Column><Column\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tdemandPopin=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Category\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /></Column><Column\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tdemandPopin=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Keyword\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /></Column><Column\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tdemandPopin=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /></Column><Column\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\tdemandPopin=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Hours\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /></Column></columns><items><ColumnListItem><cells><Text\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{name}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"/><Text\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{category}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /><Text\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{keyword}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /><Text\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{startTimeString}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /><Text\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\\ttext=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{time}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" /></cells></ColumnListItem></items></Table></WizardStep></Wizard></content></Page></mvc:View>\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t}\\\\\\\\r\\\\\\\\n});\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/Component.js\\\\\\\": \\\\\\\"sap.ui.define([\\\\\\\\r\\\\\\\\n\\\\\\\\t'sap/ui/core/UIComponent',\\\\\\\\r\\\\\\\\n\\\\\\\\t'sap/ui/Device',\\\\\\\\r\\\\\\\\n\\\\\\\\t'./model/models'\\\\\\\\r\\\\\\\\n], function (UIComponent, Device, models) {\\\\\\\\r\\\\\\\\n\\\\\\\\t'use strict';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\treturn UIComponent.extend('com.metcs633.Component', {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tmetadata: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tmanifest: 'json'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t/**\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t * @public\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t * @override\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t */\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tinit: function () {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// call the base component's init function\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tUIComponent.prototype.init.apply(this, arguments);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// set the device model\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tthis.setModel(models.createDeviceModel(), 'device');\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// create the views based on the url/hash\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tthis.getRouter().initialize();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t});\\\\\\\\r\\\\\\\\n});\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/controller/App.controller.js\\\\\\\": \\\\\\\"sap.ui.define([\\\\\\\\r\\\\\\\\n\\\\\\\\t'sap/ui/core/mvc/Controller',\\\\\\\\r\\\\\\\\n\\\\\\\\t'com/metcs633/model/formatter'\\\\\\\\r\\\\\\\\n], function (Controller, formatter) {\\\\\\\\r\\\\\\\\n\\\\\\\\t'use strict';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\treturn Controller.extend('com.metcs633.controller.App', {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tformatter: formatter,\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tonInit: function () {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t});\\\\\\\\r\\\\\\\\n});\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/controller/Home.controller.js\\\\\\\": \\\\\\\"//Authors: Andrew Hajj\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\nsap.ui.define([\\\\\\\\r\\\\\\\\n  'sap/ui/core/mvc/Controller',\\\\\\\\r\\\\\\\\n  '../model/formatter',\\\\\\\\r\\\\\\\\n  '../services/GoogleCalendarService',\\\\\\\\r\\\\\\\\n  '../services/GoogleChartService',\\\\\\\\r\\\\\\\\n  '../services/O365CalendarService'\\\\\\\\r\\\\\\\\n], function (Controller, formatter, GoogleCalendarService, GoogleChartService, O365CalendarService) {\\\\\\\\r\\\\\\\\n  'use strict';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n  var signedInGoogle = false;\\\\\\\\r\\\\\\\\n  var signedInO365 = false;\\\\\\\\r\\\\\\\\n  var isGoogle = true;\\\\\\\\r\\\\\\\\n  var toastOptions = {\\\\\\\\r\\\\\\\\n    duration: 2000,                  // default\\\\\\\\r\\\\\\\\n    width: \\\\\\\\\\\\\\\"15em\\\\\\\\\\\\\\\",                   // default\\\\\\\\r\\\\\\\\n    my: \\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\",             // default\\\\\\\\r\\\\\\\\n    at: \\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\",             // default\\\\\\\\r\\\\\\\\n    of: window,                      // default\\\\\\\\r\\\\\\\\n    offset: \\\\\\\\\\\\\\\"0 0\\\\\\\\\\\\\\\",                   // default\\\\\\\\r\\\\\\\\n    collision: \\\\\\\\\\\\\\\"fit fit\\\\\\\\\\\\\\\",            // default\\\\\\\\r\\\\\\\\n    onClose: null,                   // default\\\\\\\\r\\\\\\\\n    autoClose: true,                 // default\\\\\\\\r\\\\\\\\n    animationTimingFunction: \\\\\\\\\\\\\\\"ease\\\\\\\\\\\\\\\", // default\\\\\\\\r\\\\\\\\n    animationDuration: 2000,         // default\\\\\\\\r\\\\\\\\n    closeOnBrowserNavigation: true   // default\\\\\\\\r\\\\\\\\n  };\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n  return Controller.extend('com.metcs633.controller.App', {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    formatter: formatter,\\\\\\\\r\\\\\\\\n    GoogleCalendarService: GoogleCalendarService,\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    setCalendarTypeFromButton: function (event) {\\\\\\\\r\\\\\\\\n      isGoogle = (event.getParameters().item.getText() === \\\\\\\\\\\\\\\"Google\\\\\\\\\\\\\\\") ? true : false;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      // if it goes in here that means we need to reset all the things\\\\\\\\r\\\\\\\\n      if (this._wizard.getProgress() > 1) {\\\\\\\\r\\\\\\\\n        var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\r\\\\\\\\n        var dtpStart = this.getView().byId('DTP1');\\\\\\\\r\\\\\\\\n        var dtpEnd = this.getView().byId('DTP2');\\\\\\\\r\\\\\\\\n        calendarDropDown.setSelectedItem(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\r\\\\\\\\n        dtpStart.setValue(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\r\\\\\\\\n        dtpEnd.setValue(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\r\\\\\\\\n        this.getView().byId('calendarSelectionPanel').setVisible(false);\\\\\\\\r\\\\\\\\n        this._wizard.discardProgress(this._wizard.getSteps()[0]);\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    set365StatusText: function () {\\\\\\\\r\\\\\\\\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\\\\\r\\\\\\\\n      if (!signedInO365) {\\\\\\\\r\\\\\\\\n        //this.getView().byId('signButton').setText('Sign In to O365');\\\\\\\\r\\\\\\\\n        //this.getView().byId('configLabelO365').setText('Signed Out of O365!');\\\\\\\\r\\\\\\\\n        sap.m.MessageToast.show('Signed Out of O365!', toastOptions);\\\\\\\\r\\\\\\\\n      } else {\\\\\\\\r\\\\\\\\n        //this.getView().byId('signButton').setText('Sign Out of O365');\\\\\\\\r\\\\\\\\n        //this.getView().byId('configLabelO365').setText('Connected to O365!');\\\\\\\\r\\\\\\\\n        sap.m.MessageToast.show('Connected to O365!', toastOptions);\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    // Connect to Google api by default to grab the calendar\\\\\\\\r\\\\\\\\n    onInit: function () {\\\\\\\\r\\\\\\\\n      var configLabel = this.getView().byId('configLabel');\\\\\\\\r\\\\\\\\n      sap.m.MessageToast.show('Connecting to Google...', toastOptions);\\\\\\\\r\\\\\\\\n      //configLabel.setText('Connecting to Google...');\\\\\\\\r\\\\\\\\n      GoogleCalendarService.connectToGoogle(this);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      //Connect to O365\\\\\\\\r\\\\\\\\n      var configLabelO365 = this.getView().byId('configLabelO365');\\\\\\\\r\\\\\\\\n      this.set365StatusText();\\\\\\\\r\\\\\\\\n      this._wizard = this.getView().byId(\\\\\\\\\\\\\\\"CreateProductWizard\\\\\\\\\\\\\\\");\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    afterLogin: function () {\\\\\\\\r\\\\\\\\n      this.getView().byId('signButton').setEnabled(true);\\\\\\\\r\\\\\\\\n      //this.getView().byId('configLabel').setText('Connected to Google!');\\\\\\\\r\\\\\\\\n      sap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    onSignIn: function (event) {\\\\\\\\r\\\\\\\\n      if (isGoogle) {\\\\\\\\r\\\\\\\\n        this.onSignInOutGooglePress();\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n      else {\\\\\\\\r\\\\\\\\n        this.onSignInOutO365Press();\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    onSignInOutGooglePress: function (event) {\\\\\\\\r\\\\\\\\n      if (signedInGoogle) {\\\\\\\\r\\\\\\\\n        GoogleCalendarService.signOut(this);\\\\\\\\r\\\\\\\\n      } else {   // first turn on the busy indicator\\\\\\\\r\\\\\\\\n        this.getView().byId('calendarComboBox').setBusy(true);\\\\\\\\r\\\\\\\\n        GoogleCalendarService.signIn(this);\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n      signedInGoogle = !signedInGoogle;\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    onSignInOutO365Press: function (event) {\\\\\\\\r\\\\\\\\n      if (signedInO365) {\\\\\\\\r\\\\\\\\n        O365CalendarService.signOut(this);\\\\\\\\r\\\\\\\\n        this.getView().byId('signButton').setText('Sign In to O365');\\\\\\\\r\\\\\\\\n        this.set365StatusText();\\\\\\\\r\\\\\\\\n      } else {\\\\\\\\r\\\\\\\\n        O365CalendarService.signIn(this);\\\\\\\\r\\\\\\\\n        this.set365StatusText();\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n    chooseStepCompleted: function (event) {\\\\\\\\r\\\\\\\\n      // We don't keep the cookies for Google, but we do for outlook\\\\\\\\r\\\\\\\\n      // if this if coming from step 1 then check if the user is signed in\\\\\\\\r\\\\\\\\n      // if so, go right to getting the calendars\\\\\\\\r\\\\\\\\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\\\\\r\\\\\\\\n      if (!isGoogle && signedInO365) {\\\\\\\\r\\\\\\\\n        this.set365StatusText();\\\\\\\\r\\\\\\\\n        this.getView().byId('signButton').setText('Sign Out of O365');\\\\\\\\r\\\\\\\\n        O365CalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n      else if (!isGoogle) {\\\\\\\\r\\\\\\\\n        this.getView().byId('signButton').setText('Sign In to O365');\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n      else if (!signedInGoogle) {\\\\\\\\r\\\\\\\\n        // clear the calendar selection\\\\\\\\r\\\\\\\\n        // set the button to login\\\\\\\\r\\\\\\\\n        this.getView().byId('signButton').setText('Sign In to Google');\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n      else {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n        this.getView().byId('signButton').setText('Sign Out of Google');\\\\\\\\r\\\\\\\\n        GoogleCalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\\\\\\\\r\\\\\\\\n        this.getView().byId('calendarSelectionPanel').setVisible(true);\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    setCalendarDropDownEvents: function (events) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\r\\\\\\\\n      var statusLabel = this.getView().byId('configLabel');\\\\\\\\r\\\\\\\\n      // add the list of parsed calendars to the dropdown for user to select\\\\\\\\r\\\\\\\\n      var listModel = new sap.ui.model.json.JSONModel();\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      listModel.setData(events);\\\\\\\\r\\\\\\\\n      calendarDropDown.setModel(listModel);\\\\\\\\r\\\\\\\\n      this.getView().byId('calendarSelectionPanel').setVisible(true);\\\\\\\\r\\\\\\\\n      calendarDropDown.setBusy(false);\\\\\\\\r\\\\\\\\n      // statusLabel.setText('Loaded calendars!');\\\\\\\\r\\\\\\\\n      sap.m.MessageToast.show('Loaded calendars!', toastOptions);\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n    onGetCalendarsPress: function (event) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    signInAndChoosseValidation: function (event) {\\\\\\\\r\\\\\\\\n      // only enable the Go button if\\\\\\\\r\\\\\\\\n      // A calendar is selected, a start date and an end date are selected\\\\\\\\r\\\\\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\r\\\\\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\\\\\r\\\\\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\\\\\\\\r\\\\\\\\n        return true;\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n      return false;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    validateCalendarStartEndDate: function (event) {\\\\\\\\r\\\\\\\\n      // only enable the Go button if\\\\\\\\r\\\\\\\\n      // A calendar is selected, a start date and an end date are selected\\\\\\\\r\\\\\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\r\\\\\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\\\\\r\\\\\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\\\\\\\\r\\\\\\\\n        this._wizard.validateStep(this.byId(\\\\\\\\\\\\\\\"signInAndChooseCalendarStep\\\\\\\\\\\\\\\"));\\\\\\\\r\\\\\\\\n        //this.getView().byId('goButton').setEnabled(true);\\\\\\\\r\\\\\\\\n      } else {\\\\\\\\r\\\\\\\\n        this._wizard.invalidateStep(this.byId(\\\\\\\\\\\\\\\"signInAndChooseCalendarStep\\\\\\\\\\\\\\\"));\\\\\\\\r\\\\\\\\n        this._wizard.goToStep(this.byId(\\\\\\\\\\\\\\\"signInAndChooseCalendarStep\\\\\\\\\\\\\\\"));\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    goButton: function (event) {\\\\\\\\r\\\\\\\\n      // freeze the view so the user knows something is happening\\\\\\\\r\\\\\\\\n      // sap.ui.core.\\\\\\\\r\\\\\\\\n      this.getView().byId(\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\").setBusy(true);\\\\\\\\r\\\\\\\\n      // figure out the min and max time in order to query google calendar\\\\\\\\r\\\\\\\\n      // this button doesn't get enabled until there is data in all 3 prompts (calendar, start & end date)\\\\\\\\r\\\\\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\\\\\r\\\\\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\\\\\r\\\\\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      // First, we need the selected calendar\\\\\\\\r\\\\\\\\n      var selectedCalendar = calendarDropDown.getSelectedItem();\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      // then we need the start date time\\\\\\\\r\\\\\\\\n      var startTime = dtpStart.getDateValue();\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      // then we need the end date date\\\\\\\\r\\\\\\\\n      var endTime = dtpEnd.getDateValue();\\\\\\\\r\\\\\\\\n      var me = this;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      if (isGoogle) {\\\\\\\\r\\\\\\\\n        GoogleCalendarService.getListOfEventsFromCalendarInDateRange(selectedCalendar, startTime, endTime, function (response) {\\\\\\\\r\\\\\\\\n          var events = response.result.items;\\\\\\\\r\\\\\\\\n          //console.log(events);\\\\\\\\r\\\\\\\\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\\\\\\\\r\\\\\\\\n          me.getView().byId(\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\").setBusy(false);\\\\\\\\r\\\\\\\\n        });\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n      else {\\\\\\\\r\\\\\\\\n        O365CalendarService.getEvents(startTime, endTime, selectedCalendar, function (response) {\\\\\\\\r\\\\\\\\n          var events = response.value;\\\\\\\\r\\\\\\\\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\\\\\\\\r\\\\\\\\n          me.getView().byId(\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\").setBusy(false);\\\\\\\\r\\\\\\\\n          // GoogleCalendarService.parseListOfEvents(events, me);\\\\\\\\r\\\\\\\\n        });\\\\\\\\r\\\\\\\\n      }\\\\\\\\r\\\\\\\\n      // if (!this.getView().byId(\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\").getVisible())\\\\\\\\r\\\\\\\\n      // {\\\\\\\\r\\\\\\\\n      this.getView().byId('changeChartType').setVisible(true);\\\\\\\\r\\\\\\\\n      this.getView().byId(\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\").setVisible(true);\\\\\\\\r\\\\\\\\n      this.byId(\\\\\\\\\\\\\\\"showChart\\\\\\\\\\\\\\\").fireComplete();\\\\\\\\r\\\\\\\\n      // }\\\\\\\\r\\\\\\\\n      this._wizard.goToStep(this.getView().byId(\\\\\\\\\\\\\\\"showChart\\\\\\\\\\\\\\\"));\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    setChartAfterParsingEvents: function (categorizedData, parsedEvents) {\\\\\\\\r\\\\\\\\n      // set the data back into the conteroller so it's retrievable after\\\\\\\\r\\\\\\\\n      this.chartData = categorizedData;\\\\\\\\r\\\\\\\\n      this.parsedEvents = parsedEvents;\\\\\\\\r\\\\\\\\n      this.isColumnChart = (this.hasOwnProperty('isColumnChart')) ? !(this.isColumnChart) : true;\\\\\\\\r\\\\\\\\n      var me = this;\\\\\\\\r\\\\\\\\n      GoogleChartService.drawChart(categorizedData, me, function () {\\\\\\\\r\\\\\\\\n        // fill in the table\\\\\\\\r\\\\\\\\n        var listModel = new sap.ui.model.json.JSONModel();\\\\\\\\r\\\\\\\\n        listModel.setData(parsedEvents);\\\\\\\\r\\\\\\\\n        me.getView().byId('eventsTable').setModel(listModel);\\\\\\\\r\\\\\\\\n        me.getView().byId('eventsTable').setVisible(true);\\\\\\\\r\\\\\\\\n        // me.getView().byId('configLabel').setText('Analyzed time!  Scroll down to see a visual representation');\\\\\\\\r\\\\\\\\n        me.isColumnChart = !(me.isColumnChart);\\\\\\\\r\\\\\\\\n      });\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    changeChart: function (event) {\\\\\\\\r\\\\\\\\n      var me = this;\\\\\\\\r\\\\\\\\n      GoogleChartService.drawChart(this.chartData, this, function () {\\\\\\\\r\\\\\\\\n        me.isColumnChart = !(me.isColumnChart);\\\\\\\\r\\\\\\\\n      });\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    calendarSelectionChange: function (event) {\\\\\\\\r\\\\\\\\n      this.validateCalendarStartEndDate();\\\\\\\\r\\\\\\\\n      // acknowledge the selection change and update the status accordingly\\\\\\\\r\\\\\\\\n      //this.getView().byId('configLabel').setText(\\\\\\\\\\\\\\\"Calendar '\\\\\\\\\\\\\\\" + event.getParameters('selectedItem').selectedItem.getText() + \\\\\\\\\\\\\\\"' loaded.\\\\\\\\\\\\\\\");\\\\\\\\r\\\\\\\\n      sap.m.MessageToast.show(\\\\\\\\\\\\\\\"Calendar '\\\\\\\\\\\\\\\" + event.getParameters('selectedItem').selectedItem.getText() + \\\\\\\\\\\\\\\"' loaded.\\\\\\\\\\\\\\\", toastOptions);\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    handleStartDateChange: function (event) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      this.validateCalendarStartEndDate();\\\\\\\\r\\\\\\\\n    },\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n    handleEndDateChange: function (event) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n      this.validateCalendarStartEndDate();\\\\\\\\r\\\\\\\\n    }\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n  });\\\\\\\\r\\\\\\\\n});\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/model/formatter.js\\\\\\\": \\\\\\\"sap.ui.define([], function () {\\\\\\\\r\\\\\\\\n\\\\\\\\t'use strict';\\\\\\\\r\\\\\\\\n\\\\\\\\treturn {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n});\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/model/models.js\\\\\\\": \\\\\\\"sap.ui.define([\\\\\\\\r\\\\\\\\n\\\\\\\\t'sap/ui/model/json/JSONModel',\\\\\\\\r\\\\\\\\n\\\\\\\\t'sap/ui/Device'\\\\\\\\r\\\\\\\\n], function (JSONModel, Device) {\\\\\\\\r\\\\\\\\n\\\\\\\\t'use strict';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\treturn {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tcreateDeviceModel: function () {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar oModel = new JSONModel(Device);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\toModel.setDefaultBindingMode('OneWay');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn oModel;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n});\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/services/GoogleCalendarService.js\\\\\\\": \\\\\\\"// Author: Andrew Hajj\\\\\\\\r\\\\\\\\n// Purpose: functions to get calendar info from google\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\nsap.ui.define('com/metcs633/services/GoogleCalendarService', [\\\\\\\\r\\\\\\\\n\\\\\\\\t'../services/GoogleChartService'\\\\\\\\r\\\\\\\\n], function (GoogleChartService) {\\\\\\\\r\\\\\\\\n\\\\\\\\t'use strict';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\tvar Utils = {};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\tvar toastOptions = {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tduration: 2000,                  // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\twidth: \\\\\\\\\\\\\\\"15em\\\\\\\\\\\\\\\",                   // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tmy: \\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\",             // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tat: \\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\",             // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tof: window,                      // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\toffset: \\\\\\\\\\\\\\\"0 0\\\\\\\\\\\\\\\",                   // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tcollision: \\\\\\\\\\\\\\\"fit fit\\\\\\\\\\\\\\\",            // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tonClose: null,                   // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tautoClose: true,                 // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tanimationTimingFunction: \\\\\\\\\\\\\\\"ease\\\\\\\\\\\\\\\", // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tanimationDuration: 3000,         // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tcloseOnBrowserNavigation: true   // default\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Client ID from the Developer Console\\\\\\\\r\\\\\\\\n\\\\\\\\tvar CLIENT_ID = '782211928709-49gkv11kmh5mji6m79rs9df57ba3u6pv.apps.googleusercontent.com';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Array of API discovery doc URLs for APIs used by the quickstart\\\\\\\\r\\\\\\\\n\\\\\\\\tvar DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Authorization scopes required by the API; multiple scopes can be\\\\\\\\r\\\\\\\\n\\\\\\\\t// included, separated by spaces.\\\\\\\\r\\\\\\\\n\\\\\\\\tvar SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Can put into a db at a later date.\\\\\\\\r\\\\\\\\n\\\\\\\\tvar eventCategories = {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Recreation': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'painting', 'art workshop', 'sketching workshop', 'drawing workshop', 'reading', 'newspaper', 'book club', 'camping', 'cinema', 'movies', 'concert', 'gig', 'concerts', 'recital', 'gigs', 'piano', 'singing', 'music', 'choir', 'flute', 'violin', 'orchestra', 'oboe', 'clarinet', 'saxophone', 'cornett', 'trumpet', 'contrabass', 'cello', 'trombone', 'tuba', 'music', 'ensemble', 'string quartett', 'guitar', 'classical', 'choir', 'massage', 'backrub', 'massages', 'manicure', 'pedicure', 'manicures', 'pedicures', 'spa'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Sports': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'badminton', 'yoga', 'basketball', 'baseball', 'billiard', 'bowling', 'bicycle', 'cycling', 'bike', 'bicycles', 'bikes', 'biking', 'dance', 'dancing', 'dances', 'golf', 'hiking', 'hike', 'hikes', 'kayaking', 'ping pong', 'table tennis', 'ping-pong', 'pingpong', 'jog', 'jogging', 'running', 'jogs', 'runs', 'sail', 'sailing', 'boat cruise', 'sailboat', 'skiing', 'ski', 'skis', 'snowboarding', 'snowshoeing', 'snow shoe', 'snow boarding', 'soccer', 'swim', 'swimming', 'swims', 'tennis', 'going for a walk', 'walking', 'sport'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Gym': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'gym', 'workout', 'workouts'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Food': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'bbq', 'barbecue', 'barbeque', 'breakfast', 'breakfasts', 'brunch', 'brunches', 'coffee', 'coffees', 'dinner', 'dinners', 'restaurant', 'restaurants', 'family meal', 'cocktail', 'drinks', 'cocktails', 'lunch', 'lunches', 'luncheon', 'cookout'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Appointments': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'mechaninc', 'oil change', 'car service', 'service', 'dentist', 'dentistry', 'dental', 'graduation', 'haircut', 'hair', 'wedding', 'repair', 'handyman', 'electrician', 'plumber', 'DIY'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Work': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'deadline', 'meeting', 'office', 'work'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Social': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'call', 'talk', 'meet', 'catch up', 'together'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Doctors': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'doctor', 'dr.', 'vision', 'therapy', 'heal', 'med'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'School': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'class', 'test', 'quiz', 'homework', 'project', 'exam'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Travel': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'roadtrip', 'drive', 'commute', 'flight', 'fly', 'airplane', 'airport', 'hotel', 'motel', 'resort', 'stay', 'vacation', 'plane', 'boat', 'sail', 'stay'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t],\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'Chores': [\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'cleaning', 'clean', 'tidy', 'vacuum'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t]\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Function to authenticate the user and choose the Google Account\\\\\\\\r\\\\\\\\n\\\\\\\\tUtils.signIn = function (event) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tgapi.auth2.getAuthInstance().signIn();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tevent.getView().byId('signButton').setText('Sign Out of Google');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t//event.getView().byId('configLabel').setText('Connected to Google!');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// get the list of calendars and pass in the combobox so it can filled\\\\\\\\t\\\\\\\\t// first turn on the busy indicator\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tthis.getCalendars(event.setCalendarDropDownEvents.bind(event));\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Function to signout of Google\\\\\\\\r\\\\\\\\n\\\\\\\\tUtils.signOut = function (event) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tgapi.auth2.getAuthInstance().signOut();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tevent.getView().byId('calendarComboBox').setEnabled(false);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tevent.getView().byId('signButton').setText('Sign Into Google');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t//event.getView().byId('configLabel').setText('Connected to Google!');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Function to connect to Google Calendars\\\\\\\\r\\\\\\\\n\\\\\\\\t// This gets called on startup\\\\\\\\r\\\\\\\\n\\\\\\\\tUtils.connectToGoogle = function (callback) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tgapi.load('client:auth2', this.initiateClient(callback));\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Initiate the client.\\\\\\\\r\\\\\\\\n\\\\\\\\t// This gives the client access to Google Calendar\\\\\\\\r\\\\\\\\n\\\\\\\\t// The scope is only set to read \\\\\\\\r\\\\\\\\n\\\\\\\\tUtils.initiateClient = function (controller) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar me = this;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tgapi.client.init({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tclientId: CLIENT_ID,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tdiscoveryDocs: DISCOVERY_DOCS,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tscope: SCOPES\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}).then(function () {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// Listen for sign-in state changes.\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tgapi.auth2.getAuthInstance().isSignedIn.listen(me.setItemsAfterLogin(controller));\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}, function (error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log(JSON.stringify(error, null, 2));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\tUtils.setItemsAfterLogin = function (controller) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t//controller.getView().byId('configLabel').setText('Connected to Google!');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tcontroller.getView().byId('signButton').setEnabled(true);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tcontroller.getView().byId('signButton').setBusy(false);\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// Get the list of Calendars\\\\\\\\r\\\\\\\\n\\\\\\\\tUtils.getCalendars = function (callback) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// initialize the list of parsed calendar data\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar parsedList = [];\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar listOfCalendars = gapi.client.calendar.calendarList.list().then(function (response) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log(response);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// now get the list of calendars from the response\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar list = response.result.items;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// now parse it in the format that we want...\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tfor (var i = 0; i < list.length; i++) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar curCalObj = list[i];\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar curCalParsed = {};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// summary in the map is the Calendar name\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcurCalParsed.name = curCalObj.hasOwnProperty('summary') ? curCalObj.summary : 'Undefined';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// get the id\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcurCalParsed.id = curCalObj.hasOwnProperty('id') ? curCalObj.id : '';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// add it to the list of possible calendars\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedList.push(curCalParsed);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// add the list of parsed calendars to the dropdown for user to select\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar listModel = new sap.ui.model.json.JSONModel();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tcallback(parsedList);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tconsole.log(listOfCalendars);\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t// eslint-disable-next-line no-unused-expressions\\\\\\\\r\\\\\\\\n\\\\\\\\tUtils.getListOfEventsFromCalendarInDateRange = function (calendar, startDate, endDate, callback) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// the calendar key is what Gooogle Calendar API needs\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar calendarKey = calendar.getKey();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar startDateString = startDate.toISOString();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar endDateString = endDate.toISOString();\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar me = this;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// get the list of events in the calendar\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tgapi.client.calendar.events.list({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'calendarId': calendarKey,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'timeMin': startDateString,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'timeMax': endDateString,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'showDeleted': false,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'singleEvents': true,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'orderBy': 'startTime'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}).then(callback);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.parseISOStringToDate = function (string) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar b = string.split(/\\\\\\\\\\\\\\\\D+/);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// handle the parsing for dates\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (b.length === 3) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn new Date(Date.UTC(b[0], --b[1], b[2]));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// handle the parsing for datetimes\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn new Date(Date.UTC(b[0], --b[1], b[2], b[3], b[4], b[5], b[6]));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.getCategoryForEvent = function (event) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// loop through each of the event keys in the categories\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar keys = Object.getOwnPropertyNames(eventCategories);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tfor (var k = 0; k < keys.length; k++) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar key = keys[k];\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// now check all keywords in the event name to see if there is a match\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (eventCategories[key].some(function (keyword, index) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tevent.keyword = (event.name.toLowerCase()).includes(keyword.toLowerCase()) ? keyword.toLowerCase() : '';\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn (event.name.toLowerCase()).includes(keyword.toLowerCase());\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t)) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('Found ' + event.name + ' paired with ' + key + ' because of keyword: ' + event.keyword);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn key;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log(\\\\\\\\\\\\\\\"Couldn't find a match for \\\\\\\\\\\\\\\" + event.name + ' so they are in Other');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// return 'Other' as the category if it hits this point\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn 'Other';\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.collectHoursInCategories = function (events) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar squashedEvents = {};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tfor (var e = 0; e < events.length; e++) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar event = events[e];\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (isNaN(event.time)) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcontinue;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (squashedEvents.hasOwnProperty(event.category)) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tsquashedEvents[event.category] = (squashedEvents[event.category] + event.time);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t} else {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tsquashedEvents[event.category] = event.time;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// now loop through the map and build a data map in the appropiate format\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar listOfCategories = [];\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar categories = Object.getOwnPropertyNames(squashedEvents);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tfor (var c = 0; c < categories.length; c++) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar category = categories[c];\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar curRow = [];\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcurRow.push(category);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcurRow.push(squashedEvents[category]);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tlistOfCategories.push(curRow);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn listOfCategories;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tfunction getDateString(dateIn) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tdateIn = new Date(dateIn);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar dateString =\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tdateIn.getFullYear() + \\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\" +\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t(\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\" + (dateIn.getMonth() + 1)).slice(-2) + \\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\" +\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t(\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\" + dateIn.getDate()).slice(-2) + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" +\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t(\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\" + dateIn.getHours()).slice(-2) + \\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\" +\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t(\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\" + dateIn.getMinutes()).slice(-2) + \\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\" +\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t(\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\" + dateIn.getSeconds()).slice(-2);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn dateString;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tfunction formatParsedEvents(events) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (events && events.length > 0) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tfor (var i = 0; i < events.length; i++) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tevents[i].startTimeString = this.getDateString(events[i].startTimeString);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tevents[i].endTimeString = this.getDateString(events[i].endTimeString);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn events;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.parseListOfEvents = function (events, callback) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar parsedEvents = [];\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tfor (var i = 0; i < events.length; i++) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar parsedEvent = {};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// get the events start date & time.  Use date if date time is not there\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar event = events[i];\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar startTime = (event.start.dateTime) ? this.getDateString(event.start.dateTime) : this.getDateString(event.start.date);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar endTime = (event.end.dateTime) ? this.getDateString(event.end.dateTime) : this.getDateString(event.end.date);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar description = (event.description) ? event.description : (event.hasOwnProperty(\\\\\\\\\\\\\\\"bodyPreview\\\\\\\\\\\\\\\") ? event.bodyPreview : '');\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvent.name = (event.hasOwnProperty(\\\\\\\\\\\\\\\"summary\\\\\\\\\\\\\\\")) ? event.summary : event.subject;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvent.description = description;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvent.startTimeString = startTime;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvent.endTimeString = endTime;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvent.startTime = this.parseISOStringToDate(startTime);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvent.endTime = this.parseISOStringToDate(endTime);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// figure out what category this event falls into\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvent.category = this.getCategoryForEvent(parsedEvent);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// now get the time difference in hours between the start time and the end time\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvent.time = Math.ceil(Math.abs(parsedEvent.endTime - parsedEvent.startTime) / (1000 * 60 * 60));\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// if time is NaN that is problem\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (isNaN(parsedEvent.time)) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log(isNan(event));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// add the parsed event to the list\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tparsedEvents.push(parsedEvent);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// add all the hours in a category\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar catData = this.collectHoursInCategories(parsedEvents);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tcallback(catData, parsedEvents);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\treturn Utils;\\\\\\\\r\\\\\\\\n}, true /* bExport */);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/services/GoogleChartService.js\\\\\\\": \\\\\\\"// Author: Andrew Hajj\\\\\\\\r\\\\\\\\n// Purpose: functions to get calendar info from google\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\nsap.ui.define('com/metcs633/services/GoogleChartService', [\\\\\\\\r\\\\\\\\n], function () {\\\\\\\\r\\\\\\\\n\\\\\\\\t'use strict';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\tvar Utils = {};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\tUtils.drawChart = function (catData, controller, callback) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// Create the data table.\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar data = new google.visualization.DataTable();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tdata.addColumn('string', 'Event');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tdata.addColumn('number', 'Hours');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tdata.addRows(catData);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// Set chart options\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar width = 800;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar height = 800;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tif (sap.ui.Device.system.phone) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\twidth = 200;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\theight = 200;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar options = {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'title': 'Hours per Category',\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'width': width,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t'height': height\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar HBoxDomRef = controller.getView().byId('barChartPanel').getDomRef();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// Instantiate and draw our chart, passing in our HBox.\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar chart = {};\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tif (controller.isColumnChart) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tchart = new google.visualization.ColumnChart(HBoxDomRef);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t} else {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tchart = new google.visualization.PieChart(HBoxDomRef);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tgoogle.visualization.events.addListener(chart, 'ready', function () {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tgoogle.visualization.events.addListener(chart, 'select', function () {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// grab a few details before redirecting\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar events = controller.parsedEvents;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar pickedEvents = events.filter(e =>\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\te.category === data.getValue(chart.getSelection()[0].row, 0)\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// now we get the filtered events and show it in the table\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar listModel = new sap.ui.model.json.JSONModel();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tlistModel.setData(pickedEvents);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcontroller.getView().byId('eventsTable').setModel(listModel);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcontroller._wizard.goToStep(controller.getView().byId(\\\\\\\\\\\\\\\"showTable\\\\\\\\\\\\\\\"));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tchart.draw(data, options);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tcallback();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tcontroller._wizard.goToStep(controller.getView().byId(\\\\\\\\\\\\\\\"showChart\\\\\\\\\\\\\\\"));\\\\\\\\r\\\\\\\\n\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\treturn Utils;\\\\\\\\r\\\\\\\\n}, true /* bExport */);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/services/O365CalendarService.js\\\\\\\": \\\\\\\"/* eslint-disable no-undef */\\\\\\\\r\\\\\\\\n// Author: Andrew Hajj\\\\\\\\r\\\\\\\\n// Purpose: functions to get calendar info from google\\\\\\\\r\\\\\\\\nsap.ui.define([],\\\\\\\\r\\\\\\\\n\\\\\\\\tfunction () {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t'use strict';\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar Utils = {};\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar oMsalClient = null;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar toastOptions = {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tduration: 2000,                  // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\twidth: \\\\\\\\\\\\\\\"15em\\\\\\\\\\\\\\\",                   // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tmy: \\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\",             // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tat: \\\\\\\\\\\\\\\"center top\\\\\\\\\\\\\\\",             // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tof: window,                      // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\toffset: \\\\\\\\\\\\\\\"0 0\\\\\\\\\\\\\\\",                   // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tcollision: \\\\\\\\\\\\\\\"fit fit\\\\\\\\\\\\\\\",            // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tonClose: null,                   // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tautoClose: true,                 // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tanimationTimingFunction: \\\\\\\\\\\\\\\"ease\\\\\\\\\\\\\\\", // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tanimationDuration: 2000,         // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tcloseOnBrowserNavigation: true   // default\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar APP_ID = 'f43b3bbb-f2aa-4134-9518-e0a190584c6f';\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar APP_SCOPES = ['Calendars.Read'];\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tvar config = {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tmsalConfig: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tauth: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tclientId: APP_ID,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t//redirectUri: \\\\\\\\\\\\\\\"http://localhost:8000/webapp\\\\\\\\\\\\\\\", //defaults to application start page\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpostLogoutRedirectUri: 'http://localhost:8000/webapp'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcache: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcacheLocation: 'localStorage',\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tstoreAuthStateInCookie: true\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tgraphBaseEndpoint: 'https://graph.microsoft.com/v1.0/',\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tscopeConfig: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tscopes: APP_SCOPES\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// #region Helpers\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tfunction handleAuthError(error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log(error);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tfunction getMSGraphClient() {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (!oMsalClient) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (Msal) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn new Msal.UserAgentApplication(config.msalConfig);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn oMsalClient;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tfunction getStartDate(startDate, endDate) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar start = new Date();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar end = new Date();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (startDate && endDate) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tstart = new Date(new Date(startDate).setHours(0, 0, 0));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tend = new Date(new Date(endDate).setHours(0, 0, 0));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t} else {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tend = new Date(new Date().setHours(0, 0, 0));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tstart = new Date(new Date(2015, 3, 2).setHours(0, 0, 0));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn { start, end };\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tfunction getTimeDifference(start, end) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn (Date.parse(end) - Date.parse(start));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tfunction set365StatusText(event) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (!signedInO365) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t//event.getView().byId('signButtonO365').setText('Sign In to O365');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t//event.getView().byId('configLabelO365').setText('Signed Out of O365!');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tsap.m.MessageToast.show('Signed Out of O365!', toastOptions);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t} else {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t//event.getView().byId('signButtonO365').setText('Sign Out of O365');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t//event.getView().byId('configLabelO365').setText('Connected to O365!');\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tsap.m.MessageToast.show('Connected to O365!', toastOptions);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// #endregion\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.initiateClient = function (event, signout) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar oMsalClient = getMSGraphClient();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar me = this;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (signout) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\toMsalClient.logout();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tset365StatusText(event);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn true;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// check if the user is already signed in\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (!oMsalClient.getAccount()) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\toMsalClient.loginPopup(config.scopeConfig).then(function (res) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tset365StatusText(event);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tme.getCalendars(event.setCalendarDropDownEvents.bind(event));\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn res;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).catch(function (error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\thandleAuthError(error);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tset365StatusText(event);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\treturn true;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.signIn = function (event) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tthis.initiateClient(event);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.signOut = function (event) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tthis.initiateClient(event, true);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// #region Calendars\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.getCalendars = function (callback) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// eslint-disable-next-line no-undef\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t$.ajax({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\theaders: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\turl: `${config.graphBaseEndpoint}me/calendars`,\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttype: 'GET'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).then(function (res) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('getCalendars', res);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcallback(res.value);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn res;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).fail(function (error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\thandleAuthError(error);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.getCalendarById = function (id) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// eslint-disable-next-line no-undef\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t$.ajax({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\theaders: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\turl: `${config.graphBaseEndpoint}me/calendars/${id}`,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttype: 'GET'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).then(function (res) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('getCalendars', res);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn res;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).fail(function (error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\thandleAuthError(error);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// #endregion\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// #region Categories\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.getCategories = function (startDate, endDate, calendarId = '') {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar start = new Date();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar end = new Date();\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// start and end date format 2020-01-31\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar dates = getStartDate(startDate, endDate);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tstart = dates.start;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tend = dates.end;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('start date:', start);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('end date:', end);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar apiUrl = '';\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (calendarId && calendarId.length > 0) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t} else {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t$.ajax({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\theaders: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\turl: `${config.graphBaseEndpoint}${apiUrl}`,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttype: 'GET'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).then((categories) => {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('getCategories', categories);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar retCategories = [];\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (categories && categories.value) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcategories.value.forEach(element => {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tretCategories = retCategories.concat(element.categories);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcategories = JSON.stringify([...new Set(retCategories)]);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('getCategories result:', categories);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn categories;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).fail(function (error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\thandleAuthError(error);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.getCategoriesTime = function (startDate, endDate, calendarId = '') {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar start = new Date();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar end = new Date();\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// start and end date format 2020-01-31\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar dates = getStartDate(startDate, endDate);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tstart = dates.start;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tend = dates.end;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('start date:', start);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('end date:', end);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar apiUrl = '';\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (calendarId && calendarId.length > 0) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t} else {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t$.ajax({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\theaders: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\turl: `${config.graphBaseEndpoint}${apiUrl}`,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttype: 'GET'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).then((res) => {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('getCategoriesTime', res);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar catTimeTotals = {};\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (res && res.value) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tres.value.forEach(element => {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar catTimeTotalsCats = element.categories;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// eslint-disable-next-line max-nested-callbacks\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcatTimeTotalsCats.forEach(cat => {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (catTimeTotals[cat]) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvar milliSeconds = parseFloat(catTimeTotals[cat], 10);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tmilliSeconds += getTimeDifference(element.start.dateTime, element.end.dateTime);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcatTimeTotals[cat] = milliSeconds;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t} else {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcatTimeTotals[cat] = getTimeDifference(element.start.dateTime, element.end.dateTime);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tres = JSON.stringify(catTimeTotals);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('getCategoriesTime:', res);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn res;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).fail(function (error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\thandleAuthError(error);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// #endregion\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// #region Events\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\tUtils.getEvents = function (startDate, endDate, calendarId = '', callback, filterToCategory = '') {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar start = new Date();\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar end = new Date();\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t// start and end date format 2020-01-31\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar dates = getStartDate(startDate, endDate);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tstart = dates.start;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tend = dates.end;\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('start date:', start);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('end date:', end);\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tvar apiUrl = '';\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tif (calendarId && calendarId.length > 0) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t} else {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// first get a count of events\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t// then select all of those events\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t$.ajax({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\theaders: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\turl: `${config.graphBaseEndpoint}${apiUrl}&$count=true`,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttype: 'GET'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).then(function (res) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t$.ajax({\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\theaders: {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t},\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\turl: `${config.graphBaseEndpoint}${apiUrl}&$top=${res[\\\\\\\\\\\\\\\"@odata.count\\\\\\\\\\\\\\\"]}`,\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttype: 'GET'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).then(function (res) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tif (filterToCategory && filterToCategory.length > 0) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tres.value = filterToCategory(res, filterToCategory);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tconsole.log('getEvents', res);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcallback(res);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\treturn res;\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).fail(function (error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\thandleAuthError(error);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}).fail(function (error) {\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\thandleAuthError(error);\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t});\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t};\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t// #endregion\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\treturn Utils;\\\\\\\\r\\\\\\\\n\\\\\\\\t}, true /* bExport */);\\\\\\\\r\\\\\\\\n\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/view/App.view.xml\\\\\\\": \\\\\\\"<mvc:View\\\\\\\\r\\\\\\\\n\\\\\\\\tdisplayBlock=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\txmlns=\\\\\\\\\\\\\\\"sap.m\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\txmlns:mvc=\\\\\\\\\\\\\\\"sap.ui.core.mvc\\\\\\\\\\\\\\\"><Shell><App id=\\\\\\\\\\\\\\\"app\\\\\\\\\\\\\\\"/></Shell></mvc:View>\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"timebox/view/Home.view.xml\\\\\\\": \\\\\\\"<mvc:View\\\\\\\\r\\\\\\\\n\\\\\\\\tcontrollerName=\\\\\\\\\\\\\\\"com.metcs633.controller.Home\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\tdisplayBlock=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\txmlns=\\\\\\\\\\\\\\\"sap.m\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\txmlns:mvc=\\\\\\\\\\\\\\\"sap.ui.core.mvc\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\txmlns:l=\\\\\\\\\\\\\\\"sap.ui.layout\\\\\\\\\\\\\\\"\\\\\\\\t\\\\\\\\t\\\\\\\\r\\\\\\\\n\\\\\\\\txmlns:core=\\\\\\\\\\\\\\\"sap.ui.core\\\\\\\\\\\\\\\"><Page\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"><headerContent><Image src=\\\\\\\\\\\\\\\"Images/logo_transparent.png\\\\\\\\\\\\\\\" activeSrc=\\\\\\\\\\\\\\\"/webapp\\\\\\\\\\\\\\\"></Image></headerContent><content><Wizard id=\\\\\\\\\\\\\\\"CreateProductWizard\\\\\\\\\\\\\\\" class=\\\\\\\\\\\\\\\"sapUiResponsivePadding--header sapUiResponsivePadding--content\\\\\\\\\\\\\\\"><WizardStep id=\\\\\\\\\\\\\\\"googleOrOutlookStep\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttitle=\\\\\\\\\\\\\\\"Choose Source\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcomplete=\\\\\\\\\\\\\\\"chooseStepCompleted\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvalidated=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"><Text class=\\\\\\\\\\\\\\\"sapUiSmallMarginBottom\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"Welcome to the Timebox Tool! The first step is to choose Google or o365.  Click one below to continue.\\\\\\\\\\\\\\\"/><HBox\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\talignItems=\\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tjustifyContent=\\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\twidth=\\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"><SegmentedButton\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\twidth=\\\\\\\\\\\\\\\"320px\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tselectionChange=\\\\\\\\\\\\\\\"setCalendarTypeFromButton\\\\\\\\\\\\\\\"><items><SegmentedButtonItem icon=\\\\\\\\\\\\\\\"sap-icon://appointment\\\\\\\\\\\\\\\" text=\\\\\\\\\\\\\\\"Google\\\\\\\\\\\\\\\"/><SegmentedButtonItem icon=\\\\\\\\\\\\\\\"sap-icon://appointment-2\\\\\\\\\\\\\\\" text=\\\\\\\\\\\\\\\"o365\\\\\\\\\\\\\\\"/></items></SegmentedButton></HBox></WizardStep><WizardStep id=\\\\\\\\\\\\\\\"signInAndChooseCalendarStep\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvalidated=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttitle=\\\\\\\\\\\\\\\"Sign and Choose Calendar\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcomplete=\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tactivate=\\\\\\\\\\\\\\\"signInAndChoosseValidation\\\\\\\\\\\\\\\"><VBox><Text class=\\\\\\\\\\\\\\\"sapUiSmallMarginBottom\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"Next, login, choose a calendar and select a date range\\\\\\\\\\\\\\\"/><Button \\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"signButton\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"Sign in\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tenabled=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tbusyIndicatorDelay=\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tbusy=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpress=\\\\\\\\\\\\\\\"onSignIn\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tclass=\\\\\\\\\\\\\\\"sapUiSmallMarginEnd\\\\\\\\\\\\\\\"></Button></VBox><Panel\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"calendarSelectionPanel\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvisible=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"><VBox class = \\\\\\\\\\\\\\\"sapUiSmallMarginTopBottom\\\\\\\\\\\\\\\"><Label text=\\\\\\\\\\\\\\\"Choose a Calendar: \\\\\\\\\\\\\\\" labelFor=\\\\\\\\\\\\\\\"calendarComboBox\\\\\\\\\\\\\\\"/><ComboBox\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tplaceholder=\\\\\\\\\\\\\\\"Choose a Calendar\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"calendarComboBox\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tbusyIndicatorDelay=\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\titems=\\\\\\\\\\\\\\\"{\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpath: '/'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tclass=\\\\\\\\\\\\\\\"sapUiTinyMarginEnd\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\trequired=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tselectionChange=\\\\\\\\\\\\\\\"calendarSelectionChange\\\\\\\\\\\\\\\"><core:Item key=\\\\\\\\\\\\\\\"{id}\\\\\\\\\\\\\\\" text=\\\\\\\\\\\\\\\"{name}\\\\\\\\\\\\\\\" /></ComboBox><HBox><VBox class = \\\\\\\\\\\\\\\"sapUiSmallMarginEnd\\\\\\\\\\\\\\\"><Label text=\\\\\\\\\\\\\\\"Choose a start date: \\\\\\\\\\\\\\\" labelFor=\\\\\\\\\\\\\\\"DTP1\\\\\\\\\\\\\\\"/><DatePicker\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"DTP1\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tplaceholder=\\\\\\\\\\\\\\\"Enter Date ...\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tchange=\\\\\\\\\\\\\\\"handleStartDateChange\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\trequired=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tclass=\\\\\\\\\\\\\\\"sapUiSmallMarginBottom\\\\\\\\\\\\\\\"/></VBox><VBox><Label text=\\\\\\\\\\\\\\\"Choose an end date: \\\\\\\\\\\\\\\" labelFor=\\\\\\\\\\\\\\\"DTP2\\\\\\\\\\\\\\\"/><DatePicker\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"DTP2\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tplaceholder=\\\\\\\\\\\\\\\"Enter Date ...\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\trequired=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tchange=\\\\\\\\\\\\\\\"handleEndDateChange\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tclass=\\\\\\\\\\\\\\\"sapUiSmallMarginBottom\\\\\\\\\\\\\\\"/></VBox></HBox><Button\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"Get Events\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvisible=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpress=\\\\\\\\\\\\\\\"goButton\\\\\\\\\\\\\\\"></Button></VBox></Panel></WizardStep><WizardStep id=\\\\\\\\\\\\\\\"showChart\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tactivate=\\\\\\\\\\\\\\\"pricingActivate\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tcomplete=\\\\\\\\\\\\\\\"pricingComplete\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvalidated=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttitle=\\\\\\\\\\\\\\\"Chart\\\\\\\\\\\\\\\"><Panel><Button\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"changeChartType\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"Change Chart\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpress=\\\\\\\\\\\\\\\"changeChart\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvisible=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"></Button><FlexBox\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\talignItems=\\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tjustifyContent=\\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\"><items><Panel\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"barChartPanel\\\\\\\\\\\\\\\"></Panel></items></FlexBox></Panel></WizardStep><WizardStep id=\\\\\\\\\\\\\\\"showTable\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvalidated=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tshowNextButton=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttitle=\\\\\\\\\\\\\\\"Events\\\\\\\\\\\\\\\"><Table\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tid=\\\\\\\\\\\\\\\"eventsTable\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tinset=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tvisible=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\titems=\\\\\\\\\\\\\\\"{\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpath: '/',\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tsorter: [{\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpath: 'category'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}, \\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t{\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpath: 'name'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}, \\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t{\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tpath: 'keyword'\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}]\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t}\\\\\\\\\\\\\\\"><columns><Column\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\twidth=\\\\\\\\\\\\\\\"12em\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\"Event\\\\\\\\\\\\\\\" /></Column><Column\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tdemandPopin=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\"Category\\\\\\\\\\\\\\\" /></Column><Column\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tdemandPopin=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\"Keyword\\\\\\\\\\\\\\\" /></Column><Column\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tdemandPopin=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\"Date\\\\\\\\\\\\\\\" /></Column><Column\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tdemandPopin=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"><Text text=\\\\\\\\\\\\\\\"Hours\\\\\\\\\\\\\\\" /></Column></columns><items><ColumnListItem><cells><Text\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"{name}\\\\\\\\\\\\\\\"/><Text\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"{category}\\\\\\\\\\\\\\\" /><Text\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"{keyword}\\\\\\\\\\\\\\\" /><Text\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"{startTimeString}\\\\\\\\\\\\\\\" /><Text\\\\\\\\r\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\ttext=\\\\\\\\\\\\\\\"{time}\\\\\\\\\\\\\\\" /></cells></ColumnListItem></items></Table></WizardStep></Wizard></content></Page></mvc:View>\\\\\\\"\\\\n\\\\t}\\\\n});\\\",\\n\\t\\t\\\"timebox/Component.js\\\": \\\"sap.ui.define([\\\\r\\\\n\\\\t'sap/ui/core/UIComponent',\\\\r\\\\n\\\\t'sap/ui/Device',\\\\r\\\\n\\\\t'./model/models'\\\\r\\\\n], function (UIComponent, Device, models) {\\\\r\\\\n\\\\t'use strict';\\\\r\\\\n\\\\r\\\\n\\\\treturn UIComponent.extend('com.metcs633.Component', {\\\\r\\\\n\\\\t\\\\tmetadata: {\\\\r\\\\n\\\\t\\\\t\\\\tmanifest: 'json'\\\\r\\\\n\\\\t\\\\t},\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t/**\\\\r\\\\n\\\\t\\\\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\\\\r\\\\n\\\\t\\\\t * @public\\\\r\\\\n\\\\t\\\\t * @override\\\\r\\\\n\\\\t\\\\t */\\\\r\\\\n\\\\t\\\\tinit: function () {\\\\r\\\\n\\\\t\\\\t\\\\t// call the base component's init function\\\\r\\\\n\\\\t\\\\t\\\\tUIComponent.prototype.init.apply(this, arguments);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// set the device model\\\\r\\\\n\\\\t\\\\t\\\\tthis.setModel(models.createDeviceModel(), 'device');\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// create the views based on the url/hash\\\\r\\\\n\\\\t\\\\t\\\\tthis.getRouter().initialize();\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t});\\\\r\\\\n});\\\",\\n\\t\\t\\\"timebox/controller/App.controller.js\\\": \\\"sap.ui.define([\\\\r\\\\n\\\\t'sap/ui/core/mvc/Controller',\\\\r\\\\n\\\\t'com/metcs633/model/formatter'\\\\r\\\\n], function (Controller, formatter) {\\\\r\\\\n\\\\t'use strict';\\\\r\\\\n\\\\r\\\\n\\\\treturn Controller.extend('com.metcs633.controller.App', {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tformatter: formatter,\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tonInit: function () {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t});\\\\r\\\\n});\\\",\\n\\t\\t\\\"timebox/controller/Home.controller.js\\\": \\\"//Authors: Andrew Hajj\\\\r\\\\n\\\\r\\\\nsap.ui.define([\\\\r\\\\n  'sap/ui/core/mvc/Controller',\\\\r\\\\n  '../model/formatter',\\\\r\\\\n  '../services/GoogleCalendarService',\\\\r\\\\n  '../services/GoogleChartService',\\\\r\\\\n  '../services/O365CalendarService'\\\\r\\\\n], function (Controller, formatter, GoogleCalendarService, GoogleChartService, O365CalendarService) {\\\\r\\\\n  'use strict';\\\\r\\\\n\\\\r\\\\n  var signedInGoogle = false;\\\\r\\\\n  var signedInO365 = false;\\\\r\\\\n  var isGoogle = true;\\\\r\\\\n  var toastOptions = {\\\\r\\\\n    duration: 2000,                  // default\\\\r\\\\n    width: \\\\\\\"15em\\\\\\\",                   // default\\\\r\\\\n    my: \\\\\\\"center top\\\\\\\",             // default\\\\r\\\\n    at: \\\\\\\"center top\\\\\\\",             // default\\\\r\\\\n    of: window,                      // default\\\\r\\\\n    offset: \\\\\\\"0 0\\\\\\\",                   // default\\\\r\\\\n    collision: \\\\\\\"fit fit\\\\\\\",            // default\\\\r\\\\n    onClose: null,                   // default\\\\r\\\\n    autoClose: true,                 // default\\\\r\\\\n    animationTimingFunction: \\\\\\\"ease\\\\\\\", // default\\\\r\\\\n    animationDuration: 2000,         // default\\\\r\\\\n    closeOnBrowserNavigation: true   // default\\\\r\\\\n  };\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n  return Controller.extend('com.metcs633.controller.App', {\\\\r\\\\n\\\\r\\\\n    formatter: formatter,\\\\r\\\\n    GoogleCalendarService: GoogleCalendarService,\\\\r\\\\n\\\\r\\\\n    setCalendarTypeFromButton: function (event) {\\\\r\\\\n      isGoogle = (event.getParameters().item.getText() === \\\\\\\"Google\\\\\\\") ? true : false;\\\\r\\\\n\\\\r\\\\n      // if it goes in here that means we need to reset all the things\\\\r\\\\n      if (this._wizard.getProgress() > 1) {\\\\r\\\\n        var calendarDropDown = this.getView().byId('calendarComboBox');\\\\r\\\\n        var dtpStart = this.getView().byId('DTP1');\\\\r\\\\n        var dtpEnd = this.getView().byId('DTP2');\\\\r\\\\n        calendarDropDown.setSelectedItem(\\\\\\\"\\\\\\\");\\\\r\\\\n        dtpStart.setValue(\\\\\\\"\\\\\\\");\\\\r\\\\n        dtpEnd.setValue(\\\\\\\"\\\\\\\");\\\\r\\\\n        this.getView().byId('calendarSelectionPanel').setVisible(false);\\\\r\\\\n        this._wizard.discardProgress(this._wizard.getSteps()[0]);\\\\r\\\\n      }\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    set365StatusText: function () {\\\\r\\\\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\r\\\\n      if (!signedInO365) {\\\\r\\\\n        //this.getView().byId('signButton').setText('Sign In to O365');\\\\r\\\\n        //this.getView().byId('configLabelO365').setText('Signed Out of O365!');\\\\r\\\\n        sap.m.MessageToast.show('Signed Out of O365!', toastOptions);\\\\r\\\\n      } else {\\\\r\\\\n        //this.getView().byId('signButton').setText('Sign Out of O365');\\\\r\\\\n        //this.getView().byId('configLabelO365').setText('Connected to O365!');\\\\r\\\\n        sap.m.MessageToast.show('Connected to O365!', toastOptions);\\\\r\\\\n      }\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    // Connect to Google api by default to grab the calendar\\\\r\\\\n    onInit: function () {\\\\r\\\\n      var configLabel = this.getView().byId('configLabel');\\\\r\\\\n      sap.m.MessageToast.show('Connecting to Google...', toastOptions);\\\\r\\\\n      //configLabel.setText('Connecting to Google...');\\\\r\\\\n      GoogleCalendarService.connectToGoogle(this);\\\\r\\\\n\\\\r\\\\n      //Connect to O365\\\\r\\\\n      var configLabelO365 = this.getView().byId('configLabelO365');\\\\r\\\\n      this.set365StatusText();\\\\r\\\\n      this._wizard = this.getView().byId(\\\\\\\"CreateProductWizard\\\\\\\");\\\\r\\\\n\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    afterLogin: function () {\\\\r\\\\n      this.getView().byId('signButton').setEnabled(true);\\\\r\\\\n      //this.getView().byId('configLabel').setText('Connected to Google!');\\\\r\\\\n      sap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    onSignIn: function (event) {\\\\r\\\\n      if (isGoogle) {\\\\r\\\\n        this.onSignInOutGooglePress();\\\\r\\\\n      }\\\\r\\\\n      else {\\\\r\\\\n        this.onSignInOutO365Press();\\\\r\\\\n      }\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    onSignInOutGooglePress: function (event) {\\\\r\\\\n      if (signedInGoogle) {\\\\r\\\\n        GoogleCalendarService.signOut(this);\\\\r\\\\n      } else {   // first turn on the busy indicator\\\\r\\\\n        this.getView().byId('calendarComboBox').setBusy(true);\\\\r\\\\n        GoogleCalendarService.signIn(this);\\\\r\\\\n      }\\\\r\\\\n      signedInGoogle = !signedInGoogle;\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    onSignInOutO365Press: function (event) {\\\\r\\\\n      if (signedInO365) {\\\\r\\\\n        O365CalendarService.signOut(this);\\\\r\\\\n        this.getView().byId('signButton').setText('Sign In to O365');\\\\r\\\\n        this.set365StatusText();\\\\r\\\\n      } else {\\\\r\\\\n        O365CalendarService.signIn(this);\\\\r\\\\n        this.set365StatusText();\\\\r\\\\n      }\\\\r\\\\n    },\\\\r\\\\n    chooseStepCompleted: function (event) {\\\\r\\\\n      // We don't keep the cookies for Google, but we do for outlook\\\\r\\\\n      // if this if coming from step 1 then check if the user is signed in\\\\r\\\\n      // if so, go right to getting the calendars\\\\r\\\\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\r\\\\n      if (!isGoogle && signedInO365) {\\\\r\\\\n        this.set365StatusText();\\\\r\\\\n        this.getView().byId('signButton').setText('Sign Out of O365');\\\\r\\\\n        O365CalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\\\\r\\\\n      }\\\\r\\\\n      else if (!isGoogle) {\\\\r\\\\n        this.getView().byId('signButton').setText('Sign In to O365');\\\\r\\\\n      }\\\\r\\\\n      else if (!signedInGoogle) {\\\\r\\\\n        // clear the calendar selection\\\\r\\\\n        // set the button to login\\\\r\\\\n        this.getView().byId('signButton').setText('Sign In to Google');\\\\r\\\\n      }\\\\r\\\\n      else {\\\\r\\\\n\\\\r\\\\n        this.getView().byId('signButton').setText('Sign Out of Google');\\\\r\\\\n        GoogleCalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\\\\r\\\\n        this.getView().byId('calendarSelectionPanel').setVisible(true);\\\\r\\\\n      }\\\\r\\\\n\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    setCalendarDropDownEvents: function (events) {\\\\r\\\\n\\\\r\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\r\\\\n      var statusLabel = this.getView().byId('configLabel');\\\\r\\\\n      // add the list of parsed calendars to the dropdown for user to select\\\\r\\\\n      var listModel = new sap.ui.model.json.JSONModel();\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n      listModel.setData(events);\\\\r\\\\n      calendarDropDown.setModel(listModel);\\\\r\\\\n      this.getView().byId('calendarSelectionPanel').setVisible(true);\\\\r\\\\n      calendarDropDown.setBusy(false);\\\\r\\\\n      // statusLabel.setText('Loaded calendars!');\\\\r\\\\n      sap.m.MessageToast.show('Loaded calendars!', toastOptions);\\\\r\\\\n    },\\\\r\\\\n    onGetCalendarsPress: function (event) {\\\\r\\\\n\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    signInAndChoosseValidation: function (event) {\\\\r\\\\n      // only enable the Go button if\\\\r\\\\n      // A calendar is selected, a start date and an end date are selected\\\\r\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\r\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\r\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\r\\\\n\\\\r\\\\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\\\\r\\\\n        return true;\\\\r\\\\n      }\\\\r\\\\n      return false;\\\\r\\\\n\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    validateCalendarStartEndDate: function (event) {\\\\r\\\\n      // only enable the Go button if\\\\r\\\\n      // A calendar is selected, a start date and an end date are selected\\\\r\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\r\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\r\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\r\\\\n\\\\r\\\\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\\\\r\\\\n        this._wizard.validateStep(this.byId(\\\\\\\"signInAndChooseCalendarStep\\\\\\\"));\\\\r\\\\n        //this.getView().byId('goButton').setEnabled(true);\\\\r\\\\n      } else {\\\\r\\\\n        this._wizard.invalidateStep(this.byId(\\\\\\\"signInAndChooseCalendarStep\\\\\\\"));\\\\r\\\\n        this._wizard.goToStep(this.byId(\\\\\\\"signInAndChooseCalendarStep\\\\\\\"));\\\\r\\\\n      }\\\\r\\\\n\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    goButton: function (event) {\\\\r\\\\n      // freeze the view so the user knows something is happening\\\\r\\\\n      // sap.ui.core.\\\\r\\\\n      this.getView().byId(\\\\\\\"page\\\\\\\").setBusy(true);\\\\r\\\\n      // figure out the min and max time in order to query google calendar\\\\r\\\\n      // this button doesn't get enabled until there is data in all 3 prompts (calendar, start & end date)\\\\r\\\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\\\r\\\\n      var dtpStart = this.getView().byId('DTP1');\\\\r\\\\n      var dtpEnd = this.getView().byId('DTP2');\\\\r\\\\n\\\\r\\\\n      // First, we need the selected calendar\\\\r\\\\n      var selectedCalendar = calendarDropDown.getSelectedItem();\\\\r\\\\n\\\\r\\\\n      // then we need the start date time\\\\r\\\\n      var startTime = dtpStart.getDateValue();\\\\r\\\\n\\\\r\\\\n      // then we need the end date date\\\\r\\\\n      var endTime = dtpEnd.getDateValue();\\\\r\\\\n      var me = this;\\\\r\\\\n\\\\r\\\\n      if (isGoogle) {\\\\r\\\\n        GoogleCalendarService.getListOfEventsFromCalendarInDateRange(selectedCalendar, startTime, endTime, function (response) {\\\\r\\\\n          var events = response.result.items;\\\\r\\\\n          //console.log(events);\\\\r\\\\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\\\\r\\\\n          me.getView().byId(\\\\\\\"page\\\\\\\").setBusy(false);\\\\r\\\\n        });\\\\r\\\\n      }\\\\r\\\\n      else {\\\\r\\\\n        O365CalendarService.getEvents(startTime, endTime, selectedCalendar, function (response) {\\\\r\\\\n          var events = response.value;\\\\r\\\\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\\\\r\\\\n          me.getView().byId(\\\\\\\"page\\\\\\\").setBusy(false);\\\\r\\\\n          // GoogleCalendarService.parseListOfEvents(events, me);\\\\r\\\\n        });\\\\r\\\\n      }\\\\r\\\\n      // if (!this.getView().byId(\\\\\\\"goButton\\\\\\\").getVisible())\\\\r\\\\n      // {\\\\r\\\\n      this.getView().byId('changeChartType').setVisible(true);\\\\r\\\\n      this.getView().byId(\\\\\\\"goButton\\\\\\\").setVisible(true);\\\\r\\\\n      this.byId(\\\\\\\"showChart\\\\\\\").fireComplete();\\\\r\\\\n      // }\\\\r\\\\n      this._wizard.goToStep(this.getView().byId(\\\\\\\"showChart\\\\\\\"));\\\\r\\\\n\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    setChartAfterParsingEvents: function (categorizedData, parsedEvents) {\\\\r\\\\n      // set the data back into the conteroller so it's retrievable after\\\\r\\\\n      this.chartData = categorizedData;\\\\r\\\\n      this.parsedEvents = parsedEvents;\\\\r\\\\n      this.isColumnChart = (this.hasOwnProperty('isColumnChart')) ? !(this.isColumnChart) : true;\\\\r\\\\n      var me = this;\\\\r\\\\n      GoogleChartService.drawChart(categorizedData, me, function () {\\\\r\\\\n        // fill in the table\\\\r\\\\n        var listModel = new sap.ui.model.json.JSONModel();\\\\r\\\\n        listModel.setData(parsedEvents);\\\\r\\\\n        me.getView().byId('eventsTable').setModel(listModel);\\\\r\\\\n        me.getView().byId('eventsTable').setVisible(true);\\\\r\\\\n        // me.getView().byId('configLabel').setText('Analyzed time!  Scroll down to see a visual representation');\\\\r\\\\n        me.isColumnChart = !(me.isColumnChart);\\\\r\\\\n      });\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    changeChart: function (event) {\\\\r\\\\n      var me = this;\\\\r\\\\n      GoogleChartService.drawChart(this.chartData, this, function () {\\\\r\\\\n        me.isColumnChart = !(me.isColumnChart);\\\\r\\\\n      });\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    calendarSelectionChange: function (event) {\\\\r\\\\n      this.validateCalendarStartEndDate();\\\\r\\\\n      // acknowledge the selection change and update the status accordingly\\\\r\\\\n      //this.getView().byId('configLabel').setText(\\\\\\\"Calendar '\\\\\\\" + event.getParameters('selectedItem').selectedItem.getText() + \\\\\\\"' loaded.\\\\\\\");\\\\r\\\\n      sap.m.MessageToast.show(\\\\\\\"Calendar '\\\\\\\" + event.getParameters('selectedItem').selectedItem.getText() + \\\\\\\"' loaded.\\\\\\\", toastOptions);\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    handleStartDateChange: function (event) {\\\\r\\\\n\\\\r\\\\n      this.validateCalendarStartEndDate();\\\\r\\\\n    },\\\\r\\\\n\\\\r\\\\n    handleEndDateChange: function (event) {\\\\r\\\\n\\\\r\\\\n      this.validateCalendarStartEndDate();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n  });\\\\r\\\\n});\\\",\\n\\t\\t\\\"timebox/model/formatter.js\\\": \\\"sap.ui.define([], function () {\\\\r\\\\n\\\\t'use strict';\\\\r\\\\n\\\\treturn {\\\\r\\\\n\\\\r\\\\n\\\\t};\\\\r\\\\n});\\\",\\n\\t\\t\\\"timebox/model/models.js\\\": \\\"sap.ui.define([\\\\r\\\\n\\\\t'sap/ui/model/json/JSONModel',\\\\r\\\\n\\\\t'sap/ui/Device'\\\\r\\\\n], function (JSONModel, Device) {\\\\r\\\\n\\\\t'use strict';\\\\r\\\\n\\\\r\\\\n\\\\treturn {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tcreateDeviceModel: function () {\\\\r\\\\n\\\\t\\\\t\\\\tvar oModel = new JSONModel(Device);\\\\r\\\\n\\\\t\\\\t\\\\toModel.setDefaultBindingMode('OneWay');\\\\r\\\\n\\\\t\\\\t\\\\treturn oModel;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t};\\\\r\\\\n});\\\",\\n\\t\\t\\\"timebox/services/GoogleCalendarService.js\\\": \\\"// Author: Andrew Hajj\\\\r\\\\n// Purpose: functions to get calendar info from google\\\\r\\\\n\\\\r\\\\nsap.ui.define('com/metcs633/services/GoogleCalendarService', [\\\\r\\\\n\\\\t'../services/GoogleChartService'\\\\r\\\\n], function (GoogleChartService) {\\\\r\\\\n\\\\t'use strict';\\\\r\\\\n\\\\r\\\\n\\\\tvar Utils = {};\\\\r\\\\n\\\\r\\\\n\\\\tvar toastOptions = {\\\\r\\\\n\\\\t\\\\tduration: 2000,                  // default\\\\r\\\\n\\\\t\\\\twidth: \\\\\\\"15em\\\\\\\",                   // default\\\\r\\\\n\\\\t\\\\tmy: \\\\\\\"center top\\\\\\\",             // default\\\\r\\\\n\\\\t\\\\tat: \\\\\\\"center top\\\\\\\",             // default\\\\r\\\\n\\\\t\\\\tof: window,                      // default\\\\r\\\\n\\\\t\\\\toffset: \\\\\\\"0 0\\\\\\\",                   // default\\\\r\\\\n\\\\t\\\\tcollision: \\\\\\\"fit fit\\\\\\\",            // default\\\\r\\\\n\\\\t\\\\tonClose: null,                   // default\\\\r\\\\n\\\\t\\\\tautoClose: true,                 // default\\\\r\\\\n\\\\t\\\\tanimationTimingFunction: \\\\\\\"ease\\\\\\\", // default\\\\r\\\\n\\\\t\\\\tanimationDuration: 3000,         // default\\\\r\\\\n\\\\t\\\\tcloseOnBrowserNavigation: true   // default\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t// Client ID from the Developer Console\\\\r\\\\n\\\\tvar CLIENT_ID = '782211928709-49gkv11kmh5mji6m79rs9df57ba3u6pv.apps.googleusercontent.com';\\\\r\\\\n\\\\r\\\\n\\\\t// Array of API discovery doc URLs for APIs used by the quickstart\\\\r\\\\n\\\\tvar DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\\\\r\\\\n\\\\r\\\\n\\\\t// Authorization scopes required by the API; multiple scopes can be\\\\r\\\\n\\\\t// included, separated by spaces.\\\\r\\\\n\\\\tvar SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';\\\\r\\\\n\\\\r\\\\n\\\\t// Can put into a db at a later date.\\\\r\\\\n\\\\tvar eventCategories = {\\\\r\\\\n\\\\t\\\\t'Recreation': [\\\\r\\\\n\\\\t\\\\t\\\\t'painting', 'art workshop', 'sketching workshop', 'drawing workshop', 'reading', 'newspaper', 'book club', 'camping', 'cinema', 'movies', 'concert', 'gig', 'concerts', 'recital', 'gigs', 'piano', 'singing', 'music', 'choir', 'flute', 'violin', 'orchestra', 'oboe', 'clarinet', 'saxophone', 'cornett', 'trumpet', 'contrabass', 'cello', 'trombone', 'tuba', 'music', 'ensemble', 'string quartett', 'guitar', 'classical', 'choir', 'massage', 'backrub', 'massages', 'manicure', 'pedicure', 'manicures', 'pedicures', 'spa'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Sports': [\\\\r\\\\n\\\\t\\\\t\\\\t'badminton', 'yoga', 'basketball', 'baseball', 'billiard', 'bowling', 'bicycle', 'cycling', 'bike', 'bicycles', 'bikes', 'biking', 'dance', 'dancing', 'dances', 'golf', 'hiking', 'hike', 'hikes', 'kayaking', 'ping pong', 'table tennis', 'ping-pong', 'pingpong', 'jog', 'jogging', 'running', 'jogs', 'runs', 'sail', 'sailing', 'boat cruise', 'sailboat', 'skiing', 'ski', 'skis', 'snowboarding', 'snowshoeing', 'snow shoe', 'snow boarding', 'soccer', 'swim', 'swimming', 'swims', 'tennis', 'going for a walk', 'walking', 'sport'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Gym': [\\\\r\\\\n\\\\t\\\\t\\\\t'gym', 'workout', 'workouts'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Food': [\\\\r\\\\n\\\\t\\\\t\\\\t'bbq', 'barbecue', 'barbeque', 'breakfast', 'breakfasts', 'brunch', 'brunches', 'coffee', 'coffees', 'dinner', 'dinners', 'restaurant', 'restaurants', 'family meal', 'cocktail', 'drinks', 'cocktails', 'lunch', 'lunches', 'luncheon', 'cookout'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Appointments': [\\\\r\\\\n\\\\t\\\\t\\\\t'mechaninc', 'oil change', 'car service', 'service', 'dentist', 'dentistry', 'dental', 'graduation', 'haircut', 'hair', 'wedding', 'repair', 'handyman', 'electrician', 'plumber', 'DIY'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Work': [\\\\r\\\\n\\\\t\\\\t\\\\t'deadline', 'meeting', 'office', 'work'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Social': [\\\\r\\\\n\\\\t\\\\t\\\\t'call', 'talk', 'meet', 'catch up', 'together'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Doctors': [\\\\r\\\\n\\\\t\\\\t\\\\t'doctor', 'dr.', 'vision', 'therapy', 'heal', 'med'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'School': [\\\\r\\\\n\\\\t\\\\t\\\\t'class', 'test', 'quiz', 'homework', 'project', 'exam'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Travel': [\\\\r\\\\n\\\\t\\\\t\\\\t'roadtrip', 'drive', 'commute', 'flight', 'fly', 'airplane', 'airport', 'hotel', 'motel', 'resort', 'stay', 'vacation', 'plane', 'boat', 'sail', 'stay'\\\\r\\\\n\\\\t\\\\t],\\\\r\\\\n\\\\t\\\\t'Chores': [\\\\r\\\\n\\\\t\\\\t\\\\t'cleaning', 'clean', 'tidy', 'vacuum'\\\\r\\\\n\\\\t\\\\t]\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t// Function to authenticate the user and choose the Google Account\\\\r\\\\n\\\\tUtils.signIn = function (event) {\\\\r\\\\n\\\\t\\\\tgapi.auth2.getAuthInstance().signIn();\\\\r\\\\n\\\\t\\\\tevent.getView().byId('signButton').setText('Sign Out of Google');\\\\r\\\\n\\\\t\\\\t//event.getView().byId('configLabel').setText('Connected to Google!');\\\\r\\\\n\\\\t\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\r\\\\n\\\\t\\\\t// get the list of calendars and pass in the combobox so it can filled\\\\t\\\\t// first turn on the busy indicator\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tthis.getCalendars(event.setCalendarDropDownEvents.bind(event));\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t// Function to signout of Google\\\\r\\\\n\\\\tUtils.signOut = function (event) {\\\\r\\\\n\\\\t\\\\tgapi.auth2.getAuthInstance().signOut();\\\\r\\\\n\\\\t\\\\tevent.getView().byId('calendarComboBox').setEnabled(false);\\\\r\\\\n\\\\t\\\\tevent.getView().byId('signButton').setText('Sign Into Google');\\\\r\\\\n\\\\t\\\\t//event.getView().byId('configLabel').setText('Connected to Google!');\\\\r\\\\n\\\\t\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t// Function to connect to Google Calendars\\\\r\\\\n\\\\t// This gets called on startup\\\\r\\\\n\\\\tUtils.connectToGoogle = function (callback) {\\\\r\\\\n\\\\t\\\\tgapi.load('client:auth2', this.initiateClient(callback));\\\\r\\\\n\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t// Initiate the client.\\\\r\\\\n\\\\t// This gives the client access to Google Calendar\\\\r\\\\n\\\\t// The scope is only set to read \\\\r\\\\n\\\\tUtils.initiateClient = function (controller) {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tvar me = this;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tgapi.client.init({\\\\r\\\\n\\\\t\\\\t\\\\tclientId: CLIENT_ID,\\\\r\\\\n\\\\t\\\\t\\\\tdiscoveryDocs: DISCOVERY_DOCS,\\\\r\\\\n\\\\t\\\\t\\\\tscope: SCOPES\\\\r\\\\n\\\\t\\\\t}).then(function () {\\\\r\\\\n\\\\t\\\\t\\\\t// Listen for sign-in state changes.\\\\r\\\\n\\\\t\\\\t\\\\tgapi.auth2.getAuthInstance().isSignedIn.listen(me.setItemsAfterLogin(controller));\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t}, function (error) {\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log(JSON.stringify(error, null, 2));\\\\r\\\\n\\\\t\\\\t});\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\tUtils.setItemsAfterLogin = function (controller) {\\\\r\\\\n\\\\t\\\\t//controller.getView().byId('configLabel').setText('Connected to Google!');\\\\r\\\\n\\\\t\\\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tcontroller.getView().byId('signButton').setEnabled(true);\\\\r\\\\n\\\\t\\\\tcontroller.getView().byId('signButton').setBusy(false);\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t// Get the list of Calendars\\\\r\\\\n\\\\tUtils.getCalendars = function (callback) {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t// initialize the list of parsed calendar data\\\\r\\\\n\\\\t\\\\tvar parsedList = [];\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tvar listOfCalendars = gapi.client.calendar.calendarList.list().then(function (response) {\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log(response);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// now get the list of calendars from the response\\\\r\\\\n\\\\t\\\\t\\\\tvar list = response.result.items;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// now parse it in the format that we want...\\\\r\\\\n\\\\t\\\\t\\\\tfor (var i = 0; i < list.length; i++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar curCalObj = list[i];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar curCalParsed = {};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// summary in the map is the Calendar name\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcurCalParsed.name = curCalObj.hasOwnProperty('summary') ? curCalObj.summary : 'Undefined';\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// get the id\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcurCalParsed.id = curCalObj.hasOwnProperty('id') ? curCalObj.id : '';\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// add it to the list of possible calendars\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedList.push(curCalParsed);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// add the list of parsed calendars to the dropdown for user to select\\\\r\\\\n\\\\t\\\\t\\\\tvar listModel = new sap.ui.model.json.JSONModel();\\\\r\\\\n\\\\t\\\\t\\\\tcallback(parsedList);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\tconsole.log(listOfCalendars);\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t// eslint-disable-next-line no-unused-expressions\\\\r\\\\n\\\\tUtils.getListOfEventsFromCalendarInDateRange = function (calendar, startDate, endDate, callback) {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t// the calendar key is what Gooogle Calendar API needs\\\\r\\\\n\\\\t\\\\tvar calendarKey = calendar.getKey();\\\\r\\\\n\\\\t\\\\tvar startDateString = startDate.toISOString();\\\\r\\\\n\\\\t\\\\tvar endDateString = endDate.toISOString();\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tvar me = this;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t// get the list of events in the calendar\\\\r\\\\n\\\\t\\\\tgapi.client.calendar.events.list({\\\\r\\\\n\\\\t\\\\t\\\\t'calendarId': calendarKey,\\\\r\\\\n\\\\t\\\\t\\\\t'timeMin': startDateString,\\\\r\\\\n\\\\t\\\\t\\\\t'timeMax': endDateString,\\\\r\\\\n\\\\t\\\\t\\\\t'showDeleted': false,\\\\r\\\\n\\\\t\\\\t\\\\t'singleEvents': true,\\\\r\\\\n\\\\t\\\\t\\\\t'orderBy': 'startTime'\\\\r\\\\n\\\\t\\\\t}).then(callback);\\\\r\\\\n\\\\r\\\\n\\\\t},\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.parseISOStringToDate = function (string) {\\\\r\\\\n\\\\t\\\\t\\\\tvar b = string.split(/\\\\\\\\D+/);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// handle the parsing for dates\\\\r\\\\n\\\\t\\\\t\\\\tif (b.length === 3) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\treturn new Date(Date.UTC(b[0], --b[1], b[2]));\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t// handle the parsing for datetimes\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\treturn new Date(Date.UTC(b[0], --b[1], b[2], b[3], b[4], b[5], b[6]));\\\\r\\\\n\\\\t\\\\t},\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.getCategoryForEvent = function (event) {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// loop through each of the event keys in the categories\\\\r\\\\n\\\\t\\\\t\\\\tvar keys = Object.getOwnPropertyNames(eventCategories);\\\\r\\\\n\\\\t\\\\t\\\\tfor (var k = 0; k < keys.length; k++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar key = keys[k];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// now check all keywords in the event name to see if there is a match\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tif (eventCategories[key].some(function (keyword, index) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tevent.keyword = (event.name.toLowerCase()).includes(keyword.toLowerCase()) ? keyword.toLowerCase() : '';\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\treturn (event.name.toLowerCase()).includes(keyword.toLowerCase());\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t)) {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log('Found ' + event.name + ' paired with ' + key + ' because of keyword: ' + event.keyword);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\treturn key;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log(\\\\\\\"Couldn't find a match for \\\\\\\" + event.name + ' so they are in Other');\\\\r\\\\n\\\\t\\\\t\\\\t// return 'Other' as the category if it hits this point\\\\r\\\\n\\\\t\\\\t\\\\treturn 'Other';\\\\r\\\\n\\\\t\\\\t},\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.collectHoursInCategories = function (events) {\\\\r\\\\n\\\\t\\\\t\\\\tvar squashedEvents = {};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (var e = 0; e < events.length; e++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar event = events[e];\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tif (isNaN(event.time)) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcontinue;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tif (squashedEvents.hasOwnProperty(event.category)) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tsquashedEvents[event.category] = (squashedEvents[event.category] + event.time);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tsquashedEvents[event.category] = event.time;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// now loop through the map and build a data map in the appropiate format\\\\r\\\\n\\\\t\\\\t\\\\tvar listOfCategories = [];\\\\r\\\\n\\\\t\\\\t\\\\tvar categories = Object.getOwnPropertyNames(squashedEvents);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (var c = 0; c < categories.length; c++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar category = categories[c];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar curRow = [];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcurRow.push(category);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcurRow.push(squashedEvents[category]);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlistOfCategories.push(curRow);\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\treturn listOfCategories;\\\\r\\\\n\\\\t\\\\t},\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tfunction getDateString(dateIn) {\\\\r\\\\n\\\\t\\\\t\\\\tdateIn = new Date(dateIn);\\\\r\\\\n\\\\t\\\\t\\\\tvar dateString =\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tdateIn.getFullYear() + \\\\\\\"/\\\\\\\" +\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t(\\\\\\\"0\\\\\\\" + (dateIn.getMonth() + 1)).slice(-2) + \\\\\\\"/\\\\\\\" +\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t(\\\\\\\"0\\\\\\\" + dateIn.getDate()).slice(-2) + \\\\\\\" \\\\\\\" +\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t(\\\\\\\"0\\\\\\\" + dateIn.getHours()).slice(-2) + \\\\\\\":\\\\\\\" +\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t(\\\\\\\"0\\\\\\\" + dateIn.getMinutes()).slice(-2) + \\\\\\\":\\\\\\\" +\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t(\\\\\\\"0\\\\\\\" + dateIn.getSeconds()).slice(-2);\\\\r\\\\n\\\\t\\\\t\\\\treturn dateString;\\\\r\\\\n\\\\t\\\\t},\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.parseListOfEvents = function (events, callback) {\\\\r\\\\n\\\\t\\\\t\\\\tvar parsedEvents = [];\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (var i = 0; i < events.length; i++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar parsedEvent = {};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// get the events start date & time.  Use date if date time is not there\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar event = events[i];\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar startTime = (event.start.dateTime) ? getDateString(event.start.dateTime) : getDateString(event.start.date);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar endTime = (event.end.dateTime) ? getDateString(event.end.dateTime) : getDateString(event.end.date);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar description = (event.description) ? event.description : (event.hasOwnProperty(\\\\\\\"bodyPreview\\\\\\\") ? event.bodyPreview : '');\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvent.name = (event.hasOwnProperty(\\\\\\\"summary\\\\\\\")) ? event.summary : event.subject;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvent.description = description;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvent.startTimeString = startTime;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvent.endTimeString = endTime;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvent.startTime = this.parseISOStringToDate(startTime);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvent.endTime = this.parseISOStringToDate(endTime);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// figure out what category this event falls into\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvent.category = this.getCategoryForEvent(parsedEvent);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// now get the time difference in hours between the start time and the end time\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvent.time = Math.ceil(Math.abs(parsedEvent.endTime - parsedEvent.startTime) / (1000 * 60 * 60));\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// if time is NaN that is problem\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tif (isNaN(parsedEvent.time)) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log(isNan(event));\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// add the parsed event to the list\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tparsedEvents.push(parsedEvent);\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// add all the hours in a category\\\\r\\\\n\\\\t\\\\t\\\\tvar catData = this.collectHoursInCategories(parsedEvents);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tcallback(catData, parsedEvents);\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\treturn Utils;\\\\r\\\\n}, true /* bExport */);\\\",\\n\\t\\t\\\"timebox/services/GoogleChartService.js\\\": \\\"// Author: Andrew Hajj\\\\r\\\\n// Purpose: functions to get calendar info from google\\\\r\\\\n\\\\r\\\\nsap.ui.define('com/metcs633/services/GoogleChartService', [\\\\r\\\\n], function () {\\\\r\\\\n\\\\t'use strict';\\\\r\\\\n\\\\r\\\\n\\\\tvar Utils = {};\\\\r\\\\n\\\\r\\\\n\\\\tUtils.drawChart = function (catData, controller, callback) {\\\\r\\\\n\\\\t\\\\t// Create the data table.\\\\r\\\\n\\\\t\\\\tvar data = new google.visualization.DataTable();\\\\r\\\\n\\\\t\\\\tdata.addColumn('string', 'Event');\\\\r\\\\n\\\\t\\\\tdata.addColumn('number', 'Hours');\\\\r\\\\n\\\\t\\\\tdata.addRows(catData);\\\\r\\\\n\\\\t\\\\t// Set chart options\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tvar width = 800;\\\\r\\\\n\\\\t\\\\tvar height = 800;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tif (sap.ui.Device.system.phone) {\\\\r\\\\n\\\\t\\\\t\\\\twidth = 200;\\\\r\\\\n\\\\t\\\\t\\\\theight = 200;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tvar options = {\\\\r\\\\n\\\\t\\\\t\\\\t'title': 'Hours per Category',\\\\r\\\\n\\\\t\\\\t\\\\t'width': width,\\\\r\\\\n\\\\t\\\\t\\\\t'height': height\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\t\\\\tvar HBoxDomRef = controller.getView().byId('barChartPanel').getDomRef();\\\\r\\\\n\\\\t\\\\t// Instantiate and draw our chart, passing in our HBox.\\\\r\\\\n\\\\t\\\\tvar chart = {};\\\\r\\\\n\\\\t\\\\tif (controller.isColumnChart) {\\\\r\\\\n\\\\t\\\\t\\\\tchart = new google.visualization.ColumnChart(HBoxDomRef);\\\\r\\\\n\\\\t\\\\t} else {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tchart = new google.visualization.PieChart(HBoxDomRef);\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\tgoogle.visualization.events.addListener(chart, 'ready', function () {\\\\r\\\\n\\\\t\\\\t\\\\tgoogle.visualization.events.addListener(chart, 'select', function () {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// grab a few details before redirecting\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar events = controller.parsedEvents;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar pickedEvents = events.filter(e =>\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\te.category === data.getValue(chart.getSelection()[0].row, 0)\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// now we get the filtered events and show it in the table\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tvar listModel = new sap.ui.model.json.JSONModel();\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlistModel.setData(pickedEvents);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller.getView().byId('eventsTable').setModel(listModel);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller._wizard.goToStep(controller.getView().byId(\\\\\\\"showTable\\\\\\\"));\\\\r\\\\n\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t});\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tchart.draw(data, options);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tcallback();\\\\r\\\\n\\\\t\\\\tcontroller._wizard.goToStep(controller.getView().byId(\\\\\\\"showChart\\\\\\\"));\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\treturn Utils;\\\\r\\\\n}, true /* bExport */);\\\",\\n\\t\\t\\\"timebox/services/O365CalendarService.js\\\": \\\"/* eslint-disable no-undef */\\\\r\\\\n// Author: Andrew Hajj\\\\r\\\\n// Purpose: functions to get calendar info from google\\\\r\\\\nsap.ui.define([],\\\\r\\\\n\\\\tfunction () {\\\\r\\\\n\\\\t\\\\t'use strict';\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tvar Utils = {};\\\\r\\\\n\\\\t\\\\tvar oMsalClient = null;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tvar toastOptions = {\\\\r\\\\n\\\\t\\\\t\\\\tduration: 2000,                  // default\\\\r\\\\n\\\\t\\\\t\\\\twidth: \\\\\\\"15em\\\\\\\",                   // default\\\\r\\\\n\\\\t\\\\t\\\\tmy: \\\\\\\"center top\\\\\\\",             // default\\\\r\\\\n\\\\t\\\\t\\\\tat: \\\\\\\"center top\\\\\\\",             // default\\\\r\\\\n\\\\t\\\\t\\\\tof: window,                      // default\\\\r\\\\n\\\\t\\\\t\\\\toffset: \\\\\\\"0 0\\\\\\\",                   // default\\\\r\\\\n\\\\t\\\\t\\\\tcollision: \\\\\\\"fit fit\\\\\\\",            // default\\\\r\\\\n\\\\t\\\\t\\\\tonClose: null,                   // default\\\\r\\\\n\\\\t\\\\t\\\\tautoClose: true,                 // default\\\\r\\\\n\\\\t\\\\t\\\\tanimationTimingFunction: \\\\\\\"ease\\\\\\\", // default\\\\r\\\\n\\\\t\\\\t\\\\tanimationDuration: 2000,         // default\\\\r\\\\n\\\\t\\\\t\\\\tcloseOnBrowserNavigation: true   // default\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tvar APP_ID = 'f43b3bbb-f2aa-4134-9518-e0a190584c6f';\\\\r\\\\n\\\\t\\\\tvar APP_SCOPES = ['Calendars.Read'];\\\\r\\\\n\\\\t\\\\tvar config = {\\\\r\\\\n\\\\t\\\\t\\\\tmsalConfig: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tauth: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tclientId: APP_ID,\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t//redirectUri: \\\\\\\"http://localhost:8000/webapp\\\\\\\", //defaults to application start page\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tpostLogoutRedirectUri: 'http://localhost:8000/webapp'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t},\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcache: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcacheLocation: 'localStorage',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tstoreAuthStateInCookie: true\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t},\\\\r\\\\n\\\\t\\\\t\\\\tgraphBaseEndpoint: 'https://graph.microsoft.com/v1.0/',\\\\r\\\\n\\\\t\\\\t\\\\tscopeConfig: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tscopes: APP_SCOPES\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\t\\\\t// #region Helpers\\\\r\\\\n\\\\t\\\\tfunction handleAuthError(error) {\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log(error);\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tfunction getMSGraphClient() {\\\\r\\\\n\\\\t\\\\t\\\\tif (!oMsalClient) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tif (Msal) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\treturn new Msal.UserAgentApplication(config.msalConfig);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\treturn oMsalClient;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tfunction getStartDate(startDate, endDate) {\\\\r\\\\n\\\\t\\\\t\\\\tvar start = new Date();\\\\r\\\\n\\\\t\\\\t\\\\tvar end = new Date();\\\\r\\\\n\\\\t\\\\t\\\\tif (startDate && endDate) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tstart = new Date(new Date(startDate).setHours(0, 0, 0));\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tend = new Date(new Date(endDate).setHours(0, 0, 0));\\\\r\\\\n\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tend = new Date(new Date().setHours(0, 0, 0));\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tstart = new Date(new Date(2015, 3, 2).setHours(0, 0, 0));\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\treturn { start, end };\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tfunction getTimeDifference(start, end) {\\\\r\\\\n\\\\t\\\\t\\\\treturn (Date.parse(end) - Date.parse(start));\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tfunction set365StatusText(event) {\\\\r\\\\n\\\\t\\\\t\\\\tvar signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\\\r\\\\n\\\\t\\\\t\\\\tif (!signedInO365) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t//event.getView().byId('signButtonO365').setText('Sign In to O365');\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t//event.getView().byId('configLabelO365').setText('Signed Out of O365!');\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tsap.m.MessageToast.show('Signed Out of O365!', toastOptions);\\\\r\\\\n\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t//event.getView().byId('signButtonO365').setText('Sign Out of O365');\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t//event.getView().byId('configLabelO365').setText('Connected to O365!');\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tsap.m.MessageToast.show('Connected to O365!', toastOptions);\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t// #endregion\\\\r\\\\n\\\\t\\\\tUtils.initiateClient = function (event, signout) {\\\\r\\\\n\\\\t\\\\t\\\\tvar oMsalClient = getMSGraphClient();\\\\r\\\\n\\\\t\\\\t\\\\tvar me = this;\\\\r\\\\n\\\\t\\\\t\\\\tif (signout) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\toMsalClient.logout();\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tset365StatusText(event);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\treturn true;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t// check if the user is already signed in\\\\r\\\\n\\\\t\\\\t\\\\tif (!oMsalClient.getAccount()) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\toMsalClient.loginPopup(config.scopeConfig).then(function (res) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tset365StatusText(event);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tme.getCalendars(event.setCalendarDropDownEvents.bind(event));\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\treturn res;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).catch(function (error) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\thandleAuthError(error);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\tset365StatusText(event);\\\\r\\\\n\\\\t\\\\t\\\\treturn true;\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.signIn = function (event) {\\\\r\\\\n\\\\t\\\\t\\\\tthis.initiateClient(event);\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.signOut = function (event) {\\\\r\\\\n\\\\t\\\\t\\\\tthis.initiateClient(event, true);\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t// #region Calendars\\\\r\\\\n\\\\t\\\\tUtils.getCalendars = function (callback) {\\\\r\\\\n\\\\t\\\\t\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// eslint-disable-next-line no-undef\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t$.ajax({\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\theaders: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t},\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\turl: `${config.graphBaseEndpoint}me/calendars`,\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ttype: 'GET'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).then(function (res) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log('getCalendars', res);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcallback(res.value);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\treturn res;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).fail(function (error) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\thandleAuthError(error);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.getCalendarById = function (id) {\\\\r\\\\n\\\\t\\\\t\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// eslint-disable-next-line no-undef\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t$.ajax({\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\theaders: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t},\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\turl: `${config.graphBaseEndpoint}me/calendars/${id}`,\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ttype: 'GET'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).then(function (res) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log('getCalendars', res);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\treturn res;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).fail(function (error) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\thandleAuthError(error);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\t\\\\t// #endregion\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t// #region Categories\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.getCategories = function (startDate, endDate, calendarId = '') {\\\\r\\\\n\\\\t\\\\t\\\\tvar start = new Date();\\\\r\\\\n\\\\t\\\\t\\\\tvar end = new Date();\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// start and end date format 2020-01-31\\\\r\\\\n\\\\t\\\\t\\\\tvar dates = getStartDate(startDate, endDate);\\\\r\\\\n\\\\t\\\\t\\\\tstart = dates.start;\\\\r\\\\n\\\\t\\\\t\\\\tend = dates.end;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log('start date:', start);\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log('end date:', end);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tvar apiUrl = '';\\\\r\\\\n\\\\t\\\\t\\\\tif (calendarId && calendarId.length > 0) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\r\\\\n\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t$.ajax({\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\theaders: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t},\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\turl: `${config.graphBaseEndpoint}${apiUrl}`,\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ttype: 'GET'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).then((categories) => {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log('getCategories', categories);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tvar retCategories = [];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tif (categories && categories.value) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcategories.value.forEach(element => {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tretCategories = retCategories.concat(element.categories);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tcategories = JSON.stringify([...new Set(retCategories)]);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log('getCategories result:', categories);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\treturn categories;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).fail(function (error) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\thandleAuthError(error);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tUtils.getCategoriesTime = function (startDate, endDate, calendarId = '') {\\\\r\\\\n\\\\t\\\\t\\\\tvar start = new Date();\\\\r\\\\n\\\\t\\\\t\\\\tvar end = new Date();\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// start and end date format 2020-01-31\\\\r\\\\n\\\\t\\\\t\\\\tvar dates = getStartDate(startDate, endDate);\\\\r\\\\n\\\\t\\\\t\\\\tstart = dates.start;\\\\r\\\\n\\\\t\\\\t\\\\tend = dates.end;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log('start date:', start);\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log('end date:', end);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tvar apiUrl = '';\\\\r\\\\n\\\\t\\\\t\\\\tif (calendarId && calendarId.length > 0) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\r\\\\n\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t$.ajax({\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\theaders: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t},\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\turl: `${config.graphBaseEndpoint}${apiUrl}`,\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ttype: 'GET'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).then((res) => {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log('getCategoriesTime', res);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tvar catTimeTotals = {};\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tif (res && res.value) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tres.value.forEach(element => {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvar catTimeTotalsCats = element.categories;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t// eslint-disable-next-line max-nested-callbacks\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcatTimeTotalsCats.forEach(cat => {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tif (catTimeTotals[cat]) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvar milliSeconds = parseFloat(catTimeTotals[cat], 10);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tmilliSeconds += getTimeDifference(element.start.dateTime, element.end.dateTime);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcatTimeTotals[cat] = milliSeconds;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcatTimeTotals[cat] = getTimeDifference(element.start.dateTime, element.end.dateTime);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tres = JSON.stringify(catTimeTotals);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log('getCategoriesTime:', res);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\treturn res;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).fail(function (error) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\thandleAuthError(error);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\t\\\\t// #endregion\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t// #region Events\\\\r\\\\n\\\\t\\\\tUtils.getEvents = function (startDate, endDate, calendarId = '', callback, filterToCategory = '') {\\\\r\\\\n\\\\t\\\\t\\\\tvar start = new Date();\\\\r\\\\n\\\\t\\\\t\\\\tvar end = new Date();\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t// start and end date format 2020-01-31\\\\r\\\\n\\\\t\\\\t\\\\tvar dates = getStartDate(startDate, endDate);\\\\r\\\\n\\\\t\\\\t\\\\tstart = dates.start;\\\\r\\\\n\\\\t\\\\t\\\\tend = dates.end;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log('start date:', start);\\\\r\\\\n\\\\t\\\\t\\\\tconsole.log('end date:', end);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tvar apiUrl = '';\\\\r\\\\n\\\\t\\\\t\\\\tif (calendarId && calendarId.length > 0) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\\\r\\\\n\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// first get a count of events\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t// then select all of those events\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t$.ajax({\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\theaders: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t},\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\turl: `${config.graphBaseEndpoint}${apiUrl}&$count=true`,\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ttype: 'GET'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).then(function (res) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t$.ajax({\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\theaders: {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tAuthorization: 'Bearer ' + token.accessToken\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t},\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\turl: `${config.graphBaseEndpoint}${apiUrl}&$top=${res[\\\\\\\"@odata.count\\\\\\\"]}`,\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttype: 'GET'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t}).then(function (res) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tif (filterToCategory && filterToCategory.length > 0) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tres.value = filterToCategory(res, filterToCategory);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tconsole.log('getEvents', res);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcallback(res);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\treturn res;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t}).fail(function (error) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\thandleAuthError(error);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}).fail(function (error) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\thandleAuthError(error);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t});\\\\r\\\\n\\\\t\\\\t};\\\\r\\\\n\\\\t\\\\t// #endregion\\\\r\\\\n\\\\r\\\\n\\\\t\\\\treturn Utils;\\\\r\\\\n\\\\t}, true /* bExport */);\\\\r\\\\n\\\",\\n\\t\\t\\\"timebox/view/App.view.xml\\\": \\\"<mvc:View\\\\r\\\\n\\\\tdisplayBlock=\\\\\\\"true\\\\\\\"\\\\r\\\\n\\\\txmlns=\\\\\\\"sap.m\\\\\\\"\\\\r\\\\n\\\\txmlns:mvc=\\\\\\\"sap.ui.core.mvc\\\\\\\"><Shell><App id=\\\\\\\"app\\\\\\\"/></Shell></mvc:View>\\\",\\n\\t\\t\\\"timebox/view/Home.view.xml\\\": \\\"<mvc:View\\\\r\\\\n\\\\tcontrollerName=\\\\\\\"com.metcs633.controller.Home\\\\\\\"\\\\r\\\\n\\\\tdisplayBlock=\\\\\\\"true\\\\\\\"\\\\r\\\\n\\\\txmlns=\\\\\\\"sap.m\\\\\\\"\\\\r\\\\n\\\\txmlns:mvc=\\\\\\\"sap.ui.core.mvc\\\\\\\"\\\\r\\\\n\\\\txmlns:l=\\\\\\\"sap.ui.layout\\\\\\\"\\\\t\\\\t\\\\r\\\\n\\\\txmlns:core=\\\\\\\"sap.ui.core\\\\\\\"><Page\\\\r\\\\n\\\\t\\\\t\\\\tid=\\\\\\\"page\\\\\\\"><headerContent><Image src=\\\\\\\"Images/logo_transparent.png\\\\\\\" activeSrc=\\\\\\\"/webapp\\\\\\\"></Image></headerContent><content><Wizard id=\\\\\\\"CreateProductWizard\\\\\\\" class=\\\\\\\"sapUiResponsivePadding--header sapUiResponsivePadding--content\\\\\\\"><WizardStep id=\\\\\\\"googleOrOutlookStep\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttitle=\\\\\\\"Choose Source\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcomplete=\\\\\\\"chooseStepCompleted\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvalidated=\\\\\\\"true\\\\\\\"><Text class=\\\\\\\"sapUiSmallMarginBottom\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"Welcome to the Timebox Tool! The first step is to choose Google or o365.  Click one below to continue.\\\\\\\"/><HBox\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\talignItems=\\\\\\\"Center\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tjustifyContent=\\\\\\\"Center\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\twidth=\\\\\\\"100%\\\\\\\"><SegmentedButton\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\twidth=\\\\\\\"320px\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tselectionChange=\\\\\\\"setCalendarTypeFromButton\\\\\\\"><items><SegmentedButtonItem icon=\\\\\\\"sap-icon://appointment\\\\\\\" text=\\\\\\\"Google\\\\\\\"/><SegmentedButtonItem icon=\\\\\\\"sap-icon://appointment-2\\\\\\\" text=\\\\\\\"o365\\\\\\\"/></items></SegmentedButton></HBox></WizardStep><WizardStep id=\\\\\\\"signInAndChooseCalendarStep\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvalidated=\\\\\\\"false\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttitle=\\\\\\\"Sign and Choose Calendar\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcomplete=\\\\\\\"goButton\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tactivate=\\\\\\\"signInAndChoosseValidation\\\\\\\"><VBox><Text class=\\\\\\\"sapUiSmallMarginBottom\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"Next, login, choose a calendar and select a date range\\\\\\\"/><Button \\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"signButton\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"Sign in\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tenabled=\\\\\\\"false\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tbusyIndicatorDelay=\\\\\\\"0\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tbusy=\\\\\\\"true\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpress=\\\\\\\"onSignIn\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tclass=\\\\\\\"sapUiSmallMarginEnd\\\\\\\"></Button></VBox><Panel\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"calendarSelectionPanel\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvisible=\\\\\\\"false\\\\\\\"><VBox class = \\\\\\\"sapUiSmallMarginTopBottom\\\\\\\"><Label text=\\\\\\\"Choose a Calendar: \\\\\\\" labelFor=\\\\\\\"calendarComboBox\\\\\\\"/><ComboBox\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tplaceholder=\\\\\\\"Choose a Calendar\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"calendarComboBox\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tbusyIndicatorDelay=\\\\\\\"0\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\titems=\\\\\\\"{\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpath: '/'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t}\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tclass=\\\\\\\"sapUiTinyMarginEnd\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trequired=\\\\\\\"true\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tselectionChange=\\\\\\\"calendarSelectionChange\\\\\\\"><core:Item key=\\\\\\\"{id}\\\\\\\" text=\\\\\\\"{name}\\\\\\\" /></ComboBox><HBox><VBox class = \\\\\\\"sapUiSmallMarginEnd\\\\\\\"><Label text=\\\\\\\"Choose a start date: \\\\\\\" labelFor=\\\\\\\"DTP1\\\\\\\"/><DatePicker\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"DTP1\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tplaceholder=\\\\\\\"Enter Date ...\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tchange=\\\\\\\"handleStartDateChange\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trequired=\\\\\\\"true\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tclass=\\\\\\\"sapUiSmallMarginBottom\\\\\\\"/></VBox><VBox><Label text=\\\\\\\"Choose an end date: \\\\\\\" labelFor=\\\\\\\"DTP2\\\\\\\"/><DatePicker\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"DTP2\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tplaceholder=\\\\\\\"Enter Date ...\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\trequired=\\\\\\\"true\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tchange=\\\\\\\"handleEndDateChange\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tclass=\\\\\\\"sapUiSmallMarginBottom\\\\\\\"/></VBox></HBox><Button\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"goButton\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"Get Events\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvisible=\\\\\\\"false\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpress=\\\\\\\"goButton\\\\\\\"></Button></VBox></Panel></WizardStep><WizardStep id=\\\\\\\"showChart\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tactivate=\\\\\\\"pricingActivate\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tcomplete=\\\\\\\"pricingComplete\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvalidated=\\\\\\\"false\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttitle=\\\\\\\"Chart\\\\\\\"><Panel><Button\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"changeChartType\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"Change Chart\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpress=\\\\\\\"changeChart\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvisible=\\\\\\\"false\\\\\\\"></Button><FlexBox\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\talignItems=\\\\\\\"Center\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tjustifyContent=\\\\\\\"Center\\\\\\\"><items><Panel\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"barChartPanel\\\\\\\"></Panel></items></FlexBox></Panel></WizardStep><WizardStep id=\\\\\\\"showTable\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvalidated=\\\\\\\"false\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tshowNextButton=\\\\\\\"false\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttitle=\\\\\\\"Events\\\\\\\"><Table\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tid=\\\\\\\"eventsTable\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tinset=\\\\\\\"false\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tvisible=\\\\\\\"false\\\\\\\"\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\titems=\\\\\\\"{\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpath: '/',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tsorter: [{\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpath: 'category'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t}, \\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpath: 'name'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t}, \\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t{\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tpath: 'keyword'\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t}]\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t}\\\\\\\"><columns><Column\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\twidth=\\\\\\\"12em\\\\\\\"><Text text=\\\\\\\"Event\\\\\\\" /></Column><Column\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tdemandPopin=\\\\\\\"true\\\\\\\"><Text text=\\\\\\\"Category\\\\\\\" /></Column><Column\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tdemandPopin=\\\\\\\"true\\\\\\\"><Text text=\\\\\\\"Keyword\\\\\\\" /></Column><Column\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tdemandPopin=\\\\\\\"true\\\\\\\"><Text text=\\\\\\\"Date\\\\\\\" /></Column><Column\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\tdemandPopin=\\\\\\\"true\\\\\\\"><Text text=\\\\\\\"Hours\\\\\\\" /></Column></columns><items><ColumnListItem><cells><Text\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"{name}\\\\\\\"/><Text\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"{category}\\\\\\\" /><Text\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"{keyword}\\\\\\\" /><Text\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"{startTimeString}\\\\\\\" /><Text\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\ttext=\\\\\\\"{time}\\\\\\\" /></cells></ColumnListItem></items></Table></WizardStep></Wizard></content></Page></mvc:View>\\\"\\n\\t}\\n});\",\n\t\t\"timebox/Component.js\": \"sap.ui.define([\\r\\n\\t'sap/ui/core/UIComponent',\\r\\n\\t'sap/ui/Device',\\r\\n\\t'./model/models'\\r\\n], function (UIComponent, Device, models) {\\r\\n\\t'use strict';\\r\\n\\r\\n\\treturn UIComponent.extend('com.metcs633.Component', {\\r\\n\\t\\tmetadata: {\\r\\n\\t\\t\\tmanifest: 'json'\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\\r\\n\\t\\t * @public\\r\\n\\t\\t * @override\\r\\n\\t\\t */\\r\\n\\t\\tinit: function () {\\r\\n\\t\\t\\t// call the base component's init function\\r\\n\\t\\t\\tUIComponent.prototype.init.apply(this, arguments);\\r\\n\\r\\n\\t\\t\\t// set the device model\\r\\n\\t\\t\\tthis.setModel(models.createDeviceModel(), 'device');\\r\\n\\r\\n\\t\\t\\t// create the views based on the url/hash\\r\\n\\t\\t\\tthis.getRouter().initialize();\\r\\n\\t\\t}\\r\\n\\t});\\r\\n});\",\n\t\t\"timebox/controller/App.controller.js\": \"sap.ui.define([\\r\\n\\t'sap/ui/core/mvc/Controller',\\r\\n\\t'com/metcs633/model/formatter'\\r\\n], function (Controller, formatter) {\\r\\n\\t'use strict';\\r\\n\\r\\n\\treturn Controller.extend('com.metcs633.controller.App', {\\r\\n\\r\\n\\t\\tformatter: formatter,\\r\\n\\r\\n\\t\\tonInit: function () {\\r\\n\\r\\n\\t\\t}\\r\\n\\t});\\r\\n});\",\n\t\t\"timebox/controller/Home.controller.js\": \"//Authors: Andrew Hajj\\r\\n\\r\\nsap.ui.define([\\r\\n  'sap/ui/core/mvc/Controller',\\r\\n  '../model/formatter',\\r\\n  '../services/GoogleCalendarService',\\r\\n  '../services/GoogleChartService',\\r\\n  '../services/O365CalendarService'\\r\\n], function (Controller, formatter, GoogleCalendarService, GoogleChartService, O365CalendarService) {\\r\\n  'use strict';\\r\\n\\r\\n  var signedInGoogle = false;\\r\\n  var signedInO365 = false;\\r\\n  var isGoogle = true;\\r\\n  var toastOptions = {\\r\\n    duration: 2000,                  // default\\r\\n    width: \\\"15em\\\",                   // default\\r\\n    my: \\\"center top\\\",             // default\\r\\n    at: \\\"center top\\\",             // default\\r\\n    of: window,                      // default\\r\\n    offset: \\\"0 0\\\",                   // default\\r\\n    collision: \\\"fit fit\\\",            // default\\r\\n    onClose: null,                   // default\\r\\n    autoClose: true,                 // default\\r\\n    animationTimingFunction: \\\"ease\\\", // default\\r\\n    animationDuration: 2000,         // default\\r\\n    closeOnBrowserNavigation: true   // default\\r\\n  };\\r\\n\\r\\n\\r\\n  return Controller.extend('com.metcs633.controller.App', {\\r\\n\\r\\n    formatter: formatter,\\r\\n    GoogleCalendarService: GoogleCalendarService,\\r\\n\\r\\n    setCalendarTypeFromButton: function (event) {\\r\\n      isGoogle = (event.getParameters().item.getText() === \\\"Google\\\") ? true : false;\\r\\n\\r\\n      // if it goes in here that means we need to reset all the things\\r\\n      if (this._wizard.getProgress() > 1) {\\r\\n        var calendarDropDown = this.getView().byId('calendarComboBox');\\r\\n        var dtpStart = this.getView().byId('DTP1');\\r\\n        var dtpEnd = this.getView().byId('DTP2');\\r\\n        calendarDropDown.setSelectedItem(\\\"\\\");\\r\\n        dtpStart.setValue(\\\"\\\");\\r\\n        dtpEnd.setValue(\\\"\\\");\\r\\n        this.getView().byId('calendarSelectionPanel').setVisible(false);\\r\\n        this._wizard.discardProgress(this._wizard.getSteps()[0]);\\r\\n      }\\r\\n    },\\r\\n\\r\\n    set365StatusText: function () {\\r\\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\r\\n      if (!signedInO365) {\\r\\n        //this.getView().byId('signButton').setText('Sign In to O365');\\r\\n        //this.getView().byId('configLabelO365').setText('Signed Out of O365!');\\r\\n        sap.m.MessageToast.show('Signed Out of O365!', toastOptions);\\r\\n      } else {\\r\\n        //this.getView().byId('signButton').setText('Sign Out of O365');\\r\\n        //this.getView().byId('configLabelO365').setText('Connected to O365!');\\r\\n        sap.m.MessageToast.show('Connected to O365!', toastOptions);\\r\\n      }\\r\\n    },\\r\\n\\r\\n    // Connect to Google api by default to grab the calendar\\r\\n    onInit: function () {\\r\\n      var configLabel = this.getView().byId('configLabel');\\r\\n      sap.m.MessageToast.show('Connecting to Google...', toastOptions);\\r\\n      //configLabel.setText('Connecting to Google...');\\r\\n      GoogleCalendarService.connectToGoogle(this);\\r\\n\\r\\n      //Connect to O365\\r\\n      var configLabelO365 = this.getView().byId('configLabelO365');\\r\\n      this.set365StatusText();\\r\\n      this._wizard = this.getView().byId(\\\"CreateProductWizard\\\");\\r\\n\\r\\n    },\\r\\n\\r\\n    afterLogin: function () {\\r\\n      this.getView().byId('signButton').setEnabled(true);\\r\\n      //this.getView().byId('configLabel').setText('Connected to Google!');\\r\\n      sap.m.MessageToast.show('Connected to Google!', toastOptions);\\r\\n    },\\r\\n\\r\\n    onSignIn: function (event) {\\r\\n      if (isGoogle) {\\r\\n        this.onSignInOutGooglePress();\\r\\n      }\\r\\n      else {\\r\\n        this.onSignInOutO365Press();\\r\\n      }\\r\\n    },\\r\\n\\r\\n    onSignInOutGooglePress: function (event) {\\r\\n      if (signedInGoogle) {\\r\\n        GoogleCalendarService.signOut(this);\\r\\n      } else {   // first turn on the busy indicator\\r\\n        this.getView().byId('calendarComboBox').setBusy(true);\\r\\n        GoogleCalendarService.signIn(this);\\r\\n      }\\r\\n      signedInGoogle = !signedInGoogle;\\r\\n    },\\r\\n\\r\\n    onSignInOutO365Press: function (event) {\\r\\n      if (signedInO365) {\\r\\n        O365CalendarService.signOut(this);\\r\\n        this.getView().byId('signButton').setText('Sign In to O365');\\r\\n        this.set365StatusText();\\r\\n      } else {\\r\\n        O365CalendarService.signIn(this);\\r\\n        this.set365StatusText();\\r\\n      }\\r\\n    },\\r\\n    chooseStepCompleted: function (event) {\\r\\n      // We don't keep the cookies for Google, but we do for outlook\\r\\n      // if this if coming from step 1 then check if the user is signed in\\r\\n      // if so, go right to getting the calendars\\r\\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\r\\n      if (!isGoogle && signedInO365) {\\r\\n        this.set365StatusText();\\r\\n        this.getView().byId('signButton').setText('Sign Out of O365');\\r\\n        O365CalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\\r\\n      }\\r\\n      else if (!isGoogle) {\\r\\n        this.getView().byId('signButton').setText('Sign In to O365');\\r\\n      }\\r\\n      else if (!signedInGoogle) {\\r\\n        // clear the calendar selection\\r\\n        // set the button to login\\r\\n        this.getView().byId('signButton').setText('Sign In to Google');\\r\\n      }\\r\\n      else {\\r\\n\\r\\n        this.getView().byId('signButton').setText('Sign Out of Google');\\r\\n        GoogleCalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\\r\\n        this.getView().byId('calendarSelectionPanel').setVisible(true);\\r\\n      }\\r\\n\\r\\n    },\\r\\n\\r\\n    setCalendarDropDownEvents: function (events) {\\r\\n\\r\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\r\\n      var statusLabel = this.getView().byId('configLabel');\\r\\n      // add the list of parsed calendars to the dropdown for user to select\\r\\n      var listModel = new sap.ui.model.json.JSONModel();\\r\\n\\r\\n\\r\\n      listModel.setData(events);\\r\\n      calendarDropDown.setModel(listModel);\\r\\n      this.getView().byId('calendarSelectionPanel').setVisible(true);\\r\\n      calendarDropDown.setBusy(false);\\r\\n      // statusLabel.setText('Loaded calendars!');\\r\\n      sap.m.MessageToast.show('Loaded calendars!', toastOptions);\\r\\n    },\\r\\n    onGetCalendarsPress: function (event) {\\r\\n\\r\\n    },\\r\\n\\r\\n    signInAndChoosseValidation: function (event) {\\r\\n      // only enable the Go button if\\r\\n      // A calendar is selected, a start date and an end date are selected\\r\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\r\\n      var dtpStart = this.getView().byId('DTP1');\\r\\n      var dtpEnd = this.getView().byId('DTP2');\\r\\n\\r\\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\\r\\n        return true;\\r\\n      }\\r\\n      return false;\\r\\n\\r\\n    },\\r\\n\\r\\n    validateCalendarStartEndDate: function (event) {\\r\\n      // only enable the Go button if\\r\\n      // A calendar is selected, a start date and an end date are selected\\r\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\r\\n      var dtpStart = this.getView().byId('DTP1');\\r\\n      var dtpEnd = this.getView().byId('DTP2');\\r\\n\\r\\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\\r\\n        this._wizard.validateStep(this.byId(\\\"signInAndChooseCalendarStep\\\"));\\r\\n        //this.getView().byId('goButton').setEnabled(true);\\r\\n      } else {\\r\\n        this._wizard.invalidateStep(this.byId(\\\"signInAndChooseCalendarStep\\\"));\\r\\n        this._wizard.goToStep(this.byId(\\\"signInAndChooseCalendarStep\\\"));\\r\\n      }\\r\\n\\r\\n    },\\r\\n\\r\\n    goButton: function (event) {\\r\\n      // freeze the view so the user knows something is happening\\r\\n      // sap.ui.core.\\r\\n      this.getView().byId(\\\"page\\\").setBusy(true);\\r\\n      // figure out the min and max time in order to query google calendar\\r\\n      // this button doesn't get enabled until there is data in all 3 prompts (calendar, start & end date)\\r\\n      var calendarDropDown = this.getView().byId('calendarComboBox');\\r\\n      var dtpStart = this.getView().byId('DTP1');\\r\\n      var dtpEnd = this.getView().byId('DTP2');\\r\\n\\r\\n      // First, we need the selected calendar\\r\\n      var selectedCalendar = calendarDropDown.getSelectedItem();\\r\\n\\r\\n      // then we need the start date time\\r\\n      var startTime = dtpStart.getDateValue();\\r\\n\\r\\n      // then we need the end date date\\r\\n      var endTime = dtpEnd.getDateValue();\\r\\n      var me = this;\\r\\n\\r\\n      if (isGoogle) {\\r\\n        GoogleCalendarService.getListOfEventsFromCalendarInDateRange(selectedCalendar, startTime, endTime, function (response) {\\r\\n          var events = response.result.items;\\r\\n          //console.log(events);\\r\\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\\r\\n          me.getView().byId(\\\"page\\\").setBusy(false);\\r\\n        });\\r\\n      }\\r\\n      else {\\r\\n        O365CalendarService.getEvents(startTime, endTime, selectedCalendar, function (response) {\\r\\n          var events = response.value;\\r\\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\\r\\n          me.getView().byId(\\\"page\\\").setBusy(false);\\r\\n          // GoogleCalendarService.parseListOfEvents(events, me);\\r\\n        });\\r\\n      }\\r\\n      // if (!this.getView().byId(\\\"goButton\\\").getVisible())\\r\\n      // {\\r\\n      this.getView().byId('changeChartType').setVisible(true);\\r\\n      this.getView().byId(\\\"goButton\\\").setVisible(true);\\r\\n      this.byId(\\\"showChart\\\").fireComplete();\\r\\n      // }\\r\\n      this._wizard.goToStep(this.getView().byId(\\\"showChart\\\"));\\r\\n\\r\\n    },\\r\\n\\r\\n    setChartAfterParsingEvents: function (categorizedData, parsedEvents) {\\r\\n      // set the data back into the conteroller so it's retrievable after\\r\\n      this.chartData = categorizedData;\\r\\n      this.parsedEvents = parsedEvents;\\r\\n      this.isColumnChart = (this.hasOwnProperty('isColumnChart')) ? !(this.isColumnChart) : true;\\r\\n      var me = this;\\r\\n      GoogleChartService.drawChart(categorizedData, me, function () {\\r\\n        // fill in the table\\r\\n        var listModel = new sap.ui.model.json.JSONModel();\\r\\n        listModel.setData(parsedEvents);\\r\\n        me.getView().byId('eventsTable').setModel(listModel);\\r\\n        me.getView().byId('eventsTable').setVisible(true);\\r\\n        // me.getView().byId('configLabel').setText('Analyzed time!  Scroll down to see a visual representation');\\r\\n        me.isColumnChart = !(me.isColumnChart);\\r\\n      });\\r\\n    },\\r\\n\\r\\n    changeChart: function (event) {\\r\\n      var me = this;\\r\\n      GoogleChartService.drawChart(this.chartData, this, function () {\\r\\n        me.isColumnChart = !(me.isColumnChart);\\r\\n      });\\r\\n    },\\r\\n\\r\\n    calendarSelectionChange: function (event) {\\r\\n      this.validateCalendarStartEndDate();\\r\\n      // acknowledge the selection change and update the status accordingly\\r\\n      //this.getView().byId('configLabel').setText(\\\"Calendar '\\\" + event.getParameters('selectedItem').selectedItem.getText() + \\\"' loaded.\\\");\\r\\n      sap.m.MessageToast.show(\\\"Calendar '\\\" + event.getParameters('selectedItem').selectedItem.getText() + \\\"' loaded.\\\", toastOptions);\\r\\n    },\\r\\n\\r\\n    handleStartDateChange: function (event) {\\r\\n\\r\\n      this.validateCalendarStartEndDate();\\r\\n    },\\r\\n\\r\\n    handleEndDateChange: function (event) {\\r\\n\\r\\n      this.validateCalendarStartEndDate();\\r\\n    }\\r\\n\\r\\n  });\\r\\n});\",\n\t\t\"timebox/model/formatter.js\": \"sap.ui.define([], function () {\\r\\n\\t'use strict';\\r\\n\\treturn {\\r\\n\\r\\n\\t};\\r\\n});\",\n\t\t\"timebox/model/models.js\": \"sap.ui.define([\\r\\n\\t'sap/ui/model/json/JSONModel',\\r\\n\\t'sap/ui/Device'\\r\\n], function (JSONModel, Device) {\\r\\n\\t'use strict';\\r\\n\\r\\n\\treturn {\\r\\n\\r\\n\\t\\tcreateDeviceModel: function () {\\r\\n\\t\\t\\tvar oModel = new JSONModel(Device);\\r\\n\\t\\t\\toModel.setDefaultBindingMode('OneWay');\\r\\n\\t\\t\\treturn oModel;\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n});\",\n\t\t\"timebox/services/GoogleCalendarService.js\": \"// Author: Andrew Hajj\\r\\n// Purpose: functions to get calendar info from google\\r\\n\\r\\nsap.ui.define('com/metcs633/services/GoogleCalendarService', [\\r\\n\\t'../services/GoogleChartService'\\r\\n], function (GoogleChartService) {\\r\\n\\t'use strict';\\r\\n\\r\\n\\tvar Utils = {};\\r\\n\\r\\n\\tvar toastOptions = {\\r\\n\\t\\tduration: 2000,                  // default\\r\\n\\t\\twidth: \\\"15em\\\",                   // default\\r\\n\\t\\tmy: \\\"center top\\\",             // default\\r\\n\\t\\tat: \\\"center top\\\",             // default\\r\\n\\t\\tof: window,                      // default\\r\\n\\t\\toffset: \\\"0 0\\\",                   // default\\r\\n\\t\\tcollision: \\\"fit fit\\\",            // default\\r\\n\\t\\tonClose: null,                   // default\\r\\n\\t\\tautoClose: true,                 // default\\r\\n\\t\\tanimationTimingFunction: \\\"ease\\\", // default\\r\\n\\t\\tanimationDuration: 3000,         // default\\r\\n\\t\\tcloseOnBrowserNavigation: true   // default\\r\\n\\t};\\r\\n\\r\\n\\t// Client ID from the Developer Console\\r\\n\\tvar CLIENT_ID = '782211928709-49gkv11kmh5mji6m79rs9df57ba3u6pv.apps.googleusercontent.com';\\r\\n\\r\\n\\t// Array of API discovery doc URLs for APIs used by the quickstart\\r\\n\\tvar DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\\r\\n\\r\\n\\t// Authorization scopes required by the API; multiple scopes can be\\r\\n\\t// included, separated by spaces.\\r\\n\\tvar SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';\\r\\n\\r\\n\\t// Can put into a db at a later date.\\r\\n\\tvar eventCategories = {\\r\\n\\t\\t'Recreation': [\\r\\n\\t\\t\\t'painting', 'art workshop', 'sketching workshop', 'drawing workshop', 'reading', 'newspaper', 'book club', 'camping', 'cinema', 'movies', 'concert', 'gig', 'concerts', 'recital', 'gigs', 'piano', 'singing', 'music', 'choir', 'flute', 'violin', 'orchestra', 'oboe', 'clarinet', 'saxophone', 'cornett', 'trumpet', 'contrabass', 'cello', 'trombone', 'tuba', 'music', 'ensemble', 'string quartett', 'guitar', 'classical', 'choir', 'massage', 'backrub', 'massages', 'manicure', 'pedicure', 'manicures', 'pedicures', 'spa'\\r\\n\\t\\t],\\r\\n\\t\\t'Sports': [\\r\\n\\t\\t\\t'badminton', 'yoga', 'basketball', 'baseball', 'billiard', 'bowling', 'bicycle', 'cycling', 'bike', 'bicycles', 'bikes', 'biking', 'dance', 'dancing', 'dances', 'golf', 'hiking', 'hike', 'hikes', 'kayaking', 'ping pong', 'table tennis', 'ping-pong', 'pingpong', 'jog', 'jogging', 'running', 'jogs', 'runs', 'sail', 'sailing', 'boat cruise', 'sailboat', 'skiing', 'ski', 'skis', 'snowboarding', 'snowshoeing', 'snow shoe', 'snow boarding', 'soccer', 'swim', 'swimming', 'swims', 'tennis', 'going for a walk', 'walking', 'sport'\\r\\n\\t\\t],\\r\\n\\t\\t'Gym': [\\r\\n\\t\\t\\t'gym', 'workout', 'workouts'\\r\\n\\t\\t],\\r\\n\\t\\t'Food': [\\r\\n\\t\\t\\t'bbq', 'barbecue', 'barbeque', 'breakfast', 'breakfasts', 'brunch', 'brunches', 'coffee', 'coffees', 'dinner', 'dinners', 'restaurant', 'restaurants', 'family meal', 'cocktail', 'drinks', 'cocktails', 'lunch', 'lunches', 'luncheon', 'cookout'\\r\\n\\t\\t],\\r\\n\\t\\t'Appointments': [\\r\\n\\t\\t\\t'mechaninc', 'oil change', 'car service', 'service', 'dentist', 'dentistry', 'dental', 'graduation', 'haircut', 'hair', 'wedding', 'repair', 'handyman', 'electrician', 'plumber', 'DIY'\\r\\n\\t\\t],\\r\\n\\t\\t'Work': [\\r\\n\\t\\t\\t'deadline', 'meeting', 'office', 'work'\\r\\n\\t\\t],\\r\\n\\t\\t'Social': [\\r\\n\\t\\t\\t'call', 'talk', 'meet', 'catch up', 'together'\\r\\n\\t\\t],\\r\\n\\t\\t'Doctors': [\\r\\n\\t\\t\\t'doctor', 'dr.', 'vision', 'therapy', 'heal', 'med'\\r\\n\\t\\t],\\r\\n\\t\\t'School': [\\r\\n\\t\\t\\t'class', 'test', 'quiz', 'homework', 'project', 'exam'\\r\\n\\t\\t],\\r\\n\\t\\t'Travel': [\\r\\n\\t\\t\\t'roadtrip', 'drive', 'commute', 'flight', 'fly', 'airplane', 'airport', 'hotel', 'motel', 'resort', 'stay', 'vacation', 'plane', 'boat', 'sail', 'stay'\\r\\n\\t\\t],\\r\\n\\t\\t'Chores': [\\r\\n\\t\\t\\t'cleaning', 'clean', 'tidy', 'vacuum'\\r\\n\\t\\t]\\r\\n\\t};\\r\\n\\r\\n\\tfunction getDateString(dateIn) {\\r\\n\\t\\tdateIn = new Date(dateIn);\\r\\n\\t\\tvar dateString =\\r\\n\\t\\t\\tdateIn.getFullYear() + \\\"/\\\" +\\r\\n\\t\\t\\t(\\\"0\\\" + (dateIn.getMonth() + 1)).slice(-2) + \\\"/\\\" +\\r\\n\\t\\t\\t(\\\"0\\\" + dateIn.getDate()).slice(-2) + \\\" \\\" +\\r\\n\\t\\t\\t(\\\"0\\\" + dateIn.getHours()).slice(-2) + \\\":\\\" +\\r\\n\\t\\t\\t(\\\"0\\\" + dateIn.getMinutes()).slice(-2) + \\\":\\\" +\\r\\n\\t\\t\\t(\\\"0\\\" + dateIn.getSeconds()).slice(-2);\\r\\n\\t\\treturn dateString;\\r\\n\\t};\\r\\n\\r\\n\\t// Function to authenticate the user and choose the Google Account\\r\\n\\tUtils.signIn = function (event) {\\r\\n\\t\\tgapi.auth2.getAuthInstance().signIn();\\r\\n\\t\\tevent.getView().byId('signButton').setText('Sign Out of Google');\\r\\n\\t\\t//event.getView().byId('configLabel').setText('Connected to Google!');\\r\\n\\t\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\r\\n\\t\\t// get the list of calendars and pass in the combobox so it can filled\\t\\t// first turn on the busy indicator\\r\\n\\r\\n\\t\\tthis.getCalendars(event.setCalendarDropDownEvents.bind(event));\\r\\n\\t};\\r\\n\\r\\n\\t// Function to signout of Google\\r\\n\\tUtils.signOut = function (event) {\\r\\n\\t\\tgapi.auth2.getAuthInstance().signOut();\\r\\n\\t\\tevent.getView().byId('calendarComboBox').setEnabled(false);\\r\\n\\t\\tevent.getView().byId('signButton').setText('Sign Into Google');\\r\\n\\t\\t//event.getView().byId('configLabel').setText('Connected to Google!');\\r\\n\\t\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\r\\n\\t};\\r\\n\\r\\n\\t// Function to connect to Google Calendars\\r\\n\\t// This gets called on startup\\r\\n\\tUtils.connectToGoogle = function (callback) {\\r\\n\\t\\tgapi.load('client:auth2', this.initiateClient(callback));\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t// Initiate the client.\\r\\n\\t// This gives the client access to Google Calendar\\r\\n\\t// The scope is only set to read \\r\\n\\tUtils.initiateClient = function (controller) {\\r\\n\\r\\n\\t\\tvar me = this;\\r\\n\\r\\n\\t\\tgapi.client.init({\\r\\n\\t\\t\\tclientId: CLIENT_ID,\\r\\n\\t\\t\\tdiscoveryDocs: DISCOVERY_DOCS,\\r\\n\\t\\t\\tscope: SCOPES\\r\\n\\t\\t}).then(function () {\\r\\n\\t\\t\\t// Listen for sign-in state changes.\\r\\n\\t\\t\\tgapi.auth2.getAuthInstance().isSignedIn.listen(me.setItemsAfterLogin(controller));\\r\\n\\r\\n\\r\\n\\t\\t}, function (error) {\\r\\n\\t\\t\\tconsole.log(JSON.stringify(error, null, 2));\\r\\n\\t\\t});\\r\\n\\t};\\r\\n\\r\\n\\tUtils.setItemsAfterLogin = function (controller) {\\r\\n\\t\\t//controller.getView().byId('configLabel').setText('Connected to Google!');\\r\\n\\t\\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\\r\\n\\r\\n\\t\\tcontroller.getView().byId('signButton').setEnabled(true);\\r\\n\\t\\tcontroller.getView().byId('signButton').setBusy(false);\\r\\n\\t};\\r\\n\\r\\n\\t// Get the list of Calendars\\r\\n\\tUtils.getCalendars = function (callback) {\\r\\n\\r\\n\\t\\t// initialize the list of parsed calendar data\\r\\n\\t\\tvar parsedList = [];\\r\\n\\r\\n\\t\\tvar listOfCalendars = gapi.client.calendar.calendarList.list().then(function (response) {\\r\\n\\t\\t\\tconsole.log(response);\\r\\n\\r\\n\\t\\t\\t// now get the list of calendars from the response\\r\\n\\t\\t\\tvar list = response.result.items;\\r\\n\\r\\n\\t\\t\\t// now parse it in the format that we want...\\r\\n\\t\\t\\tfor (var i = 0; i < list.length; i++) {\\r\\n\\t\\t\\t\\tvar curCalObj = list[i];\\r\\n\\t\\t\\t\\tvar curCalParsed = {};\\r\\n\\r\\n\\t\\t\\t\\t// summary in the map is the Calendar name\\r\\n\\t\\t\\t\\tcurCalParsed.name = curCalObj.hasOwnProperty('summary') ? curCalObj.summary : 'Undefined';\\r\\n\\r\\n\\t\\t\\t\\t// get the id\\r\\n\\t\\t\\t\\tcurCalParsed.id = curCalObj.hasOwnProperty('id') ? curCalObj.id : '';\\r\\n\\r\\n\\t\\t\\t\\t// add it to the list of possible calendars\\r\\n\\t\\t\\t\\tparsedList.push(curCalParsed);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// add the list of parsed calendars to the dropdown for user to select\\r\\n\\t\\t\\tvar listModel = new sap.ui.model.json.JSONModel();\\r\\n\\t\\t\\tcallback(parsedList);\\r\\n\\r\\n\\t\\t});\\r\\n\\t\\tconsole.log(listOfCalendars);\\r\\n\\t};\\r\\n\\r\\n\\t// eslint-disable-next-line no-unused-expressions\\r\\n\\tUtils.getListOfEventsFromCalendarInDateRange = function (calendar, startDate, endDate, callback) {\\r\\n\\r\\n\\t\\t// the calendar key is what Gooogle Calendar API needs\\r\\n\\t\\tvar calendarKey = calendar.getKey();\\r\\n\\t\\tvar startDateString = startDate.toISOString();\\r\\n\\t\\tvar endDateString = endDate.toISOString();\\r\\n\\r\\n\\t\\tvar me = this;\\r\\n\\r\\n\\t\\t// get the list of events in the calendar\\r\\n\\t\\tgapi.client.calendar.events.list({\\r\\n\\t\\t\\t'calendarId': calendarKey,\\r\\n\\t\\t\\t'timeMin': startDateString,\\r\\n\\t\\t\\t'timeMax': endDateString,\\r\\n\\t\\t\\t'showDeleted': false,\\r\\n\\t\\t\\t'singleEvents': true,\\r\\n\\t\\t\\t'orderBy': 'startTime'\\r\\n\\t\\t}).then(callback);\\r\\n\\r\\n\\t},\\r\\n\\r\\n\\t\\tUtils.parseISOStringToDate = function (string) {\\r\\n\\t\\t\\tvar b = string.split(/\\\\D+/);\\r\\n\\r\\n\\t\\t\\t// handle the parsing for dates\\r\\n\\t\\t\\tif (b.length === 3) {\\r\\n\\t\\t\\t\\treturn new Date(Date.UTC(b[0], --b[1], b[2]));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// handle the parsing for datetimes\\r\\n\\r\\n\\t\\t\\treturn new Date(Date.UTC(b[0], --b[1], b[2], b[3], b[4], b[5], b[6]));\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tUtils.getCategoryForEvent = function (event) {\\r\\n\\r\\n\\t\\t\\t// loop through each of the event keys in the categories\\r\\n\\t\\t\\tvar keys = Object.getOwnPropertyNames(eventCategories);\\r\\n\\t\\t\\tfor (var k = 0; k < keys.length; k++) {\\r\\n\\t\\t\\t\\tvar key = keys[k];\\r\\n\\t\\t\\t\\t// now check all keywords in the event name to see if there is a match\\r\\n\\t\\t\\t\\tif (eventCategories[key].some(function (keyword, index) {\\r\\n\\t\\t\\t\\t\\tevent.keyword = (event.name.toLowerCase()).includes(keyword.toLowerCase()) ? keyword.toLowerCase() : '';\\r\\n\\t\\t\\t\\t\\treturn (event.name.toLowerCase()).includes(keyword.toLowerCase());\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t)) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.log('Found ' + event.name + ' paired with ' + key + ' because of keyword: ' + event.keyword);\\r\\n\\t\\t\\t\\t\\treturn key;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tconsole.log(\\\"Couldn't find a match for \\\" + event.name + ' so they are in Other');\\r\\n\\t\\t\\t// return 'Other' as the category if it hits this point\\r\\n\\t\\t\\treturn 'Other';\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tUtils.collectHoursInCategories = function (events) {\\r\\n\\t\\t\\tvar squashedEvents = {};\\r\\n\\r\\n\\t\\t\\tfor (var e = 0; e < events.length; e++) {\\r\\n\\t\\t\\t\\tvar event = events[e];\\r\\n\\r\\n\\t\\t\\t\\tif (isNaN(event.time)) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (squashedEvents.hasOwnProperty(event.category)) {\\r\\n\\t\\t\\t\\t\\tsquashedEvents[event.category] = (squashedEvents[event.category] + event.time);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tsquashedEvents[event.category] = event.time;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// now loop through the map and build a data map in the appropiate format\\r\\n\\t\\t\\tvar listOfCategories = [];\\r\\n\\t\\t\\tvar categories = Object.getOwnPropertyNames(squashedEvents);\\r\\n\\r\\n\\t\\t\\tfor (var c = 0; c < categories.length; c++) {\\r\\n\\t\\t\\t\\tvar category = categories[c];\\r\\n\\t\\t\\t\\tvar curRow = [];\\r\\n\\t\\t\\t\\tcurRow.push(category);\\r\\n\\t\\t\\t\\tcurRow.push(squashedEvents[category]);\\r\\n\\t\\t\\t\\tlistOfCategories.push(curRow);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn listOfCategories;\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tUtils.parseListOfEvents = function (events, callback) {\\r\\n\\t\\t\\tvar parsedEvents = [];\\r\\n\\r\\n\\t\\t\\tfor (var i = 0; i < events.length; i++) {\\r\\n\\t\\t\\t\\tvar parsedEvent = {};\\r\\n\\r\\n\\t\\t\\t\\t// get the events start date & time.  Use date if date time is not there\\r\\n\\t\\t\\t\\tvar event = events[i];\\r\\n\\r\\n\\t\\t\\t\\tvar startTime = (event.start.dateTime) ? getDateString(event.start.dateTime) : getDateString(event.start.date);\\r\\n\\t\\t\\t\\tvar endTime = (event.end.dateTime) ? getDateString(event.end.dateTime) : getDateString(event.end.date);\\r\\n\\t\\t\\t\\tvar description = (event.description) ? event.description : (event.hasOwnProperty(\\\"bodyPreview\\\") ? event.bodyPreview : '');\\r\\n\\r\\n\\t\\t\\t\\tparsedEvent.name = (event.hasOwnProperty(\\\"summary\\\")) ? event.summary : event.subject;\\r\\n\\t\\t\\t\\tparsedEvent.description = description;\\r\\n\\t\\t\\t\\tparsedEvent.startTimeString = startTime;\\r\\n\\t\\t\\t\\tparsedEvent.endTimeString = endTime;\\r\\n\\t\\t\\t\\tparsedEvent.startTime = this.parseISOStringToDate(startTime);\\r\\n\\t\\t\\t\\tparsedEvent.endTime = this.parseISOStringToDate(endTime);\\r\\n\\r\\n\\t\\t\\t\\t// figure out what category this event falls into\\r\\n\\t\\t\\t\\tparsedEvent.category = this.getCategoryForEvent(parsedEvent);\\r\\n\\r\\n\\t\\t\\t\\t// now get the time difference in hours between the start time and the end time\\r\\n\\t\\t\\t\\tparsedEvent.time = Math.ceil(Math.abs(parsedEvent.endTime - parsedEvent.startTime) / (1000 * 60 * 60));\\r\\n\\r\\n\\t\\t\\t\\t// if time is NaN that is problem\\r\\n\\t\\t\\t\\tif (isNaN(parsedEvent.time)) {\\r\\n\\t\\t\\t\\t\\tconsole.log(isNan(event));\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// add the parsed event to the list\\r\\n\\t\\t\\t\\tparsedEvents.push(parsedEvent);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// add all the hours in a category\\r\\n\\t\\t\\tvar catData = this.collectHoursInCategories(parsedEvents);\\r\\n\\r\\n\\t\\t\\tcallback(catData, parsedEvents);\\r\\n\\t\\t};\\r\\n\\r\\n\\treturn Utils;\\r\\n}, true /* bExport */);\",\n\t\t\"timebox/services/GoogleChartService.js\": \"// Author: Andrew Hajj\\r\\n// Purpose: functions to get calendar info from google\\r\\n\\r\\nsap.ui.define('com/metcs633/services/GoogleChartService', [\\r\\n], function () {\\r\\n\\t'use strict';\\r\\n\\r\\n\\tvar Utils = {};\\r\\n\\r\\n\\tUtils.drawChart = function (catData, controller, callback) {\\r\\n\\t\\t// Create the data table.\\r\\n\\t\\tvar data = new google.visualization.DataTable();\\r\\n\\t\\tdata.addColumn('string', 'Event');\\r\\n\\t\\tdata.addColumn('number', 'Hours');\\r\\n\\t\\tdata.addRows(catData);\\r\\n\\t\\t// Set chart options\\r\\n\\r\\n\\t\\tvar width = 800;\\r\\n\\t\\tvar height = 800;\\r\\n\\r\\n\\t\\tif (sap.ui.Device.system.phone) {\\r\\n\\t\\t\\twidth = 200;\\r\\n\\t\\t\\theight = 200;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar options = {\\r\\n\\t\\t\\t'title': 'Hours per Category',\\r\\n\\t\\t\\t'width': width,\\r\\n\\t\\t\\t'height': height\\r\\n\\t\\t};\\r\\n\\t\\tvar HBoxDomRef = controller.getView().byId('barChartPanel').getDomRef();\\r\\n\\t\\t// Instantiate and draw our chart, passing in our HBox.\\r\\n\\t\\tvar chart = {};\\r\\n\\t\\tif (controller.isColumnChart) {\\r\\n\\t\\t\\tchart = new google.visualization.ColumnChart(HBoxDomRef);\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tchart = new google.visualization.PieChart(HBoxDomRef);\\r\\n\\t\\t}\\r\\n\\t\\tgoogle.visualization.events.addListener(chart, 'ready', function () {\\r\\n\\t\\t\\tgoogle.visualization.events.addListener(chart, 'select', function () {\\r\\n\\t\\t\\t\\t// grab a few details before redirecting\\r\\n\\t\\t\\t\\tvar events = controller.parsedEvents;\\r\\n\\t\\t\\t\\tvar pickedEvents = events.filter(e =>\\r\\n\\t\\t\\t\\t\\te.category === data.getValue(chart.getSelection()[0].row, 0)\\r\\n\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t// now we get the filtered events and show it in the table\\r\\n\\t\\t\\t\\tvar listModel = new sap.ui.model.json.JSONModel();\\r\\n\\t\\t\\t\\tlistModel.setData(pickedEvents);\\r\\n\\t\\t\\t\\tcontroller.getView().byId('eventsTable').setModel(listModel);\\r\\n\\t\\t\\t\\tcontroller._wizard.goToStep(controller.getView().byId(\\\"showTable\\\"));\\r\\n\\t\\t\\t});\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tchart.draw(data, options);\\r\\n\\r\\n\\t\\tcallback();\\r\\n\\t\\tcontroller._wizard.goToStep(controller.getView().byId(\\\"showChart\\\"));\\r\\n\\t};\\r\\n\\r\\n\\treturn Utils;\\r\\n}, true /* bExport */);\",\n\t\t\"timebox/services/O365CalendarService.js\": \"/* eslint-disable no-undef */\\r\\n// Author: Andrew Hajj\\r\\n// Purpose: functions to get calendar info from google\\r\\nsap.ui.define([],\\r\\n\\tfunction () {\\r\\n\\t\\t'use strict';\\r\\n\\r\\n\\t\\tvar Utils = {};\\r\\n\\t\\tvar oMsalClient = null;\\r\\n\\r\\n\\t\\tvar toastOptions = {\\r\\n\\t\\t\\tduration: 2000,                  // default\\r\\n\\t\\t\\twidth: \\\"15em\\\",                   // default\\r\\n\\t\\t\\tmy: \\\"center top\\\",             // default\\r\\n\\t\\t\\tat: \\\"center top\\\",             // default\\r\\n\\t\\t\\tof: window,                      // default\\r\\n\\t\\t\\toffset: \\\"0 0\\\",                   // default\\r\\n\\t\\t\\tcollision: \\\"fit fit\\\",            // default\\r\\n\\t\\t\\tonClose: null,                   // default\\r\\n\\t\\t\\tautoClose: true,                 // default\\r\\n\\t\\t\\tanimationTimingFunction: \\\"ease\\\", // default\\r\\n\\t\\t\\tanimationDuration: 2000,         // default\\r\\n\\t\\t\\tcloseOnBrowserNavigation: true   // default\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar APP_ID = 'f43b3bbb-f2aa-4134-9518-e0a190584c6f';\\r\\n\\t\\tvar APP_SCOPES = ['Calendars.Read'];\\r\\n\\t\\tvar config = {\\r\\n\\t\\t\\tmsalConfig: {\\r\\n\\t\\t\\t\\tauth: {\\r\\n\\t\\t\\t\\t\\tclientId: APP_ID,\\r\\n\\t\\t\\t\\t\\t//redirectUri: \\\"http://localhost:8000/webapp\\\", //defaults to application start page\\r\\n\\t\\t\\t\\t\\tpostLogoutRedirectUri: 'http://localhost:8000/webapp'\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tcache: {\\r\\n\\t\\t\\t\\t\\tcacheLocation: 'localStorage',\\r\\n\\t\\t\\t\\t\\tstoreAuthStateInCookie: true\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tgraphBaseEndpoint: 'https://graph.microsoft.com/v1.0/',\\r\\n\\t\\t\\tscopeConfig: {\\r\\n\\t\\t\\t\\tscopes: APP_SCOPES\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\t\\t// #region Helpers\\r\\n\\t\\tfunction handleAuthError(error) {\\r\\n\\t\\t\\tconsole.log(error);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction getMSGraphClient() {\\r\\n\\t\\t\\tif (!oMsalClient) {\\r\\n\\t\\t\\t\\tif (Msal) {\\r\\n\\t\\t\\t\\t\\treturn new Msal.UserAgentApplication(config.msalConfig);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn oMsalClient;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction getStartDate(startDate, endDate) {\\r\\n\\t\\t\\tvar start = new Date();\\r\\n\\t\\t\\tvar end = new Date();\\r\\n\\t\\t\\tif (startDate && endDate) {\\r\\n\\t\\t\\t\\tstart = new Date(new Date(startDate).setHours(0, 0, 0));\\r\\n\\t\\t\\t\\tend = new Date(new Date(endDate).setHours(0, 0, 0));\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tend = new Date(new Date().setHours(0, 0, 0));\\r\\n\\t\\t\\t\\tstart = new Date(new Date(2015, 3, 2).setHours(0, 0, 0));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn { start, end };\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction getTimeDifference(start, end) {\\r\\n\\t\\t\\treturn (Date.parse(end) - Date.parse(start));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction set365StatusText(event) {\\r\\n\\t\\t\\tvar signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\\r\\n\\t\\t\\tif (!signedInO365) {\\r\\n\\t\\t\\t\\t//event.getView().byId('signButtonO365').setText('Sign In to O365');\\r\\n\\t\\t\\t\\t//event.getView().byId('configLabelO365').setText('Signed Out of O365!');\\r\\n\\t\\t\\t\\tsap.m.MessageToast.show('Signed Out of O365!', toastOptions);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t//event.getView().byId('signButtonO365').setText('Sign Out of O365');\\r\\n\\t\\t\\t\\t//event.getView().byId('configLabelO365').setText('Connected to O365!');\\r\\n\\t\\t\\t\\tsap.m.MessageToast.show('Connected to O365!', toastOptions);\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// #endregion\\r\\n\\t\\tUtils.initiateClient = function (event, signout) {\\r\\n\\t\\t\\tvar oMsalClient = getMSGraphClient();\\r\\n\\t\\t\\tvar me = this;\\r\\n\\t\\t\\tif (signout) {\\r\\n\\t\\t\\t\\toMsalClient.logout();\\r\\n\\t\\t\\t\\tset365StatusText(event);\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// check if the user is already signed in\\r\\n\\t\\t\\tif (!oMsalClient.getAccount()) {\\r\\n\\t\\t\\t\\toMsalClient.loginPopup(config.scopeConfig).then(function (res) {\\r\\n\\t\\t\\t\\t\\tset365StatusText(event);\\r\\n\\t\\t\\t\\t\\tme.getCalendars(event.setCalendarDropDownEvents.bind(event));\\r\\n\\t\\t\\t\\t\\treturn res;\\r\\n\\t\\t\\t\\t}).catch(function (error) {\\r\\n\\t\\t\\t\\t\\thandleAuthError(error);\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tset365StatusText(event);\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t};\\r\\n\\r\\n\\r\\n\\t\\tUtils.signIn = function (event) {\\r\\n\\t\\t\\tthis.initiateClient(event);\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tUtils.signOut = function (event) {\\r\\n\\t\\t\\tthis.initiateClient(event, true);\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// #region Calendars\\r\\n\\t\\tUtils.getCalendars = function (callback) {\\r\\n\\t\\t\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\r\\n\\t\\t\\t\\t// eslint-disable-next-line no-undef\\r\\n\\t\\t\\t\\t$.ajax({\\r\\n\\t\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\t\\tAuthorization: 'Bearer ' + token.accessToken\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\t\\turl: `${config.graphBaseEndpoint}me/calendars`,\\r\\n\\r\\n\\t\\t\\t\\t\\ttype: 'GET'\\r\\n\\t\\t\\t\\t}).then(function (res) {\\r\\n\\t\\t\\t\\t\\tconsole.log('getCalendars', res);\\r\\n\\t\\t\\t\\t\\tcallback(res.value);\\r\\n\\t\\t\\t\\t\\treturn res;\\r\\n\\t\\t\\t\\t}).fail(function (error) {\\r\\n\\t\\t\\t\\t\\thandleAuthError(error);\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t});\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tUtils.getCalendarById = function (id) {\\r\\n\\t\\t\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\r\\n\\t\\t\\t\\t// eslint-disable-next-line no-undef\\r\\n\\t\\t\\t\\t$.ajax({\\r\\n\\t\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\t\\tAuthorization: 'Bearer ' + token.accessToken\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\turl: `${config.graphBaseEndpoint}me/calendars/${id}`,\\r\\n\\t\\t\\t\\t\\ttype: 'GET'\\r\\n\\t\\t\\t\\t}).then(function (res) {\\r\\n\\t\\t\\t\\t\\tconsole.log('getCalendars', res);\\r\\n\\t\\t\\t\\t\\treturn res;\\r\\n\\t\\t\\t\\t}).fail(function (error) {\\r\\n\\t\\t\\t\\t\\thandleAuthError(error);\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t});\\r\\n\\t\\t};\\r\\n\\t\\t// #endregion\\r\\n\\r\\n\\t\\t// #region Categories\\r\\n\\r\\n\\t\\tUtils.getCategories = function (startDate, endDate, calendarId = '') {\\r\\n\\t\\t\\tvar start = new Date();\\r\\n\\t\\t\\tvar end = new Date();\\r\\n\\r\\n\\t\\t\\t// start and end date format 2020-01-31\\r\\n\\t\\t\\tvar dates = getStartDate(startDate, endDate);\\r\\n\\t\\t\\tstart = dates.start;\\r\\n\\t\\t\\tend = dates.end;\\r\\n\\r\\n\\t\\t\\tconsole.log('start date:', start);\\r\\n\\t\\t\\tconsole.log('end date:', end);\\r\\n\\r\\n\\t\\t\\tvar apiUrl = '';\\r\\n\\t\\t\\tif (calendarId && calendarId.length > 0) {\\r\\n\\t\\t\\t\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\r\\n\\t\\t\\t\\t$.ajax({\\r\\n\\t\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\t\\tAuthorization: 'Bearer ' + token.accessToken\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\turl: `${config.graphBaseEndpoint}${apiUrl}`,\\r\\n\\t\\t\\t\\t\\ttype: 'GET'\\r\\n\\t\\t\\t\\t}).then((categories) => {\\r\\n\\t\\t\\t\\t\\tconsole.log('getCategories', categories);\\r\\n\\r\\n\\t\\t\\t\\t\\tvar retCategories = [];\\r\\n\\t\\t\\t\\t\\tif (categories && categories.value) {\\r\\n\\t\\t\\t\\t\\t\\tcategories.value.forEach(element => {\\r\\n\\t\\t\\t\\t\\t\\t\\tretCategories = retCategories.concat(element.categories);\\r\\n\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tcategories = JSON.stringify([...new Set(retCategories)]);\\r\\n\\t\\t\\t\\t\\tconsole.log('getCategories result:', categories);\\r\\n\\t\\t\\t\\t\\treturn categories;\\r\\n\\t\\t\\t\\t}).fail(function (error) {\\r\\n\\t\\t\\t\\t\\thandleAuthError(error);\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t});\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tUtils.getCategoriesTime = function (startDate, endDate, calendarId = '') {\\r\\n\\t\\t\\tvar start = new Date();\\r\\n\\t\\t\\tvar end = new Date();\\r\\n\\r\\n\\t\\t\\t// start and end date format 2020-01-31\\r\\n\\t\\t\\tvar dates = getStartDate(startDate, endDate);\\r\\n\\t\\t\\tstart = dates.start;\\r\\n\\t\\t\\tend = dates.end;\\r\\n\\r\\n\\t\\t\\tconsole.log('start date:', start);\\r\\n\\t\\t\\tconsole.log('end date:', end);\\r\\n\\r\\n\\t\\t\\tvar apiUrl = '';\\r\\n\\t\\t\\tif (calendarId && calendarId.length > 0) {\\r\\n\\t\\t\\t\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\r\\n\\t\\t\\t\\t$.ajax({\\r\\n\\t\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\t\\tAuthorization: 'Bearer ' + token.accessToken\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\turl: `${config.graphBaseEndpoint}${apiUrl}`,\\r\\n\\t\\t\\t\\t\\ttype: 'GET'\\r\\n\\t\\t\\t\\t}).then((res) => {\\r\\n\\t\\t\\t\\t\\tconsole.log('getCategoriesTime', res);\\r\\n\\r\\n\\t\\t\\t\\t\\tvar catTimeTotals = {};\\r\\n\\t\\t\\t\\t\\tif (res && res.value) {\\r\\n\\t\\t\\t\\t\\t\\tres.value.forEach(element => {\\r\\n\\t\\t\\t\\t\\t\\t\\tvar catTimeTotalsCats = element.categories;\\r\\n\\t\\t\\t\\t\\t\\t\\t// eslint-disable-next-line max-nested-callbacks\\r\\n\\t\\t\\t\\t\\t\\t\\tcatTimeTotalsCats.forEach(cat => {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (catTimeTotals[cat]) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar milliSeconds = parseFloat(catTimeTotals[cat], 10);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmilliSeconds += getTimeDifference(element.start.dateTime, element.end.dateTime);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcatTimeTotals[cat] = milliSeconds;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcatTimeTotals[cat] = getTimeDifference(element.start.dateTime, element.end.dateTime);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tres = JSON.stringify(catTimeTotals);\\r\\n\\t\\t\\t\\t\\tconsole.log('getCategoriesTime:', res);\\r\\n\\t\\t\\t\\t\\treturn res;\\r\\n\\t\\t\\t\\t}).fail(function (error) {\\r\\n\\t\\t\\t\\t\\thandleAuthError(error);\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t\\t});\\r\\n\\t\\t};\\r\\n\\t\\t// #endregion\\r\\n\\r\\n\\t\\t// #region Events\\r\\n\\t\\tUtils.getEvents = function (startDate, endDate, calendarId = '', callback, filterToCategory = '') {\\r\\n\\t\\t\\tvar start = new Date();\\r\\n\\t\\t\\tvar end = new Date();\\r\\n\\r\\n\\t\\t\\t// start and end date format 2020-01-31\\r\\n\\t\\t\\tvar dates = getStartDate(startDate, endDate);\\r\\n\\t\\t\\tstart = dates.start;\\r\\n\\t\\t\\tend = dates.end;\\r\\n\\r\\n\\t\\t\\tconsole.log('start date:', start);\\r\\n\\t\\t\\tconsole.log('end date:', end);\\r\\n\\r\\n\\t\\t\\tvar apiUrl = '';\\r\\n\\t\\t\\tif (calendarId && calendarId.length > 0) {\\r\\n\\t\\t\\t\\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\\r\\n\\r\\n\\t\\t\\t\\t// first get a count of events\\r\\n\\t\\t\\t\\t// then select all of those events\\r\\n\\t\\t\\t\\t$.ajax({\\r\\n\\t\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\t\\tAuthorization: 'Bearer ' + token.accessToken\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\turl: `${config.graphBaseEndpoint}${apiUrl}&$count=true`,\\r\\n\\t\\t\\t\\t\\ttype: 'GET'\\r\\n\\t\\t\\t\\t}).then(function (res) {\\r\\n\\t\\t\\t\\t\\t$.ajax({\\r\\n\\t\\t\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\t\\t\\tAuthorization: 'Bearer ' + token.accessToken\\r\\n\\t\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\t\\turl: `${config.graphBaseEndpoint}${apiUrl}&$top=${res[\\\"@odata.count\\\"]}`,\\r\\n\\t\\t\\t\\t\\t\\ttype: 'GET'\\r\\n\\t\\t\\t\\t\\t}).then(function (res) {\\r\\n\\t\\t\\t\\t\\t\\tif (filterToCategory && filterToCategory.length > 0) {\\r\\n\\t\\t\\t\\t\\t\\t\\tres.value = filterToCategory(res, filterToCategory);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tconsole.log('getEvents', res);\\r\\n\\t\\t\\t\\t\\t\\tcallback(res);\\r\\n\\t\\t\\t\\t\\t\\treturn res;\\r\\n\\t\\t\\t\\t\\t}).fail(function (error) {\\r\\n\\t\\t\\t\\t\\t\\thandleAuthError(error);\\r\\n\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t}).fail(function (error) {\\r\\n\\t\\t\\t\\t\\thandleAuthError(error);\\r\\n\\t\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t});\\r\\n\\t\\t};\\r\\n\\t\\t// #endregion\\r\\n\\r\\n\\t\\treturn Utils;\\r\\n\\t}, true /* bExport */);\\r\\n\",\n\t\t\"timebox/view/App.view.xml\": \"<mvc:View\\r\\n\\tdisplayBlock=\\\"true\\\"\\r\\n\\txmlns=\\\"sap.m\\\"\\r\\n\\txmlns:mvc=\\\"sap.ui.core.mvc\\\"><Shell><App id=\\\"app\\\"/></Shell></mvc:View>\",\n\t\t\"timebox/view/Home.view.xml\": \"<mvc:View\\r\\n\\tcontrollerName=\\\"com.metcs633.controller.Home\\\"\\r\\n\\tdisplayBlock=\\\"true\\\"\\r\\n\\txmlns=\\\"sap.m\\\"\\r\\n\\txmlns:mvc=\\\"sap.ui.core.mvc\\\"\\r\\n\\txmlns:l=\\\"sap.ui.layout\\\"\\t\\t\\r\\n\\txmlns:core=\\\"sap.ui.core\\\"><Page\\r\\n\\t\\t\\tid=\\\"page\\\"><headerContent><Image src=\\\"Images/logo_transparent.png\\\" activeSrc=\\\"/webapp\\\"></Image></headerContent><content><Wizard id=\\\"CreateProductWizard\\\" class=\\\"sapUiResponsivePadding--header sapUiResponsivePadding--content\\\"><WizardStep id=\\\"googleOrOutlookStep\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ttitle=\\\"Choose Source\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcomplete=\\\"chooseStepCompleted\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvalidated=\\\"true\\\"><Text class=\\\"sapUiSmallMarginBottom\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"Welcome to the Timebox Tool! The first step is to choose Google or o365.  Click one below to continue.\\\"/><HBox\\r\\n\\t\\t\\t\\t\\t\\t\\t\\talignItems=\\\"Center\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tjustifyContent=\\\"Center\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\twidth=\\\"100%\\\"><SegmentedButton\\r\\n\\t\\t\\t\\t\\t\\t\\t\\twidth=\\\"320px\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tselectionChange=\\\"setCalendarTypeFromButton\\\"><items><SegmentedButtonItem icon=\\\"sap-icon://appointment\\\" text=\\\"Google\\\"/><SegmentedButtonItem icon=\\\"sap-icon://appointment-2\\\" text=\\\"o365\\\"/></items></SegmentedButton></HBox></WizardStep><WizardStep id=\\\"signInAndChooseCalendarStep\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvalidated=\\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle=\\\"Sign and Choose Calendar\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcomplete=\\\"goButton\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tactivate=\\\"signInAndChoosseValidation\\\"><VBox><Text class=\\\"sapUiSmallMarginBottom\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"Next, login, choose a calendar and select a date range\\\"/><Button \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tid=\\\"signButton\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"Sign in\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tenabled=\\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbusyIndicatorDelay=\\\"0\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbusy=\\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpress=\\\"onSignIn\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"sapUiSmallMarginEnd\\\"></Button></VBox><Panel\\r\\n\\t\\t\\t\\t\\t\\t\\tid=\\\"calendarSelectionPanel\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\tvisible=\\\"false\\\"><VBox class = \\\"sapUiSmallMarginTopBottom\\\"><Label text=\\\"Choose a Calendar: \\\" labelFor=\\\"calendarComboBox\\\"/><ComboBox\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Choose a Calendar\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tid=\\\"calendarComboBox\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbusyIndicatorDelay=\\\"0\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\titems=\\\"{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tpath: '/'\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"sapUiTinyMarginEnd\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\trequired=\\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tselectionChange=\\\"calendarSelectionChange\\\"><core:Item key=\\\"{id}\\\" text=\\\"{name}\\\" /></ComboBox><HBox><VBox class = \\\"sapUiSmallMarginEnd\\\"><Label text=\\\"Choose a start date: \\\" labelFor=\\\"DTP1\\\"/><DatePicker\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tid=\\\"DTP1\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Enter Date ...\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchange=\\\"handleStartDateChange\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\trequired=\\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"sapUiSmallMarginBottom\\\"/></VBox><VBox><Label text=\\\"Choose an end date: \\\" labelFor=\\\"DTP2\\\"/><DatePicker\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tid=\\\"DTP2\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Enter Date ...\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\trequired=\\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchange=\\\"handleEndDateChange\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"sapUiSmallMarginBottom\\\"/></VBox></HBox><Button\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tid=\\\"goButton\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"Get Events\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvisible=\\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpress=\\\"goButton\\\"></Button></VBox></Panel></WizardStep><WizardStep id=\\\"showChart\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tactivate=\\\"pricingActivate\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcomplete=\\\"pricingComplete\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvalidated=\\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ttitle=\\\"Chart\\\"><Panel><Button\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tid=\\\"changeChartType\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"Change Chart\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpress=\\\"changeChart\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvisible=\\\"false\\\"></Button><FlexBox\\r\\n\\t\\t\\t\\t\\t\\t\\t\\talignItems=\\\"Center\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tjustifyContent=\\\"Center\\\"><items><Panel\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tid=\\\"barChartPanel\\\"></Panel></items></FlexBox></Panel></WizardStep><WizardStep id=\\\"showTable\\\"\\r\\n\\t\\t\\t\\t\\t\\tvalidated=\\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\tshowNextButton=\\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\ttitle=\\\"Events\\\"><Table\\r\\n\\t\\t\\t\\t\\t\\t\\tid=\\\"eventsTable\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\tinset=\\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\tvisible=\\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\titems=\\\"{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpath: '/',\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsorter: [{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpath: 'category'\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}, \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpath: 'name'\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}, \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpath: 'keyword'\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}]\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\\"><columns><Column\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\twidth=\\\"12em\\\"><Text text=\\\"Event\\\" /></Column><Column\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdemandPopin=\\\"true\\\"><Text text=\\\"Category\\\" /></Column><Column\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdemandPopin=\\\"true\\\"><Text text=\\\"Keyword\\\" /></Column><Column\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdemandPopin=\\\"true\\\"><Text text=\\\"Date\\\" /></Column><Column\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdemandPopin=\\\"true\\\"><Text text=\\\"Hours\\\" /></Column></columns><items><ColumnListItem><cells><Text\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"{name}\\\"/><Text\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"{category}\\\" /><Text\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"{keyword}\\\" /><Text\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"{startTimeString}\\\" /><Text\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttext=\\\"{time}\\\" /></cells></ColumnListItem></items></Table></WizardStep></Wizard></content></Page></mvc:View>\"\n\t}\n});",
		"timebox/Component.js": "sap.ui.define([\r\n\t'sap/ui/core/UIComponent',\r\n\t'sap/ui/Device',\r\n\t'./model/models'\r\n], function (UIComponent, Device, models) {\r\n\t'use strict';\r\n\r\n\treturn UIComponent.extend('com.metcs633.Component', {\r\n\t\tmetadata: {\r\n\t\t\tmanifest: 'json'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\r\n\t\t * @public\r\n\t\t * @override\r\n\t\t */\r\n\t\tinit: function () {\r\n\t\t\t// call the base component's init function\r\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\r\n\r\n\t\t\t// set the device model\r\n\t\t\tthis.setModel(models.createDeviceModel(), 'device');\r\n\r\n\t\t\t// create the views based on the url/hash\r\n\t\t\tthis.getRouter().initialize();\r\n\t\t}\r\n\t});\r\n});",
		"timebox/controller/App.controller.js": "sap.ui.define([\r\n\t'sap/ui/core/mvc/Controller',\r\n\t'com/metcs633/model/formatter'\r\n], function (Controller, formatter) {\r\n\t'use strict';\r\n\r\n\treturn Controller.extend('com.metcs633.controller.App', {\r\n\r\n\t\tformatter: formatter,\r\n\r\n\t\tonInit: function () {\r\n\r\n\t\t}\r\n\t});\r\n});",
		"timebox/controller/Home.controller.js": "//Authors: Andrew Hajj\r\n\r\nsap.ui.define([\r\n  'sap/ui/core/mvc/Controller',\r\n  '../model/formatter',\r\n  '../services/GoogleCalendarService',\r\n  '../services/GoogleChartService',\r\n  '../services/O365CalendarService'\r\n], function (Controller, formatter, GoogleCalendarService, GoogleChartService, O365CalendarService) {\r\n  'use strict';\r\n\r\n  var signedInGoogle = false;\r\n  var signedInO365 = false;\r\n  var isGoogle = true;\r\n  var toastOptions = {\r\n    duration: 2000,                  // default\r\n    width: \"15em\",                   // default\r\n    my: \"center top\",             // default\r\n    at: \"center top\",             // default\r\n    of: window,                      // default\r\n    offset: \"0 0\",                   // default\r\n    collision: \"fit fit\",            // default\r\n    onClose: null,                   // default\r\n    autoClose: true,                 // default\r\n    animationTimingFunction: \"ease\", // default\r\n    animationDuration: 2000,         // default\r\n    closeOnBrowserNavigation: true   // default\r\n  };\r\n\r\n\r\n  return Controller.extend('com.metcs633.controller.App', {\r\n\r\n    formatter: formatter,\r\n    GoogleCalendarService: GoogleCalendarService,\r\n\r\n    setCalendarTypeFromButton: function (event) {\r\n      isGoogle = (event.getParameters().item.getText() === \"Google\") ? true : false;\r\n\r\n      // if it goes in here that means we need to reset all the things\r\n      if (this._wizard.getProgress() > 1) {\r\n        var calendarDropDown = this.getView().byId('calendarComboBox');\r\n        var dtpStart = this.getView().byId('DTP1');\r\n        var dtpEnd = this.getView().byId('DTP2');\r\n        calendarDropDown.setSelectedItem(\"\");\r\n        dtpStart.setValue(\"\");\r\n        dtpEnd.setValue(\"\");\r\n        this.getView().byId('calendarSelectionPanel').setVisible(false);\r\n        this._wizard.discardProgress(this._wizard.getSteps()[0]);\r\n      }\r\n    },\r\n\r\n    set365StatusText: function () {\r\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\r\n      if (!signedInO365) {\r\n        //this.getView().byId('signButton').setText('Sign In to O365');\r\n        //this.getView().byId('configLabelO365').setText('Signed Out of O365!');\r\n        sap.m.MessageToast.show('Signed Out of O365!', toastOptions);\r\n      } else {\r\n        //this.getView().byId('signButton').setText('Sign Out of O365');\r\n        //this.getView().byId('configLabelO365').setText('Connected to O365!');\r\n        sap.m.MessageToast.show('Connected to O365!', toastOptions);\r\n      }\r\n    },\r\n\r\n    // Connect to Google api by default to grab the calendar\r\n    onInit: function () {\r\n      var configLabel = this.getView().byId('configLabel');\r\n      sap.m.MessageToast.show('Connecting to Google...', toastOptions);\r\n      //configLabel.setText('Connecting to Google...');\r\n      GoogleCalendarService.connectToGoogle(this);\r\n\r\n      //Connect to O365\r\n      var configLabelO365 = this.getView().byId('configLabelO365');\r\n      this.set365StatusText();\r\n      this._wizard = this.getView().byId(\"CreateProductWizard\");\r\n\r\n    },\r\n\r\n    afterLogin: function () {\r\n      this.getView().byId('signButton').setEnabled(true);\r\n      //this.getView().byId('configLabel').setText('Connected to Google!');\r\n      sap.m.MessageToast.show('Connected to Google!', toastOptions);\r\n    },\r\n\r\n    onSignIn: function (event) {\r\n      if (isGoogle) {\r\n        this.onSignInOutGooglePress();\r\n      }\r\n      else {\r\n        this.onSignInOutO365Press();\r\n      }\r\n    },\r\n\r\n    onSignInOutGooglePress: function (event) {\r\n      if (signedInGoogle) {\r\n        GoogleCalendarService.signOut(this);\r\n      } else {   // first turn on the busy indicator\r\n        this.getView().byId('calendarComboBox').setBusy(true);\r\n        GoogleCalendarService.signIn(this);\r\n      }\r\n      signedInGoogle = !signedInGoogle;\r\n    },\r\n\r\n    onSignInOutO365Press: function (event) {\r\n      if (signedInO365) {\r\n        O365CalendarService.signOut(this);\r\n        this.getView().byId('signButton').setText('Sign In to O365');\r\n        this.set365StatusText();\r\n      } else {\r\n        O365CalendarService.signIn(this);\r\n        this.set365StatusText();\r\n      }\r\n    },\r\n    chooseStepCompleted: function (event) {\r\n      // We don't keep the cookies for Google, but we do for outlook\r\n      // if this if coming from step 1 then check if the user is signed in\r\n      // if so, go right to getting the calendars\r\n      signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\r\n      if (!isGoogle && signedInO365) {\r\n        this.set365StatusText();\r\n        this.getView().byId('signButton').setText('Sign Out of O365');\r\n        O365CalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\r\n      }\r\n      else if (!isGoogle) {\r\n        this.getView().byId('signButton').setText('Sign In to O365');\r\n      }\r\n      else if (!signedInGoogle) {\r\n        // clear the calendar selection\r\n        // set the button to login\r\n        this.getView().byId('signButton').setText('Sign In to Google');\r\n      }\r\n      else {\r\n\r\n        this.getView().byId('signButton').setText('Sign Out of Google');\r\n        GoogleCalendarService.getCalendars(this.setCalendarDropDownEvents.bind(this));\r\n        this.getView().byId('calendarSelectionPanel').setVisible(true);\r\n      }\r\n\r\n    },\r\n\r\n    setCalendarDropDownEvents: function (events) {\r\n\r\n      var calendarDropDown = this.getView().byId('calendarComboBox');\r\n      var statusLabel = this.getView().byId('configLabel');\r\n      // add the list of parsed calendars to the dropdown for user to select\r\n      var listModel = new sap.ui.model.json.JSONModel();\r\n\r\n\r\n      listModel.setData(events);\r\n      calendarDropDown.setModel(listModel);\r\n      this.getView().byId('calendarSelectionPanel').setVisible(true);\r\n      calendarDropDown.setBusy(false);\r\n      // statusLabel.setText('Loaded calendars!');\r\n      sap.m.MessageToast.show('Loaded calendars!', toastOptions);\r\n    },\r\n    onGetCalendarsPress: function (event) {\r\n\r\n    },\r\n\r\n    signInAndChoosseValidation: function (event) {\r\n      // only enable the Go button if\r\n      // A calendar is selected, a start date and an end date are selected\r\n      var calendarDropDown = this.getView().byId('calendarComboBox');\r\n      var dtpStart = this.getView().byId('DTP1');\r\n      var dtpEnd = this.getView().byId('DTP2');\r\n\r\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\r\n        return true;\r\n      }\r\n      return false;\r\n\r\n    },\r\n\r\n    validateCalendarStartEndDate: function (event) {\r\n      // only enable the Go button if\r\n      // A calendar is selected, a start date and an end date are selected\r\n      var calendarDropDown = this.getView().byId('calendarComboBox');\r\n      var dtpStart = this.getView().byId('DTP1');\r\n      var dtpEnd = this.getView().byId('DTP2');\r\n\r\n      if (calendarDropDown.getSelectedItem() && dtpStart.getValue() && dtpEnd.getValue()) {\r\n        this._wizard.validateStep(this.byId(\"signInAndChooseCalendarStep\"));\r\n        //this.getView().byId('goButton').setEnabled(true);\r\n      } else {\r\n        this._wizard.invalidateStep(this.byId(\"signInAndChooseCalendarStep\"));\r\n        this._wizard.goToStep(this.byId(\"signInAndChooseCalendarStep\"));\r\n      }\r\n\r\n    },\r\n\r\n    goButton: function (event) {\r\n      // freeze the view so the user knows something is happening\r\n      // sap.ui.core.\r\n      this.getView().byId(\"page\").setBusy(true);\r\n      // figure out the min and max time in order to query google calendar\r\n      // this button doesn't get enabled until there is data in all 3 prompts (calendar, start & end date)\r\n      var calendarDropDown = this.getView().byId('calendarComboBox');\r\n      var dtpStart = this.getView().byId('DTP1');\r\n      var dtpEnd = this.getView().byId('DTP2');\r\n\r\n      // First, we need the selected calendar\r\n      var selectedCalendar = calendarDropDown.getSelectedItem();\r\n\r\n      // then we need the start date time\r\n      var startTime = dtpStart.getDateValue();\r\n\r\n      // then we need the end date date\r\n      var endTime = dtpEnd.getDateValue();\r\n      var me = this;\r\n\r\n      if (isGoogle) {\r\n        GoogleCalendarService.getListOfEventsFromCalendarInDateRange(selectedCalendar, startTime, endTime, function (response) {\r\n          var events = response.result.items;\r\n          //console.log(events);\r\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\r\n          me.getView().byId(\"page\").setBusy(false);\r\n        });\r\n      }\r\n      else {\r\n        O365CalendarService.getEvents(startTime, endTime, selectedCalendar, function (response) {\r\n          var events = response.value;\r\n          GoogleCalendarService.parseListOfEvents(events, me.setChartAfterParsingEvents.bind(me));\r\n          me.getView().byId(\"page\").setBusy(false);\r\n          // GoogleCalendarService.parseListOfEvents(events, me);\r\n        });\r\n      }\r\n      // if (!this.getView().byId(\"goButton\").getVisible())\r\n      // {\r\n      this.getView().byId('changeChartType').setVisible(true);\r\n      this.getView().byId(\"goButton\").setVisible(true);\r\n      this.byId(\"showChart\").fireComplete();\r\n      // }\r\n      this._wizard.goToStep(this.getView().byId(\"showChart\"));\r\n\r\n    },\r\n\r\n    setChartAfterParsingEvents: function (categorizedData, parsedEvents) {\r\n      // set the data back into the conteroller so it's retrievable after\r\n      this.chartData = categorizedData;\r\n      this.parsedEvents = parsedEvents;\r\n      this.isColumnChart = (this.hasOwnProperty('isColumnChart')) ? !(this.isColumnChart) : true;\r\n      var me = this;\r\n      GoogleChartService.drawChart(categorizedData, me, function () {\r\n        // fill in the table\r\n        var listModel = new sap.ui.model.json.JSONModel();\r\n        listModel.setData(parsedEvents);\r\n        me.getView().byId('eventsTable').setModel(listModel);\r\n        me.getView().byId('eventsTable').setVisible(true);\r\n        // me.getView().byId('configLabel').setText('Analyzed time!  Scroll down to see a visual representation');\r\n        me.isColumnChart = !(me.isColumnChart);\r\n      });\r\n    },\r\n\r\n    changeChart: function (event) {\r\n      var me = this;\r\n      GoogleChartService.drawChart(this.chartData, this, function () {\r\n        me.isColumnChart = !(me.isColumnChart);\r\n      });\r\n    },\r\n\r\n    calendarSelectionChange: function (event) {\r\n      this.validateCalendarStartEndDate();\r\n      // acknowledge the selection change and update the status accordingly\r\n      //this.getView().byId('configLabel').setText(\"Calendar '\" + event.getParameters('selectedItem').selectedItem.getText() + \"' loaded.\");\r\n      sap.m.MessageToast.show(\"Calendar '\" + event.getParameters('selectedItem').selectedItem.getText() + \"' loaded.\", toastOptions);\r\n    },\r\n\r\n    handleStartDateChange: function (event) {\r\n\r\n      this.validateCalendarStartEndDate();\r\n    },\r\n\r\n    handleEndDateChange: function (event) {\r\n\r\n      this.validateCalendarStartEndDate();\r\n    }\r\n\r\n  });\r\n});",
		"timebox/model/formatter.js": "sap.ui.define([], function () {\r\n\t'use strict';\r\n\treturn {\r\n\r\n\t};\r\n});",
		"timebox/model/models.js": "sap.ui.define([\r\n\t'sap/ui/model/json/JSONModel',\r\n\t'sap/ui/Device'\r\n], function (JSONModel, Device) {\r\n\t'use strict';\r\n\r\n\treturn {\r\n\r\n\t\tcreateDeviceModel: function () {\r\n\t\t\tvar oModel = new JSONModel(Device);\r\n\t\t\toModel.setDefaultBindingMode('OneWay');\r\n\t\t\treturn oModel;\r\n\t\t}\r\n\r\n\t};\r\n});",
		"timebox/services/GoogleCalendarService.js": "// Author: Andrew Hajj\r\n// Purpose: functions to get calendar info from google\r\n\r\nsap.ui.define('com/metcs633/services/GoogleCalendarService', [\r\n\t'../services/GoogleChartService'\r\n], function (GoogleChartService) {\r\n\t'use strict';\r\n\r\n\tvar Utils = {};\r\n\r\n\tvar toastOptions = {\r\n\t\tduration: 2000,                  // default\r\n\t\twidth: \"15em\",                   // default\r\n\t\tmy: \"center top\",             // default\r\n\t\tat: \"center top\",             // default\r\n\t\tof: window,                      // default\r\n\t\toffset: \"0 0\",                   // default\r\n\t\tcollision: \"fit fit\",            // default\r\n\t\tonClose: null,                   // default\r\n\t\tautoClose: true,                 // default\r\n\t\tanimationTimingFunction: \"ease\", // default\r\n\t\tanimationDuration: 3000,         // default\r\n\t\tcloseOnBrowserNavigation: true   // default\r\n\t};\r\n\r\n\t// Client ID from the Developer Console\r\n\tvar CLIENT_ID = '782211928709-49gkv11kmh5mji6m79rs9df57ba3u6pv.apps.googleusercontent.com';\r\n\r\n\t// Array of API discovery doc URLs for APIs used by the quickstart\r\n\tvar DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\r\n\r\n\t// Authorization scopes required by the API; multiple scopes can be\r\n\t// included, separated by spaces.\r\n\tvar SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';\r\n\r\n\t// Can put into a db at a later date.\r\n\tvar eventCategories = {\r\n\t\t'Recreation': [\r\n\t\t\t'painting', 'art workshop', 'sketching workshop', 'drawing workshop', 'reading', 'newspaper', 'book club', 'camping', 'cinema', 'movies', 'concert', 'gig', 'concerts', 'recital', 'gigs', 'piano', 'singing', 'music', 'choir', 'flute', 'violin', 'orchestra', 'oboe', 'clarinet', 'saxophone', 'cornett', 'trumpet', 'contrabass', 'cello', 'trombone', 'tuba', 'music', 'ensemble', 'string quartett', 'guitar', 'classical', 'choir', 'massage', 'backrub', 'massages', 'manicure', 'pedicure', 'manicures', 'pedicures', 'spa'\r\n\t\t],\r\n\t\t'Sports': [\r\n\t\t\t'badminton', 'yoga', 'basketball', 'baseball', 'billiard', 'bowling', 'bicycle', 'cycling', 'bike', 'bicycles', 'bikes', 'biking', 'dance', 'dancing', 'dances', 'golf', 'hiking', 'hike', 'hikes', 'kayaking', 'ping pong', 'table tennis', 'ping-pong', 'pingpong', 'jog', 'jogging', 'running', 'jogs', 'runs', 'sail', 'sailing', 'boat cruise', 'sailboat', 'skiing', 'ski', 'skis', 'snowboarding', 'snowshoeing', 'snow shoe', 'snow boarding', 'soccer', 'swim', 'swimming', 'swims', 'tennis', 'going for a walk', 'walking', 'sport'\r\n\t\t],\r\n\t\t'Gym': [\r\n\t\t\t'gym', 'workout', 'workouts'\r\n\t\t],\r\n\t\t'Food': [\r\n\t\t\t'bbq', 'barbecue', 'barbeque', 'breakfast', 'breakfasts', 'brunch', 'brunches', 'coffee', 'coffees', 'dinner', 'dinners', 'restaurant', 'restaurants', 'family meal', 'cocktail', 'drinks', 'cocktails', 'lunch', 'lunches', 'luncheon', 'cookout'\r\n\t\t],\r\n\t\t'Appointments': [\r\n\t\t\t'mechaninc', 'oil change', 'car service', 'service', 'dentist', 'dentistry', 'dental', 'graduation', 'haircut', 'hair', 'wedding', 'repair', 'handyman', 'electrician', 'plumber', 'DIY'\r\n\t\t],\r\n\t\t'Work': [\r\n\t\t\t'deadline', 'meeting', 'office', 'work'\r\n\t\t],\r\n\t\t'Social': [\r\n\t\t\t'call', 'talk', 'meet', 'catch up', 'together'\r\n\t\t],\r\n\t\t'Doctors': [\r\n\t\t\t'doctor', 'dr.', 'vision', 'therapy', 'heal', 'med'\r\n\t\t],\r\n\t\t'School': [\r\n\t\t\t'class', 'test', 'quiz', 'homework', 'project', 'exam'\r\n\t\t],\r\n\t\t'Travel': [\r\n\t\t\t'roadtrip', 'drive', 'commute', 'flight', 'fly', 'airplane', 'airport', 'hotel', 'motel', 'resort', 'stay', 'vacation', 'plane', 'boat', 'sail', 'stay'\r\n\t\t],\r\n\t\t'Chores': [\r\n\t\t\t'cleaning', 'clean', 'tidy', 'vacuum'\r\n\t\t]\r\n\t};\r\n\r\n\tfunction getDateString(dateIn) {\r\n\t\tdateIn = new Date(dateIn);\r\n\t\tvar dateString =\r\n\t\t\tdateIn.getFullYear() + \"/\" +\r\n\t\t\t(\"0\" + (dateIn.getMonth() + 1)).slice(-2) + \"/\" +\r\n\t\t\t(\"0\" + dateIn.getDate()).slice(-2) + \" \" +\r\n\t\t\t(\"0\" + dateIn.getHours()).slice(-2) + \":\" +\r\n\t\t\t(\"0\" + dateIn.getMinutes()).slice(-2) + \":\" +\r\n\t\t\t(\"0\" + dateIn.getSeconds()).slice(-2);\r\n\t\treturn dateString;\r\n\t};\r\n\r\n\t// Function to authenticate the user and choose the Google Account\r\n\tUtils.signIn = function (event) {\r\n\t\tgapi.auth2.getAuthInstance().signIn();\r\n\t\tevent.getView().byId('signButton').setText('Sign Out of Google');\r\n\t\t//event.getView().byId('configLabel').setText('Connected to Google!');\r\n\t\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\r\n\t\t// get the list of calendars and pass in the combobox so it can filled\t\t// first turn on the busy indicator\r\n\r\n\t\tthis.getCalendars(event.setCalendarDropDownEvents.bind(event));\r\n\t};\r\n\r\n\t// Function to signout of Google\r\n\tUtils.signOut = function (event) {\r\n\t\tgapi.auth2.getAuthInstance().signOut();\r\n\t\tevent.getView().byId('calendarComboBox').setEnabled(false);\r\n\t\tevent.getView().byId('signButton').setText('Sign Into Google');\r\n\t\t//event.getView().byId('configLabel').setText('Connected to Google!');\r\n\t\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\r\n\t};\r\n\r\n\t// Function to connect to Google Calendars\r\n\t// This gets called on startup\r\n\tUtils.connectToGoogle = function (callback) {\r\n\t\tgapi.load('client:auth2', this.initiateClient(callback));\r\n\r\n\t};\r\n\r\n\t// Initiate the client.\r\n\t// This gives the client access to Google Calendar\r\n\t// The scope is only set to read \r\n\tUtils.initiateClient = function (controller) {\r\n\r\n\t\tvar me = this;\r\n\r\n\t\tgapi.client.init({\r\n\t\t\tclientId: CLIENT_ID,\r\n\t\t\tdiscoveryDocs: DISCOVERY_DOCS,\r\n\t\t\tscope: SCOPES\r\n\t\t}).then(function () {\r\n\t\t\t// Listen for sign-in state changes.\r\n\t\t\tgapi.auth2.getAuthInstance().isSignedIn.listen(me.setItemsAfterLogin(controller));\r\n\r\n\r\n\t\t}, function (error) {\r\n\t\t\tconsole.log(JSON.stringify(error, null, 2));\r\n\t\t});\r\n\t};\r\n\r\n\tUtils.setItemsAfterLogin = function (controller) {\r\n\t\t//controller.getView().byId('configLabel').setText('Connected to Google!');\r\n\t\tsap.m.MessageToast.show('Connected to Google!', toastOptions);\r\n\r\n\t\tcontroller.getView().byId('signButton').setEnabled(true);\r\n\t\tcontroller.getView().byId('signButton').setBusy(false);\r\n\t};\r\n\r\n\t// Get the list of Calendars\r\n\tUtils.getCalendars = function (callback) {\r\n\r\n\t\t// initialize the list of parsed calendar data\r\n\t\tvar parsedList = [];\r\n\r\n\t\tvar listOfCalendars = gapi.client.calendar.calendarList.list().then(function (response) {\r\n\t\t\tconsole.log(response);\r\n\r\n\t\t\t// now get the list of calendars from the response\r\n\t\t\tvar list = response.result.items;\r\n\r\n\t\t\t// now parse it in the format that we want...\r\n\t\t\tfor (var i = 0; i < list.length; i++) {\r\n\t\t\t\tvar curCalObj = list[i];\r\n\t\t\t\tvar curCalParsed = {};\r\n\r\n\t\t\t\t// summary in the map is the Calendar name\r\n\t\t\t\tcurCalParsed.name = curCalObj.hasOwnProperty('summary') ? curCalObj.summary : 'Undefined';\r\n\r\n\t\t\t\t// get the id\r\n\t\t\t\tcurCalParsed.id = curCalObj.hasOwnProperty('id') ? curCalObj.id : '';\r\n\r\n\t\t\t\t// add it to the list of possible calendars\r\n\t\t\t\tparsedList.push(curCalParsed);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add the list of parsed calendars to the dropdown for user to select\r\n\t\t\tvar listModel = new sap.ui.model.json.JSONModel();\r\n\t\t\tcallback(parsedList);\r\n\r\n\t\t});\r\n\t\tconsole.log(listOfCalendars);\r\n\t};\r\n\r\n\t// eslint-disable-next-line no-unused-expressions\r\n\tUtils.getListOfEventsFromCalendarInDateRange = function (calendar, startDate, endDate, callback) {\r\n\r\n\t\t// the calendar key is what Gooogle Calendar API needs\r\n\t\tvar calendarKey = calendar.getKey();\r\n\t\tvar startDateString = startDate.toISOString();\r\n\t\tvar endDateString = endDate.toISOString();\r\n\r\n\t\tvar me = this;\r\n\r\n\t\t// get the list of events in the calendar\r\n\t\tgapi.client.calendar.events.list({\r\n\t\t\t'calendarId': calendarKey,\r\n\t\t\t'timeMin': startDateString,\r\n\t\t\t'timeMax': endDateString,\r\n\t\t\t'showDeleted': false,\r\n\t\t\t'singleEvents': true,\r\n\t\t\t'orderBy': 'startTime'\r\n\t\t}).then(callback);\r\n\r\n\t},\r\n\r\n\t\tUtils.parseISOStringToDate = function (string) {\r\n\t\t\tvar b = string.split(/\\D+/);\r\n\r\n\t\t\t// handle the parsing for dates\r\n\t\t\tif (b.length === 3) {\r\n\t\t\t\treturn new Date(Date.UTC(b[0], --b[1], b[2]));\r\n\t\t\t}\r\n\t\t\t// handle the parsing for datetimes\r\n\r\n\t\t\treturn new Date(Date.UTC(b[0], --b[1], b[2], b[3], b[4], b[5], b[6]));\r\n\t\t},\r\n\r\n\t\tUtils.getCategoryForEvent = function (event) {\r\n\r\n\t\t\t// loop through each of the event keys in the categories\r\n\t\t\tvar keys = Object.getOwnPropertyNames(eventCategories);\r\n\t\t\tfor (var k = 0; k < keys.length; k++) {\r\n\t\t\t\tvar key = keys[k];\r\n\t\t\t\t// now check all keywords in the event name to see if there is a match\r\n\t\t\t\tif (eventCategories[key].some(function (keyword, index) {\r\n\t\t\t\t\tevent.keyword = (event.name.toLowerCase()).includes(keyword.toLowerCase()) ? keyword.toLowerCase() : '';\r\n\t\t\t\t\treturn (event.name.toLowerCase()).includes(keyword.toLowerCase());\r\n\t\t\t\t}\r\n\t\t\t\t)) {\r\n\r\n\t\t\t\t\tconsole.log('Found ' + event.name + ' paired with ' + key + ' because of keyword: ' + event.keyword);\r\n\t\t\t\t\treturn key;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"Couldn't find a match for \" + event.name + ' so they are in Other');\r\n\t\t\t// return 'Other' as the category if it hits this point\r\n\t\t\treturn 'Other';\r\n\t\t},\r\n\r\n\t\tUtils.collectHoursInCategories = function (events) {\r\n\t\t\tvar squashedEvents = {};\r\n\r\n\t\t\tfor (var e = 0; e < events.length; e++) {\r\n\t\t\t\tvar event = events[e];\r\n\r\n\t\t\t\tif (isNaN(event.time)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (squashedEvents.hasOwnProperty(event.category)) {\r\n\t\t\t\t\tsquashedEvents[event.category] = (squashedEvents[event.category] + event.time);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsquashedEvents[event.category] = event.time;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// now loop through the map and build a data map in the appropiate format\r\n\t\t\tvar listOfCategories = [];\r\n\t\t\tvar categories = Object.getOwnPropertyNames(squashedEvents);\r\n\r\n\t\t\tfor (var c = 0; c < categories.length; c++) {\r\n\t\t\t\tvar category = categories[c];\r\n\t\t\t\tvar curRow = [];\r\n\t\t\t\tcurRow.push(category);\r\n\t\t\t\tcurRow.push(squashedEvents[category]);\r\n\t\t\t\tlistOfCategories.push(curRow);\r\n\t\t\t}\r\n\r\n\t\t\treturn listOfCategories;\r\n\t\t},\r\n\r\n\t\tUtils.parseListOfEvents = function (events, callback) {\r\n\t\t\tvar parsedEvents = [];\r\n\r\n\t\t\tfor (var i = 0; i < events.length; i++) {\r\n\t\t\t\tvar parsedEvent = {};\r\n\r\n\t\t\t\t// get the events start date & time.  Use date if date time is not there\r\n\t\t\t\tvar event = events[i];\r\n\r\n\t\t\t\tvar startTime = (event.start.dateTime) ? event.start.dateTime : event.start.date;\r\n\t\t\t\tvar endTime = (event.end.dateTime) ? event.end.dateTime : event.end.date;\r\n\t\t\t\tvar description = (event.description) ? event.description : (event.hasOwnProperty(\"bodyPreview\") ? event.bodyPreview : '');\r\n\r\n\t\t\t\tparsedEvent.name = (event.hasOwnProperty(\"summary\")) ? event.summary : event.subject;\r\n\t\t\t\tparsedEvent.description = description;\r\n\t\t\t\tparsedEvent.startTimeString = startTime;\r\n\t\t\t\tparsedEvent.endTimeString = endTime;\r\n\t\t\t\tparsedEvent.startTime = this.parseISOStringToDate(startTime);\r\n\t\t\t\tparsedEvent.endTime = this.parseISOStringToDate(endTime);\r\n\r\n\t\t\t\t// figure out what category this event falls into\r\n\t\t\t\tparsedEvent.category = this.getCategoryForEvent(parsedEvent);\r\n\r\n\t\t\t\t// now get the time difference in hours between the start time and the end time\r\n\t\t\t\tparsedEvent.time = Math.ceil(Math.abs(parsedEvent.endTime - parsedEvent.startTime) / (1000 * 60 * 60));\r\n\t\t\t\tparsedEvent.startTimeString = getDateString(startTime);\r\n\t\t\t\tparsedEvent.endTimeString = getDateString(endTime);\r\n\t\t\t\t// if time is NaN that is problem\r\n\t\t\t\tif (isNaN(parsedEvent.time)) {\r\n\t\t\t\t\tconsole.log(isNan(event));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add the parsed event to the list\r\n\t\t\t\tparsedEvents.push(parsedEvent);\r\n\t\t\t}\r\n\r\n\t\t\t// add all the hours in a category\r\n\t\t\tvar catData = this.collectHoursInCategories(parsedEvents);\r\n\r\n\t\t\tcallback(catData, parsedEvents);\r\n\t\t};\r\n\r\n\treturn Utils;\r\n}, true /* bExport */);",
		"timebox/services/GoogleChartService.js": "// Author: Andrew Hajj\r\n// Purpose: functions to get calendar info from google\r\n\r\nsap.ui.define('com/metcs633/services/GoogleChartService', [\r\n], function () {\r\n\t'use strict';\r\n\r\n\tvar Utils = {};\r\n\r\n\tUtils.drawChart = function (catData, controller, callback) {\r\n\t\t// Create the data table.\r\n\t\tvar data = new google.visualization.DataTable();\r\n\t\tdata.addColumn('string', 'Event');\r\n\t\tdata.addColumn('number', 'Hours');\r\n\t\tdata.addRows(catData);\r\n\t\t// Set chart options\r\n\r\n\t\tvar width = 800;\r\n\t\tvar height = 800;\r\n\r\n\t\tif (sap.ui.Device.system.phone) {\r\n\t\t\twidth = 200;\r\n\t\t\theight = 200;\r\n\t\t}\r\n\r\n\t\tvar options = {\r\n\t\t\t'title': 'Hours per Category',\r\n\t\t\t'width': width,\r\n\t\t\t'height': height\r\n\t\t};\r\n\t\tvar HBoxDomRef = controller.getView().byId('barChartPanel').getDomRef();\r\n\t\t// Instantiate and draw our chart, passing in our HBox.\r\n\t\tvar chart = {};\r\n\t\tif (controller.isColumnChart) {\r\n\t\t\tchart = new google.visualization.ColumnChart(HBoxDomRef);\r\n\t\t} else {\r\n\r\n\t\t\tchart = new google.visualization.PieChart(HBoxDomRef);\r\n\t\t}\r\n\t\tgoogle.visualization.events.addListener(chart, 'ready', function () {\r\n\t\t\tgoogle.visualization.events.addListener(chart, 'select', function () {\r\n\t\t\t\t// grab a few details before redirecting\r\n\t\t\t\tvar events = controller.parsedEvents;\r\n\t\t\t\tvar pickedEvents = events.filter(e =>\r\n\t\t\t\t\te.category === data.getValue(chart.getSelection()[0].row, 0)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// now we get the filtered events and show it in the table\r\n\t\t\t\tvar listModel = new sap.ui.model.json.JSONModel();\r\n\t\t\t\tlistModel.setData(pickedEvents);\r\n\t\t\t\tcontroller.getView().byId('eventsTable').setModel(listModel);\r\n\t\t\t\tcontroller._wizard.goToStep(controller.getView().byId(\"showTable\"));\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tchart.draw(data, options);\r\n\r\n\t\tcallback();\r\n\t\tcontroller._wizard.goToStep(controller.getView().byId(\"showChart\"));\r\n\t};\r\n\r\n\treturn Utils;\r\n}, true /* bExport */);",
		"timebox/services/O365CalendarService.js": "/* eslint-disable no-undef */\r\n// Author: Andrew Hajj\r\n// Purpose: functions to get calendar info from google\r\nsap.ui.define([],\r\n\tfunction () {\r\n\t\t'use strict';\r\n\r\n\t\tvar Utils = {};\r\n\t\tvar oMsalClient = null;\r\n\r\n\t\tvar toastOptions = {\r\n\t\t\tduration: 2000,                  // default\r\n\t\t\twidth: \"15em\",                   // default\r\n\t\t\tmy: \"center top\",             // default\r\n\t\t\tat: \"center top\",             // default\r\n\t\t\tof: window,                      // default\r\n\t\t\toffset: \"0 0\",                   // default\r\n\t\t\tcollision: \"fit fit\",            // default\r\n\t\t\tonClose: null,                   // default\r\n\t\t\tautoClose: true,                 // default\r\n\t\t\tanimationTimingFunction: \"ease\", // default\r\n\t\t\tanimationDuration: 2000,         // default\r\n\t\t\tcloseOnBrowserNavigation: true   // default\r\n\t\t};\r\n\r\n\t\tvar APP_ID = 'f43b3bbb-f2aa-4134-9518-e0a190584c6f';\r\n\t\tvar APP_SCOPES = ['Calendars.Read'];\r\n\t\tvar config = {\r\n\t\t\tmsalConfig: {\r\n\t\t\t\tauth: {\r\n\t\t\t\t\tclientId: APP_ID,\r\n\t\t\t\t\t//redirectUri: \"http://localhost:8000/webapp\", //defaults to application start page\r\n\t\t\t\t\tpostLogoutRedirectUri: 'http://localhost:8000/webapp'\r\n\t\t\t\t},\r\n\t\t\t\tcache: {\r\n\t\t\t\t\tcacheLocation: 'localStorage',\r\n\t\t\t\t\tstoreAuthStateInCookie: true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgraphBaseEndpoint: 'https://graph.microsoft.com/v1.0/',\r\n\t\t\tscopeConfig: {\r\n\t\t\t\tscopes: APP_SCOPES\r\n\t\t\t}\r\n\t\t};\r\n\t\t// #region Helpers\r\n\t\tfunction handleAuthError(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\r\n\t\tfunction getMSGraphClient() {\r\n\t\t\tif (!oMsalClient) {\r\n\t\t\t\tif (Msal) {\r\n\t\t\t\t\treturn new Msal.UserAgentApplication(config.msalConfig);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn oMsalClient;\r\n\t\t}\r\n\r\n\t\tfunction getStartDate(startDate, endDate) {\r\n\t\t\tvar start = new Date();\r\n\t\t\tvar end = new Date();\r\n\t\t\tif (startDate && endDate) {\r\n\t\t\t\tstart = new Date(new Date(startDate).setHours(0, 0, 0));\r\n\t\t\t\tend = new Date(new Date(endDate).setHours(0, 0, 0));\r\n\t\t\t} else {\r\n\t\t\t\tend = new Date(new Date().setHours(0, 0, 0));\r\n\t\t\t\tstart = new Date(new Date(2015, 3, 2).setHours(0, 0, 0));\r\n\t\t\t}\r\n\t\t\treturn { start, end };\r\n\t\t}\r\n\r\n\t\tfunction getTimeDifference(start, end) {\r\n\t\t\treturn (Date.parse(end) - Date.parse(start));\r\n\t\t}\r\n\r\n\t\tfunction set365StatusText(event) {\r\n\t\t\tvar signedInO365 = (localStorage.getItem('msal.idtoken') !== null);\r\n\t\t\tif (!signedInO365) {\r\n\t\t\t\t//event.getView().byId('signButtonO365').setText('Sign In to O365');\r\n\t\t\t\t//event.getView().byId('configLabelO365').setText('Signed Out of O365!');\r\n\t\t\t\tsap.m.MessageToast.show('Signed Out of O365!', toastOptions);\r\n\t\t\t} else {\r\n\t\t\t\t//event.getView().byId('signButtonO365').setText('Sign Out of O365');\r\n\t\t\t\t//event.getView().byId('configLabelO365').setText('Connected to O365!');\r\n\t\t\t\tsap.m.MessageToast.show('Connected to O365!', toastOptions);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// #endregion\r\n\t\tUtils.initiateClient = function (event, signout) {\r\n\t\t\tvar oMsalClient = getMSGraphClient();\r\n\t\t\tvar me = this;\r\n\t\t\tif (signout) {\r\n\t\t\t\toMsalClient.logout();\r\n\t\t\t\tset365StatusText(event);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t// check if the user is already signed in\r\n\t\t\tif (!oMsalClient.getAccount()) {\r\n\t\t\t\toMsalClient.loginPopup(config.scopeConfig).then(function (res) {\r\n\t\t\t\t\tset365StatusText(event);\r\n\t\t\t\t\tme.getCalendars(event.setCalendarDropDownEvents.bind(event));\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}).catch(function (error) {\r\n\t\t\t\t\thandleAuthError(error);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tset365StatusText(event);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\r\n\t\tUtils.signIn = function (event) {\r\n\t\t\tthis.initiateClient(event);\r\n\t\t};\r\n\r\n\t\tUtils.signOut = function (event) {\r\n\t\t\tthis.initiateClient(event, true);\r\n\t\t};\r\n\r\n\t\t// #region Calendars\r\n\t\tUtils.getCalendars = function (callback) {\r\n\t\t\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\r\n\t\t\t\t// eslint-disable-next-line no-undef\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: 'Bearer ' + token.accessToken\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\turl: `${config.graphBaseEndpoint}me/calendars`,\r\n\r\n\t\t\t\t\ttype: 'GET'\r\n\t\t\t\t}).then(function (res) {\r\n\t\t\t\t\tconsole.log('getCalendars', res);\r\n\t\t\t\t\tcallback(res.value);\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}).fail(function (error) {\r\n\t\t\t\t\thandleAuthError(error);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tUtils.getCalendarById = function (id) {\r\n\t\t\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\r\n\t\t\t\t// eslint-disable-next-line no-undef\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: 'Bearer ' + token.accessToken\r\n\t\t\t\t\t},\r\n\t\t\t\t\turl: `${config.graphBaseEndpoint}me/calendars/${id}`,\r\n\t\t\t\t\ttype: 'GET'\r\n\t\t\t\t}).then(function (res) {\r\n\t\t\t\t\tconsole.log('getCalendars', res);\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}).fail(function (error) {\r\n\t\t\t\t\thandleAuthError(error);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t};\r\n\t\t// #endregion\r\n\r\n\t\t// #region Categories\r\n\r\n\t\tUtils.getCategories = function (startDate, endDate, calendarId = '') {\r\n\t\t\tvar start = new Date();\r\n\t\t\tvar end = new Date();\r\n\r\n\t\t\t// start and end date format 2020-01-31\r\n\t\t\tvar dates = getStartDate(startDate, endDate);\r\n\t\t\tstart = dates.start;\r\n\t\t\tend = dates.end;\r\n\r\n\t\t\tconsole.log('start date:', start);\r\n\t\t\tconsole.log('end date:', end);\r\n\r\n\t\t\tvar apiUrl = '';\r\n\t\t\tif (calendarId && calendarId.length > 0) {\r\n\t\t\t\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\r\n\t\t\t} else {\r\n\t\t\t\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\r\n\t\t\t}\r\n\t\t\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: 'Bearer ' + token.accessToken\r\n\t\t\t\t\t},\r\n\t\t\t\t\turl: `${config.graphBaseEndpoint}${apiUrl}`,\r\n\t\t\t\t\ttype: 'GET'\r\n\t\t\t\t}).then((categories) => {\r\n\t\t\t\t\tconsole.log('getCategories', categories);\r\n\r\n\t\t\t\t\tvar retCategories = [];\r\n\t\t\t\t\tif (categories && categories.value) {\r\n\t\t\t\t\t\tcategories.value.forEach(element => {\r\n\t\t\t\t\t\t\tretCategories = retCategories.concat(element.categories);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcategories = JSON.stringify([...new Set(retCategories)]);\r\n\t\t\t\t\tconsole.log('getCategories result:', categories);\r\n\t\t\t\t\treturn categories;\r\n\t\t\t\t}).fail(function (error) {\r\n\t\t\t\t\thandleAuthError(error);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tUtils.getCategoriesTime = function (startDate, endDate, calendarId = '') {\r\n\t\t\tvar start = new Date();\r\n\t\t\tvar end = new Date();\r\n\r\n\t\t\t// start and end date format 2020-01-31\r\n\t\t\tvar dates = getStartDate(startDate, endDate);\r\n\t\t\tstart = dates.start;\r\n\t\t\tend = dates.end;\r\n\r\n\t\t\tconsole.log('start date:', start);\r\n\t\t\tconsole.log('end date:', end);\r\n\r\n\t\t\tvar apiUrl = '';\r\n\t\t\tif (calendarId && calendarId.length > 0) {\r\n\t\t\t\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\r\n\t\t\t} else {\r\n\t\t\t\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\r\n\t\t\t}\r\n\t\t\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: 'Bearer ' + token.accessToken\r\n\t\t\t\t\t},\r\n\t\t\t\t\turl: `${config.graphBaseEndpoint}${apiUrl}`,\r\n\t\t\t\t\ttype: 'GET'\r\n\t\t\t\t}).then((res) => {\r\n\t\t\t\t\tconsole.log('getCategoriesTime', res);\r\n\r\n\t\t\t\t\tvar catTimeTotals = {};\r\n\t\t\t\t\tif (res && res.value) {\r\n\t\t\t\t\t\tres.value.forEach(element => {\r\n\t\t\t\t\t\t\tvar catTimeTotalsCats = element.categories;\r\n\t\t\t\t\t\t\t// eslint-disable-next-line max-nested-callbacks\r\n\t\t\t\t\t\t\tcatTimeTotalsCats.forEach(cat => {\r\n\t\t\t\t\t\t\t\tif (catTimeTotals[cat]) {\r\n\t\t\t\t\t\t\t\t\tvar milliSeconds = parseFloat(catTimeTotals[cat], 10);\r\n\t\t\t\t\t\t\t\t\tmilliSeconds += getTimeDifference(element.start.dateTime, element.end.dateTime);\r\n\t\t\t\t\t\t\t\t\tcatTimeTotals[cat] = milliSeconds;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tcatTimeTotals[cat] = getTimeDifference(element.start.dateTime, element.end.dateTime);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tres = JSON.stringify(catTimeTotals);\r\n\t\t\t\t\tconsole.log('getCategoriesTime:', res);\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}).fail(function (error) {\r\n\t\t\t\t\thandleAuthError(error);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t};\r\n\t\t// #endregion\r\n\r\n\t\t// #region Events\r\n\t\tUtils.getEvents = function (startDate, endDate, calendarId = '', callback, filterToCategory = '') {\r\n\t\t\tvar start = new Date();\r\n\t\t\tvar end = new Date();\r\n\r\n\t\t\t// start and end date format 2020-01-31\r\n\t\t\tvar dates = getStartDate(startDate, endDate);\r\n\t\t\tstart = dates.start;\r\n\t\t\tend = dates.end;\r\n\r\n\t\t\tconsole.log('start date:', start);\r\n\t\t\tconsole.log('end date:', end);\r\n\r\n\t\t\tvar apiUrl = '';\r\n\t\t\tif (calendarId && calendarId.length > 0) {\r\n\t\t\t\tapiUrl = `me/calendars/${calendarId}/calendarView?startDateTime=${start.toISOString()}'&endDateTime=${end.toISOString()}`;\r\n\t\t\t} else {\r\n\t\t\t\tapiUrl = `/me/calendar/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}`;\r\n\t\t\t}\r\n\t\t\tgetMSGraphClient().acquireTokenSilent(config.scopeConfig).then(function (token) {\r\n\r\n\t\t\t\t// first get a count of events\r\n\t\t\t\t// then select all of those events\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: 'Bearer ' + token.accessToken\r\n\t\t\t\t\t},\r\n\t\t\t\t\turl: `${config.graphBaseEndpoint}${apiUrl}&$count=true`,\r\n\t\t\t\t\ttype: 'GET'\r\n\t\t\t\t}).then(function (res) {\r\n\t\t\t\t\t$.ajax({\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tAuthorization: 'Bearer ' + token.accessToken\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\turl: `${config.graphBaseEndpoint}${apiUrl}&$top=${res[\"@odata.count\"]}`,\r\n\t\t\t\t\t\ttype: 'GET'\r\n\t\t\t\t\t}).then(function (res) {\r\n\t\t\t\t\t\tif (filterToCategory && filterToCategory.length > 0) {\r\n\t\t\t\t\t\t\tres.value = filterToCategory(res, filterToCategory);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconsole.log('getEvents', res);\r\n\t\t\t\t\t\tcallback(res);\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t}).fail(function (error) {\r\n\t\t\t\t\t\thandleAuthError(error);\r\n\t\t\t\t\t});\r\n\t\t\t\t}).fail(function (error) {\r\n\t\t\t\t\thandleAuthError(error);\r\n\t\t\t\t});\r\n\r\n\t\t\t});\r\n\t\t};\r\n\t\t// #endregion\r\n\r\n\t\treturn Utils;\r\n\t}, true /* bExport */);\r\n",
		"timebox/view/App.view.xml": "<mvc:View\r\n\tdisplayBlock=\"true\"\r\n\txmlns=\"sap.m\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"><Shell><App id=\"app\"/></Shell></mvc:View>",
		"timebox/view/Home.view.xml": "<mvc:View\r\n\tcontrollerName=\"com.metcs633.controller.Home\"\r\n\tdisplayBlock=\"true\"\r\n\txmlns=\"sap.m\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\txmlns:l=\"sap.ui.layout\"\t\t\r\n\txmlns:core=\"sap.ui.core\"><Page\r\n\t\t\tid=\"page\"><headerContent><Image src=\"Images/logo_transparent.png\" activeSrc=\"/webapp\"></Image></headerContent><content><Wizard id=\"CreateProductWizard\" class=\"sapUiResponsivePadding--header sapUiResponsivePadding--content\"><WizardStep id=\"googleOrOutlookStep\"\r\n\t\t\t\t\t\t\t\ttitle=\"Choose Source\"\r\n\t\t\t\t\t\t\t\tcomplete=\"chooseStepCompleted\"\r\n\t\t\t\t\t\t\t\tvalidated=\"true\"><Text class=\"sapUiSmallMarginBottom\"\r\n\t\t\t\t\t\t\t\ttext=\"Welcome to the Timebox Tool! The first step is to choose Google or o365.  Click one below to continue.\"/><HBox\r\n\t\t\t\t\t\t\t\talignItems=\"Center\"\r\n\t\t\t\t\t\t\t\tjustifyContent=\"Center\"\r\n\t\t\t\t\t\t\t\twidth=\"100%\"><SegmentedButton\r\n\t\t\t\t\t\t\t\twidth=\"320px\"\r\n\t\t\t\t\t\t\t\tselectionChange=\"setCalendarTypeFromButton\"><items><SegmentedButtonItem icon=\"sap-icon://appointment\" text=\"Google\"/><SegmentedButtonItem icon=\"sap-icon://appointment-2\" text=\"o365\"/></items></SegmentedButton></HBox></WizardStep><WizardStep id=\"signInAndChooseCalendarStep\"\r\n\t\t\t\t\t\t\t\t\tvalidated=\"false\"\r\n\t\t\t\t\t\t\t\t\ttitle=\"Sign and Choose Calendar\"\r\n\t\t\t\t\t\t\t\t\tcomplete=\"goButton\"\r\n\t\t\t\t\t\t\t\t\tactivate=\"signInAndChoosseValidation\"><VBox><Text class=\"sapUiSmallMarginBottom\"\r\n\t\t\t\t\t\t\t\ttext=\"Next, login, choose a calendar and select a date range\"/><Button \r\n\t\t\t\t\t\t\t\tid=\"signButton\"\r\n\t\t\t\t\t\t\t\ttext=\"Sign in\"\r\n\t\t\t\t\t\t\t\tenabled=\"false\"\r\n\t\t\t\t\t\t\t\tbusyIndicatorDelay=\"0\"\r\n\t\t\t\t\t\t\t\tbusy=\"true\"\r\n\t\t\t\t\t\t\t\tpress=\"onSignIn\"\r\n\t\t\t\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"></Button></VBox><Panel\r\n\t\t\t\t\t\t\tid=\"calendarSelectionPanel\"\r\n\t\t\t\t\t\t\tvisible=\"false\"><VBox class = \"sapUiSmallMarginTopBottom\"><Label text=\"Choose a Calendar: \" labelFor=\"calendarComboBox\"/><ComboBox\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Choose a Calendar\"\r\n\t\t\t\t\t\t\t\t\tid=\"calendarComboBox\"\r\n\t\t\t\t\t\t\t\t\tbusyIndicatorDelay=\"0\"\r\n\t\t\t\t\t\t\t\t\titems=\"{\r\n\t\t\t\t\t\t\t\t\t\tpath: '/'\r\n\t\t\t\t\t\t\t\t\t}\"\r\n\t\t\t\t\t\t\t\t\tclass=\"sapUiTinyMarginEnd\"\r\n\t\t\t\t\t\t\t\t\trequired=\"true\"\r\n\t\t\t\t\t\t\t\t\tselectionChange=\"calendarSelectionChange\"><core:Item key=\"{id}\" text=\"{name}\" /></ComboBox><HBox><VBox class = \"sapUiSmallMarginEnd\"><Label text=\"Choose a start date: \" labelFor=\"DTP1\"/><DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"DTP1\"\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Date ...\"\r\n\t\t\t\t\t\t\t\t\t\t\tchange=\"handleStartDateChange\"\r\n\t\t\t\t\t\t\t\t\t\t\trequired=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMarginBottom\"/></VBox><VBox><Label text=\"Choose an end date: \" labelFor=\"DTP2\"/><DatePicker\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"DTP2\"\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Date ...\"\r\n\t\t\t\t\t\t\t\t\t\t\trequired=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tchange=\"handleEndDateChange\"\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMarginBottom\"/></VBox></HBox><Button\r\n\t\t\t\t\t\t\t\t\tid=\"goButton\"\r\n\t\t\t\t\t\t\t\t\ttext=\"Get Events\"\r\n\t\t\t\t\t\t\t\t\tvisible=\"false\"\r\n\t\t\t\t\t\t\t\t\tpress=\"goButton\"></Button></VBox></Panel></WizardStep><WizardStep id=\"showChart\"\r\n\t\t\t\t\t\t\t\tactivate=\"pricingActivate\"\r\n\t\t\t\t\t\t\t\tcomplete=\"pricingComplete\"\r\n\t\t\t\t\t\t\t\tvalidated=\"false\"\r\n\t\t\t\t\t\t\t\ttitle=\"Chart\"><Panel><Button\r\n\t\t\t\t\t\t\t\tid=\"changeChartType\"\r\n\t\t\t\t\t\t\t\ttext=\"Change Chart\"\r\n\t\t\t\t\t\t\t\tpress=\"changeChart\"\r\n\t\t\t\t\t\t\t\tvisible=\"false\"></Button><FlexBox\r\n\t\t\t\t\t\t\t\talignItems=\"Center\"\r\n\t\t\t\t\t\t\t\tjustifyContent=\"Center\"><items><Panel\r\n\t\t\t\t\t\t\t\t\t\tid=\"barChartPanel\"></Panel></items></FlexBox></Panel></WizardStep><WizardStep id=\"showTable\"\r\n\t\t\t\t\t\tvalidated=\"false\"\r\n\t\t\t\t\t\tshowNextButton=\"false\"\r\n\t\t\t\t\t\ttitle=\"Events\"><Table\r\n\t\t\t\t\t\t\tid=\"eventsTable\"\r\n\t\t\t\t\t\t\tinset=\"false\"\r\n\t\t\t\t\t\t\tvisible=\"false\"\r\n\t\t\t\t\t\t\titems=\"{\r\n\t\t\t\t\t\t\t\tpath: '/',\r\n\t\t\t\t\t\t\t\tsorter: [{\r\n\t\t\t\t\t\t\t\t\tpath: 'category'\r\n\t\t\t\t\t\t\t\t}, \r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpath: 'name'\r\n\t\t\t\t\t\t\t\t}, \r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpath: 'keyword'\r\n\t\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t\t}\"><columns><Column\r\n\t\t\t\t\t\t\t\t\twidth=\"12em\"><Text text=\"Event\" /></Column><Column\r\n\t\t\t\t\t\t\t\t\tdemandPopin=\"true\"><Text text=\"Category\" /></Column><Column\r\n\t\t\t\t\t\t\t\t\tdemandPopin=\"true\"><Text text=\"Keyword\" /></Column><Column\r\n\t\t\t\t\t\t\t\t\tdemandPopin=\"true\"><Text text=\"Date\" /></Column><Column\r\n\t\t\t\t\t\t\t\t\tdemandPopin=\"true\"><Text text=\"Hours\" /></Column></columns><items><ColumnListItem><cells><Text\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"{name}\"/><Text\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"{category}\" /><Text\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"{keyword}\" /><Text\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"{startTimeString}\" /><Text\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"{time}\" /></cells></ColumnListItem></items></Table></WizardStep></Wizard></content></Page></mvc:View>"
	}
});